{"version":3,"sources":["pages/Home.js","utils/hexstring.js","utils/misc.js","pacer/constants.js","pacer/sysex.js","utils/ports.js","pacer/utils.js","components/DumpSysex.js","components/Midi.js","components/PortsGrid.js","pages/TestSender.js","components/PresetSelector.js","components/ControlSelector.js","components/ControlStepsEditor.js","components/ControlModeEditor.js","components/PresetNameEditor.js","pages/Preset.js","utils/midi.js","pages/Monitor.js","components/Footer.js","pages/Global.js","pages/DumpDecoder.js","components/MidiSettingsEditor.js","pages/PresetMidi.js","components/Download.js","pages/Patch.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","className","href","target","rel","src","alt","Component","h","v","undefined","str","len","char","s","c","n","length","padZero","toString","toUpperCase","hs","data","Array","from","map","join","fromHexString","string","sep","replace","Uint8Array","i","parseInt","substr","sortObject","obj","arr","prop","hasOwnProperty","push","key","value","sort","b","localeCompare","PACER_MIDI_INPUT_PORT_NAME","SYSEX_SIGNATURE","SYSEX_HEADER","COMMAND_SET","COMMAND_GET","TARGET_PRESET","TARGETS","_TARGETS","Object","defineProperty","CONTROL_NAME","CONTROL_STOMPSWITCH_1","CONTROL_STOMPSWITCH_6","CONTROL_STOMPSWITCH_A","CONTROL_FOOTSWITCH_4","CONTROL_EXPRESSION_PEDAL_1","CONTROL_EXPRESSION_PEDAL_2","CONTROL_MIDI","CONTROL_ALL","CONTROLS","_CONTROLS","CONTROLS_FULLNAME","1","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","54","55","126","127","STOMPSWITCHES_TOP","STOMPSWITCHES_BOTTOM","FOOTSWITCHES","EXPPEDALS","MSG_CTRL_OFF","MSG_TYPES","_MSG_TYPES","MSG_TYPES_FULLNAME_SW","_MSG_TYPES_FULLNAME_S","MSG_TYPES_FULLNAME_SW_SORTED","MSG_TYPES_FULLNAME_MIDI_SORTED","_MSG_TYPES_FULLNAME_E","_MSG_TYPES_FULLNAME_M","MSG_TYPES_DATA_HELP","_MSG_TYPES_DATA_HELP","COLORS","0","2","3","4","5","6","7","8","9","10","11","12","CONTROL_MODE_ELEMENT","CONTROL_MODES","_CONTROL_MODES","SINGLE_PRESET_EXPECTED_BYTES","SYSEX_START","SYSEX_END","CMD","TGT","IDX","OBJ","ELM","isObject","item","isArray","mergeDeep","_len","arguments","sources","_key","source","shift","assign","apply","concat","isSysexData","byteLength","parseSysexMessage","obj_type","message","cmd","tgt","idx","console","warn","String","fromCharCode","slice","getPresetName","steps","e","index","config","channel","msg_type","active","getControlStep","mode_cfg","control_mode","getControlMode","led_cfg","data_len","bytes","step","cfg","d","getControlLED","getMidiSetting","parseSysexDump","presets","indexOf","k","manufacturer_id","NEKTAR_TECHNOLOGY_INC","log","checksum","reduce","previousValue","currentValue","requestAllPresets","msg","cs","requestPreset","presetIndex","requestPresetObj","controlId","getControlUpdateSysexMessages","JSON","stringify","msgs","_arr","keys","_i","changed","led_midi_ctrl","led_active_color","led_inactive_color","led_num","m","buildControlStepSysex","mode","buildControlModeSysex","buildPresetNameSysex","charCodeAt","getMidiSettingUpdateSysexMessages","settings","_arr2","_i2","setting","buildMidiSettingsSysex","portById","id","p","WebMidi","inputs","find","outputs","inputById","outputById","inputName","name","outputName","presetIndexToXY","Math","floor","MidiTable","_ref","colSpan","t","Note","MidiSettings","_ref2","DumpSysex_MidiTable","ControlTable","_ref3","c0","c1","Controls","_ref4","controls","DumpSysex_ControlTable","Preset","_ref5","DumpSysex_Controls","DumpSysex_MidiSettings","Presets","_ref6","DumpSysex_Preset","DumpSysex","_ref7","DumpSysex_Presets","Midi","state","input","output","pacerPresent","connectInput","port","_this","props","onMidiInputEvent","hasListener","addListener","onInputConnection","disconnectInput","removeListener","onInputDisconnection","connectOutput","setState","onOutputConnection","disconnectOutput","port_id","produce","draft","pacerOutputConnected","onOutputDisconnection","autoConnectInput","autoConnect","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","type","match","RegExp","err","return","autoConnectOutput","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","registerInputs","r","only","r2","filter","findIndex","registerOutputs","unRegisterInputs","unRegisterOutputs","handleMidiConnectEvent","group","groupEnd","togglePort","prev","midiOn","portsGrouped","g","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","selected","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","this","react","portsRenderer","children","defaultProps","classname","PortsGrid","groupedPorts","clickHandler","react_switch_default","onChange","checked","height","width","TestSender","messages","customMessage","showBusy","setTimeout","onBusy","updateCustomMessage","event","sendCustomMessage","sendSysex","handleMidiInputEvent","callback","wait","timeout","clearTimeout","batchMessages","setOutput","out","sendMessage","_this2","_this$state","hex_msg","onClick","disabled","size","placeholder","src_components_DumpSysex","Midi_Midi","components_PortsGrid","Selector","PresetSelector","currentPreset","PresetSelector_Selector","letter","digit","xy","Control","ControlSelector","currentControl","ControlSelector_Control","LEDMidi","current_value","LEDColor","LEDNum","MidiNote","note","Step","d0","d1","d2","updateCallback","ControlStepsEditor_MidiNote","ControlStepsEditor_LEDColor","ControlStepsEditor_LEDNum","ControlStepsEditor_LEDMidi","ControlStepsEditor","onStepUpdate","stepIndex","dataType","dataIndex","onUpdate","ControlStepsEditor_Step","ControlModeEditor","PresetNameEditor","onNameUpdate","MAX_STATUS_MESSAGES","isVal","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_ref$busyMessage","busy","busyMessage","_ref$bytesExpected","bytesExpected","_ref$bytesReceived","bytesReceived","addStatusMessage","statusMessages","addInfoMessage","addWarningMessage","addErrorMessage","callbackBusy","accumulator","element","binData","bin_index","set","onChangeFile","file","files","readFiles","onInputFile","inputOpenFileRef","current","click","onDragEnter","dropZoneActive","onDragLeave","onDrop","selectPreset","readPacer","selectControl","updateControlStep","updateControlMode","updatePresetName","updatePacer","React","createRef","Promise","all","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","t0","Response","arrayBuffer","t1","sent","pId","cId","stop","_x2","_this3","showEditor","updateMessages","es","disableClick","style","position","top","right","bottom","left","paddingTop","background","textAlign","color","fontSize","src_components_PresetSelector","ref","display","components_PresetNameEditor","src_components_ControlSelector","src_components_ControlStepsEditor","src_components_ControlModeEditor","debug","MESSAGE","128","144","160","176","192","208","224","CONTROLER","32","33","34","36","37","38","39","40","42","43","44","45","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","91","92","93","94","95","96","97","98","99","100","101","120","121","122","123","124","125","MAX_MESSAGES","Monitor","unshift","pop","parseMidi","info2","info3","messageCode","velocity","controlNumber","controlValue","program","pitchBend","pitchBendMultiplier","Footer","Global","marginTop","DumpDecoder","Setting","MidiSettingsEditor_MidiNote","MidiSettingsEditor","onSettingUpdate","settingIndex","MidiSettingsEditor_Setting","PresetMidi","updateMidiSettings","src_components_MidiSettingsEditor","Download","handleClick","url","window","URL","createObjectURL","Blob","filename","addTimestamp","now","Date","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","shadowlink","document","download","body","appendChild","removeChild","revokeObjectURL","label","Patch","components_Download","show","MenuLink","to","activeOnlyWhenExact","Route","path","exact","Link","NoMatch","App","progress","_ref3$busy","_ref3$busyMessage","_ref3$bytesExpected","_ref3$bytesReceived","round","q","QueryString","location","search","HashRouter","App_MenuLink","Switch","render","src_pages_Home","src_pages_Preset","pages_PresetMidi","pages_Global","src_pages_Patch","src_pages_Monitor","src_pages_DumpDecoder","src_pages_TestSender","component","src_components_Footer","Boolean","hostname","noop","error","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4lBA0FeA,0LAnFP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAEXH,EAAAC,EAAAC,cAAA,0BAEAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,iEACQF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,0CAA0CC,OAAO,SAASC,IAAI,uBAAtE,gBADR,KAGAN,EAAAC,EAAAC,cAAA,4BAAmBF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAAhB,UAAnB,QAA8DH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAAhB,SAA9D,2DACoCH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAAhB,OADpC,0CAIJH,EAAAC,EAAAC,cAAA,yBAEAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,yGACAF,EAAAC,EAAAC,cAAA,mEAGJF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,gFACAF,EAAAC,EAAAC,cAAA,8EACAF,EAAAC,EAAAC,cAAA,qEACAF,EAAAC,EAAAC,cAAA,oBAAWF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,QAAX,KACAH,EAAAC,EAAAC,cAAA,OAAKK,IAAI,+BAA+BC,IAAI,KAC5CR,EAAAC,EAAAC,cAAA,oBAAWF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,WAAX,KACAH,EAAAC,EAAAC,cAAA,OAAKK,IAAI,yBAAyBC,IAAI,KAEtCR,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAb,mBACAH,EAAAC,EAAAC,cAAA,iCAAwBF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAAhB,WAAxB,0EAEAH,EAAAC,EAAAC,cAAA,0GAEAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAb,sBACAH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,iCAIRF,EAAAC,EAAAC,cAAA,kCAEAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,oEACAF,EAAAC,EAAAC,cAAA,OAAKK,IAAI,cAAcC,IAAI,MAE/BR,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,iJACAF,EAAAC,EAAAC,cAAA,OAAKK,IAAI,cAAcC,IAAI,OAInCR,EAAAC,EAAAC,cAAA,iBAEAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,iCAGPF,EAAAC,EAAAC,cAAA,wBAEAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,kFACAF,EAAAC,EAAAC,cAAA,iDACWF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,iDAAiDC,OAAO,SAASC,IAAI,uBAA7E,iBACXN,EAAAC,EAAAC,cAAA,8GAGJF,EAAAC,EAAAC,cAAA,oBAEAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAf,2MA5EGM,6BCcNC,EAAI,SAAAC,GACb,OAAc,OAANA,QAAoBC,IAAND,EAAmB,GATtB,SAACE,EAAKC,EAAKC,GAI9B,IAHA,IAAIC,EAAI,GACJC,EAAIF,GAAQ,IACZG,GAAKJ,GAAO,GAAKD,EAAIM,OAClBH,EAAEG,OAASD,GAAGF,GAAKC,EAC1B,OAAOD,EAAIH,EAImCO,CAAQT,EAAEU,SAAS,IAAIC,cAAe,IAG3EC,EAAK,SAAAC,GAAI,OAAc,OAATA,QAA0BZ,IAATY,EAAsB,GAAMC,MAAMC,KAAKF,GAAMG,IAAI,SAAAT,GAAC,OAAIR,EAAEQ,KAAKU,KAAK,MASjGC,EAAgB,SAASC,EAAQC,GAC1C,IAAIf,EAAIe,EAAMD,EAAOE,QAAQD,EAAK,IAAMD,EACxC,GAAKd,EAAEG,OAAS,EAAK,EACjB,OAAO,KAEX,GAAiB,IAAbH,EAAEG,OAAc,OAAO,KAE3B,IADA,IAAIlB,EAAI,IAAIgC,WAAWjB,EAAEG,OAAS,GACzBe,EAAE,EAAGA,EAAKlB,EAAEG,OAAS,EAAIe,IAC9BjC,EAAEiC,GAAKC,SAASnB,EAAEoB,OAAW,EAAJF,EAAO,GAAI,IAExC,OAAOjC,GCxCJ,SAASoC,EAAWC,GACvB,IAAIC,EAAM,GACV,IAAK,IAAIC,KAAQF,EACTA,EAAIG,eAAeD,IACnBD,EAAIG,KAAK,CACLC,IAAOH,EACPI,MAASN,EAAIE,KAKzB,OADAD,EAAIM,KAAK,SAAC5C,EAAG6C,GAAJ,OAAU7C,EAAE2C,MAAMG,cAAcD,EAAEF,SACpCL,ECTJ,IAMMS,EAA6B,UAG7BC,EAAkB,CAAC,EAAM,EAAM,KAC/BC,EAAe,CAAC,KAEhBC,EAAc,EACdC,EAAc,EAEdC,EAAgB,EAIhBC,GAAOC,EAAA,GAAAC,OAAAC,EAAA,EAAAD,CAAAD,EACfF,EAAgB,UADDG,OAAAC,EAAA,EAAAD,CAAAD,EAHS,EAKR,UAFDC,OAAAC,EAAA,EAAAD,CAAAD,EAFS,EAKR,eAHDA,GAMPG,EAAe,EACfC,EAAwB,GAKxBC,EAAwB,GAExBC,EAAwB,GAOxBC,EAAuB,GACvBC,EAA6B,GAC7BC,EAA6B,GAC7BC,EAAe,IACfC,EAAc,IAGdC,GAAQC,EAAA,GAAAZ,OAAAC,EAAA,EAAAD,CAAAY,EAChBV,EAAe,QADCF,OAAAC,EAAA,EAAAD,CAAAY,EAEhBT,EAAwB,KAFRH,OAAAC,EAAA,EAAAD,CAAAY,EApBgB,GAuBR,KAHRZ,OAAAC,EAAA,EAAAD,CAAAY,EAnBgB,GAuBR,KAJRZ,OAAAC,EAAA,EAAAD,CAAAY,EAlBgB,GAuBR,KALRZ,OAAAC,EAAA,EAAAD,CAAAY,EAjBgB,GAuBR,KANRZ,OAAAC,EAAA,EAAAD,CAAAY,EAOhBR,EAAwB,KAPRJ,OAAAC,EAAA,EAAAD,CAAAY,EAfW,GAuBR,YARHZ,OAAAC,EAAA,EAAAD,CAAAY,EAShBP,EAAwB,KATRL,OAAAC,EAAA,EAAAD,CAAAY,EAbgB,GAuBR,KAVRZ,OAAAC,EAAA,EAAAD,CAAAY,EAZgB,GAuBR,KAXRZ,OAAAC,EAAA,EAAAD,CAAAY,EAXgB,GAuBR,KAZRZ,OAAAC,EAAA,EAAAD,CAAAY,EAVe,GAuBR,QAbPZ,OAAAC,EAAA,EAAAD,CAAAY,EATe,GAuBR,QAdPZ,OAAAC,EAAA,EAAAD,CAAAY,EARe,GAuBR,QAfPZ,OAAAC,EAAA,EAAAD,CAAAY,EAgBhBN,EAAuB,QAhBPN,OAAAC,EAAA,EAAAD,CAAAY,EAiBhBL,EAA6B,SAjBbP,OAAAC,EAAA,EAAAD,CAAAY,EAkBhBJ,EAA6B,SAlBbR,OAAAC,EAAA,EAAAD,CAAAY,EAmBhBH,EAAe,sBAnBCT,OAAAC,EAAA,EAAAD,CAAAY,EAoBhBF,EAAc,OApBEE,GAuBRC,EAAoB,CAC7BC,EAAM,cACNC,GAAM,gBACNC,GAAM,gBACNC,GAAM,gBACNC,GAAM,gBACNC,GAAM,gBACNC,GAAM,gBACNC,GAAM,WACNC,GAAM,gBACNC,GAAM,gBACNC,GAAM,gBACNC,GAAM,gBACNC,GAAM,eACNC,GAAM,gBACNC,GAAM,gBACNC,GAAM,gBACNC,GAAM,qBACNC,GAAM,qBACNC,IAAM,qBACNC,IAAM,OAKGC,EAAoB,CAAC,GAAM,GAAM,GAAM,IACvCC,EAAuB,CAAC,GAAM,GAAM,GAAM,GAAM,GAAM,IACtDC,EAAe,CAAC,GAAM,GAAM,GAAM,IAClCC,EAAY,CAAC,GAAM,IASnBC,EAAe,GA8BfC,IAASC,EAAA,GAAAxC,OAAAC,EAAA,EAAAD,CAAAwC,EApCO,EAsCR,MAFCxC,OAAAC,EAAA,EAAAD,CAAAwC,EAnCM,EAsCR,UAHExC,OAAAC,EAAA,EAAAD,CAAAwC,EAlCM,EAsCR,UAJExC,OAAAC,EAAA,EAAAD,CAAAwC,EAjCM,EAsCR,SALExC,OAAAC,EAAA,EAAAD,CAAAwC,EAhCO,EAsCR,WANCxC,OAAAC,EAAA,EAAAD,CAAAwC,EA/BK,IAsCR,YAPGxC,OAAAC,EAAA,EAAAD,CAAAwC,EAQjBF,EAAe,YAREtC,OAAAC,EAAA,EAAAD,CAAAwC,EA5Bc,GAsCR,aAVNxC,OAAAC,EAAA,EAAAD,CAAAwC,EA3BQ,GAsCR,MAXAxC,OAAAC,EAAA,EAAAD,CAAAwC,EA1Ba,GAsCR,WAZLxC,OAAAC,EAAA,EAAAD,CAAAwC,EAzBK,GAsCR,QAbGxC,OAAAC,EAAA,EAAAD,CAAAwC,EAxBW,GAsCR,eAdHxC,OAAAC,EAAA,EAAAD,CAAAwC,EAvBS,GAsCR,YAfDxC,OAAAC,EAAA,EAAAD,CAAAwC,EAtBS,GAsCR,YAhBDxC,OAAAC,EAAA,EAAAD,CAAAwC,EArBY,GAsCR,eAjBJxC,OAAAC,EAAA,EAAAD,CAAAwC,EApBU,GAsCR,aAlBFxC,OAAAC,EAAA,EAAAD,CAAAwC,EAnBI,GAsCR,OAnBIxC,OAAAC,EAAA,EAAAD,CAAAwC,EAlBM,GAsCR,SApBExC,OAAAC,EAAA,EAAAD,CAAAwC,EAjBc,GAsCR,iBArBNxC,OAAAC,EAAA,EAAAD,CAAAwC,EAhBe,GAsCR,kBAtBPxC,OAAAC,EAAA,EAAAD,CAAAwC,EAfY,GAsCR,eAvBJxC,OAAAC,EAAA,EAAAD,CAAAwC,EAda,IAsCR,gBAxBLxC,OAAAC,EAAA,EAAAD,CAAAwC,EAZI,GAsCR,MA1BIxC,OAAAC,EAAA,EAAAD,CAAAwC,EAXY,GAsCR,UA3BJxC,OAAAC,EAAA,EAAAD,CAAAwC,EAVO,GAsCR,UA5BCxC,OAAAC,EAAA,EAAAD,CAAAwC,EATO,GAsCR,UA7BCxC,OAAAC,EAAA,EAAAD,CAAAwC,EARO,GAsCR,SA9BCxC,OAAAC,EAAA,EAAAD,CAAAwC,EAPQ,GAsCR,WA/BAxC,OAAAC,EAAA,EAAAD,CAAAwC,EANS,GAsCR,OAhCDxC,OAAAC,EAAA,EAAAD,CAAAwC,EALc,GAsCR,cAjCNxC,OAAAC,EAAA,EAAAD,CAAAwC,EAJY,GAsCR,YAlCJxC,OAAAC,EAAA,EAAAD,CAAAwC,EAFK,IAsCR,MApCGA,GAwCTC,IAAqBC,EAAA,GAAA1C,OAAAC,EAAA,EAAAD,CAAA0C,EAC7BJ,EAAe,OADctC,OAAAC,EAAA,EAAAD,CAAA0C,EApEE,GAsER,aAFM1C,OAAAC,EAAA,EAAAD,CAAA0C,EAnEJ,GAsER,cAHY1C,OAAAC,EAAA,EAAAD,CAAA0C,EAlEC,GAsER,WAJO1C,OAAAC,EAAA,EAAAD,CAAA0C,EAjEP,GAsER,QALe1C,OAAAC,EAAA,EAAAD,CAAA0C,EAhED,GAsER,eANS1C,OAAAC,EAAA,EAAAD,CAAA0C,EA/DH,GAsER,kBAPW1C,OAAAC,EAAA,EAAAD,CAAA0C,EA9DH,GAsER,gBARW1C,OAAAC,EAAA,EAAAD,CAAA0C,EA7DA,GAsER,eATQ1C,OAAAC,EAAA,EAAAD,CAAA0C,EA5DF,GAsER,aAVU1C,OAAAC,EAAA,EAAAD,CAAA0C,EA3DR,GAsER,wBAXgB1C,OAAAC,EAAA,EAAAD,CAAA0C,EA1DN,GAsER,iBAZc1C,OAAAC,EAAA,EAAAD,CAAA0C,EAzDE,GAsER,iBAbM1C,OAAAC,EAAA,EAAAD,CAAA0C,EAxDG,GAsER,kBAdK1C,OAAAC,EAAA,EAAAD,CAAA0C,EAvDA,GAsER,eAfQ1C,OAAAC,EAAA,EAAAD,CAAA0C,EAtDC,IAsER,gBAhBOA,GAmBrBC,GAA+B9D,EAAW4D,IA6B1CG,IA1BsBC,EAAA,GAAA7C,OAAAC,EAAA,EAAAD,CAAA6C,EA1ET,GA2ER,MADiB7C,OAAAC,EAAA,EAAAD,CAAA6C,EAzED,GA2ER,UAFS7C,OAAAC,EAAA,EAAAD,CAAA6C,EAxEN,GA2ER,eAHc7C,OAAAC,EAAA,EAAAD,CAAA6C,EAvEN,GA2ER,aAJc7C,OAAAC,EAAA,EAAAD,CAAA6C,EAtEN,GA2ER,cALc7C,OAAAC,EAAA,EAAAD,CAAA6C,EArEL,GA2ER,YANa7C,OAAAC,EAAA,EAAAD,CAAA6C,EApEJ,GA2ER,WAPY7C,OAAAC,EAAA,EAAAD,CAAA6C,EAnEC,GA2ER,cARO7C,OAAAC,EAAA,EAAAD,CAAA6C,EAlED,GA2ER,YAiBoBhE,GAZViE,EAAA,GAAA9C,OAAAC,EAAA,EAAAD,CAAA8C,EA9ET,IA+ER,WADiB9C,OAAAC,EAAA,EAAAD,CAAA8C,EArGT,GAuGR,aAFiB9C,OAAAC,EAAA,EAAAD,CAAA8C,EAnGL,GAsGR,kBAHa9C,OAAAC,EAAA,EAAAD,CAAA8C,EAjGF,GAqGR,eAJU9C,OAAAC,EAAA,EAAAD,CAAA8C,EAhGJ,GAqGR,aALY9C,OAAAC,EAAA,EAAAD,CAAA8C,EA/FV,GAqGR,wBANkB9C,OAAAC,EAAA,EAAAD,CAAA8C,EA9FR,GAqGR,iBAPgB9C,OAAAC,EAAA,EAAAD,CAAA8C,EA3GT,IAmHR,aARiB9C,OAAAC,EAAA,EAAAD,CAAA8C,EAS/BR,EAAe,OATgBQ,KAcvBC,IAAmBC,EAAA,GAAAhD,OAAAC,EAAA,EAAAD,CAAAgD,EA9HH,EAgIR,CAAC,GAAI,GAAI,KAFEhD,OAAAC,EAAA,EAAAD,CAAAgD,EA7HJ,EAgIR,CAAC,GAAI,GAAI,KAHGhD,OAAAC,EAAA,EAAAD,CAAAgD,EA5HJ,EAgIR,CAAC,GAAI,GAAI,KAJGhD,OAAAC,EAAA,EAAAD,CAAAgD,EA3HJ,EAgIR,CAAC,GAAI,GAAI,KALGhD,OAAAC,EAAA,EAAAD,CAAAgD,EA1HH,EAgIR,CAAC,GAAI,GAAI,KANEhD,OAAAC,EAAA,EAAAD,CAAAgD,EAzHL,IAgIR,CAAC,WAAY,WAAY,aAPZhD,OAAAC,EAAA,EAAAD,CAAAgD,EAQ3BV,EAAe,CAAC,GAAI,GAAI,KARGtC,OAAAC,EAAA,EAAAD,CAAAgD,EAtHI,GAgIR,CAAC,aAAc,UAAW,YAVtBhD,OAAAC,EAAA,EAAAD,CAAAgD,EArHF,GAgIR,CAAC,aAAc,OAAQ,OAXbhD,OAAAC,EAAA,EAAAD,CAAAgD,EApHG,GAgIR,CAAC,aAAc,QAAS,QAZnBhD,OAAAC,EAAA,EAAAD,CAAAgD,EAnHL,GAgIR,CAAC,OAAQ,WAAY,aAbRhD,OAAAC,EAAA,EAAAD,CAAAgD,EAlHC,GAgIR,CAAC,OAAQ,WAAY,aAddhD,OAAAC,EAAA,EAAAD,CAAAgD,EAjHD,GAgIR,CAAC,UAAW,WAAY,aAffhD,OAAAC,EAAA,EAAAD,CAAAgD,EAhHD,GAgIR,CAAC,WAAY,QAAS,QAhBbhD,OAAAC,EAAA,EAAAD,CAAAgD,EA/GE,GAgIR,CAAC,QAAS,WAAY,aAjBhBhD,OAAAC,EAAA,EAAAD,CAAAgD,EA9GA,GAgIR,CAAC,QAAS,WAAY,aAlBdhD,OAAAC,EAAA,EAAAD,CAAAgD,EA7GN,GAgIR,CAAC,SAAU,UAAW,aAnBRhD,OAAAC,EAAA,EAAAD,CAAAgD,EA5GJ,GAgIR,CAAC,OAAQ,UAAW,aApBRhD,OAAAC,EAAA,EAAAD,CAAAgD,EA3GI,GAgIR,CAAC,SAAU,WAAY,aArBnBhD,OAAAC,EAAA,EAAAD,CAAAgD,EA1GK,GAgIR,CAAC,UAAW,WAAY,aAtBrBhD,OAAAC,EAAA,EAAAD,CAAAgD,EAzGE,GAgIR,CAAC,SAAU,OAAQ,aAvBbhD,OAAAC,EAAA,EAAAD,CAAAgD,EAxGG,IAgIR,CAAC,SAAU,UAAW,aAxBjBhD,OAAAC,EAAA,EAAAD,CAAAgD,EAtGN,GAgIR,CAAC,GAAI,GAAI,KA1BKhD,OAAAC,EAAA,EAAAD,CAAAgD,EArGE,GAgIR,CAAC,GAAI,GAAI,KA3BHhD,OAAAC,EAAA,EAAAD,CAAAgD,EApGH,GAgIR,CAAC,GAAI,GAAI,KA5BEhD,OAAAC,EAAA,EAAAD,CAAAgD,EAnGH,GAgIR,CAAC,GAAI,GAAI,KA7BEhD,OAAAC,EAAA,EAAAD,CAAAgD,EAlGH,GAgIR,CAAC,GAAI,GAAI,KA9BEhD,OAAAC,EAAA,EAAAD,CAAAgD,EAjGF,GAgIR,CAAC,GAAI,GAAI,KA/BChD,OAAAC,EAAA,EAAAD,CAAAgD,EAhGD,GAgIR,CAAC,GAAI,GAAI,KAhCAhD,OAAAC,EAAA,EAAAD,CAAAgD,EA/FI,GAgIR,CAAC,GAAI,GAAI,KAjCLhD,OAAAC,EAAA,EAAAD,CAAAgD,EA9FE,GAgIR,CAAC,GAAI,GAAI,KAlCHhD,OAAAC,EAAA,EAAAD,CAAAgD,EA5FL,IAgIR,CAAC,aAAc,QAAS,aApCXA,GA+UnBC,GAAS,CAClBC,EAAO,MACPpC,EAAO,UACPqC,EAAO,cACPC,EAAO,SACPC,EAAO,aACPC,EAAO,YACPC,EAAO,gBACPC,EAAO,WACPC,EAAO,eACPC,EAAO,YACPC,GAAO,gBACPC,GAAO,UACPC,GAAO,cACP9C,GAAO,WACPC,GAAO,eACPC,GAAO,UACPC,GAAO,cACPC,GAAO,UACPC,GAAO,cACPC,GAAO,eACPC,GAAO,mBACPC,GAAO,aACPC,GAAO,iBACPC,GAAO,YACPC,GAAO,iBAGEoC,GAAuB,GAMvBC,IAAaC,EAAA,GAAAhE,OAAAC,EAAA,EAAAD,CAAAgE,EAJM,EAKR,OADEhE,OAAAC,EAAA,EAAAD,CAAAgE,EAHW,EAKR,wBAFHhE,OAAAC,EAAA,EAAAD,CAAAgE,EAFW,EAKR,YAHHA,GCjkBbC,GAA+B,IAG/BC,GAAc,IACdC,GAAY,IAGnBC,GAAM,EACNC,GAAM,EACNC,GAAM,EACNC,GAAM,EACNC,GAAM,EAQZ,SAASC,GAASC,GACd,OAAQA,GAAwB,kBAATA,IAAsBzG,MAAM0G,QAAQD,GASxD,SAASE,GAAU/H,GAAoB,QAAAgI,EAAAC,UAAAnH,OAAToH,EAAS,IAAA9G,MAAA4G,EAAA,EAAAA,EAAA,KAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAATD,EAASC,EAAA,GAAAF,UAAAE,GAE1C,IAAKD,EAAQpH,OAAQ,OAAOd,EAE5B,IAAMoI,EAASF,EAAQG,QAEvB,GAAIT,GAAS5H,IAAW4H,GAASQ,GAC7B,IAAK,IAAM9F,KAAO8F,EACVR,GAASQ,EAAO9F,KACXtC,EAAOsC,IAAMa,OAAOmF,OAAOtI,EAAdmD,OAAAC,EAAA,EAAAD,CAAA,GAAyBb,EAAM,KACjDyF,GAAU/H,EAAOsC,GAAM8F,EAAO9F,KAE9Ba,OAAOmF,OAAOtI,EAAdmD,OAAAC,EAAA,EAAAD,CAAA,GAAyBb,EAAM8F,EAAO9F,KAKlD,OAAOyF,GAASQ,WAAT,GAAUvI,GAAVwI,OAAqBN,IAOhC,SAASO,GAAYtH,GACjB,OAAIA,EAAK,KAAOkG,IACZlG,EAAKA,EAAKuH,WAAa,KAAOpB,GA+KtC,SAASqB,GAAkBxH,GAMvB,IAwCIyH,EAxCEC,EAAU,GAEZC,EAAM3H,EAAKoG,IACXwB,EAAM5H,EAAKqG,IACXwB,EAAM7H,EAAKsG,IACXxF,EAAMd,EAAKuG,IAEf,OAAQoB,GACJ,KAAKhG,EAEL,KAAKC,EACD,MACJ,QAEI,OADAkG,QAAQC,KAAR,uCAAAV,OAAoDnI,EAAEyI,GAAtD,MACO,KAGf,KAAMC,KAAO9F,GAET,OADAgG,QAAQC,KAAK,oCAAqC7I,EAAE0I,GAAMA,EAAK9F,GACxD,KAgBX,GAbA4F,EAAQE,GAAO,GASfF,EAAQE,GAAKC,GAAO,KAId/G,KAAO6B,GAET,OAAO,KAIX,GAAI7B,IAAQoB,EACRuF,EAAW,YACR,GAAK3G,GAAOqB,GAAyBrB,GAAOsB,GAC9CtB,GAAOuB,GAAyBvB,GAAOwB,GACvCxB,GAAOyB,GAA8BzB,GAAO0B,EAC7CiF,EAAW,cACR,IAAI3G,IAAQ2B,EAIf,OADAqF,QAAQC,KAAK,iCAAkCjH,GACxC,KAHP2G,EAAW,OAgBf,GAPiB,SAAbA,IAGAC,EAAQE,GAAKC,GAAb,KA7ER,SAAuB7H,GACnB,IAAMV,EAAMU,EAAK,GACjB,OAAOgI,OAAOC,aAAab,MAAM,KAAMpH,EAAKkI,MAAM,EAAG,EAAI5I,IA2EzB6I,CAAcnI,EAAKkI,MAAM1B,MAIxC,YAAbiB,EAAwB,CAExBC,EAAQE,GAAKC,GAAb,SAAA7F,OAAAC,EAAA,EAAAD,CAAA,GACKlB,EAAM,CACHsH,MAAO,KAKf,IAAIC,EAAIrI,EAAKwG,IAIb,GAAI6B,GAAK,GAAQA,GAAK,GAGlB,GAAIrI,EAAKL,OAAS6G,GAAI,GAAI,CACtB,IAAIhH,EA5PpB,SAAwBQ,GAepB,MAAO,CACHsI,OAAQtI,EAAK,GAAK,GAAK,EAAI,EAC3BuI,OAAQ,CACJC,QAASxI,EAAK,GACdyI,SAAUzI,EAAK,GACfA,KAAM,CAACA,EAAK,IAAKA,EAAK,IAAKA,EAAK,KAChC0I,OAAQ1I,EAAK,MAuOD2I,CAAe3I,EAAKkI,MAAM1B,GAAKA,GAAM,KAC7CkB,EAAQE,GAAKC,GAAb,SAA8B/G,GAA9B,MAA4CtB,EAAE8I,OAAS9I,EAAE+I,YAEzDT,QAAQC,KAAR,gEAAAV,OAA6ErH,EAAKL,QAAUI,EAAGC,SAGhG,GAAIqI,IAAMvC,GAAsB,CAKnC,IAAI8C,EA5OhB,SAAwB5I,GACpB,MAAO,CACH6I,aAAc7I,EAAK,IA0OA8I,CAAe9I,EAAKkI,MAAM1B,GAAKxG,EAAKL,OAAO,IAC1D+H,EAAQE,GAAKC,GAAb,SAA8B/G,GAAO8F,GAAUc,EAAQE,GAAKC,GAAb,SAA8B/G,GAAM8H,QAEhF,GAAIP,GAAK,IAAQA,GAAK,GAAM,CAK/B,IAAIU,EA7OhB,SAAuB/I,GAgBnB,IAPA,IAEIgJ,EACAC,EACAC,EAJAC,EAAM,CAACf,MAAM,IAMb1H,EAAI,EACDA,EAAEV,EAAKL,QAAQ,CAClB,IAAIyJ,EAAIpJ,EAAKU,GAKb,OAJQ,IAAJA,IACAwI,EAAO,KAAOE,EAAI,IAAQ,EAAI,IAE5BF,KAAQC,EAAIf,QAAQe,EAAIf,MAAMc,GAAQ,IACpCE,GACJ,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GAEDJ,EAAWhJ,IADXU,GAEAA,IAEIuI,EADa,IAAbD,EACQhJ,EAAKU,GAELT,MAAMC,KAAKF,EAAKkI,MAAMxH,EAAGA,EAAIsI,IAEzCtI,GAAKsI,EACLG,EAAIf,MAAMc,GAAV,cAAmCD,EACnC,MACJ,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GAEDD,EAAWhJ,IADXU,GAEAA,IAEIuI,EADa,IAAbD,EACQhJ,EAAKU,GAELT,MAAMC,KAAKF,EAAKkI,MAAMxH,EAAGA,EAAIsI,IAEzCtI,GAAKsI,EACLG,EAAIf,MAAMc,GAAV,iBAAsCD,EACtC,MACJ,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GAEDD,EAAWhJ,IADXU,GAEAA,IAEIuI,EADa,IAAbD,EACQhJ,EAAKU,GAELT,MAAMC,KAAKF,EAAKkI,MAAMxH,EAAGA,EAAIsI,IAEzCtI,GAAKsI,EACLG,EAAIf,MAAMc,GAAV,mBAAwCD,EACxC,MACJ,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GAEDD,EAAWhJ,IADXU,GAEAA,IAEIuI,EADa,IAAbD,EACQhJ,EAAKU,GAELT,MAAMC,KAAKF,EAAKkI,MAAMxH,EAAGA,EAAIsI,IAEzCtI,GAAKsI,EACLG,EAAIf,MAAMc,GAAV,QAA6BD,EAC7B,MACJ,KAAK,IACDvI,EAAIV,EAAKL,OACT,MACJ,QAEIe,KAKZ,OAAOyI,EAwIeE,CAAcrJ,EAAKkI,MAAM1B,GAAKxG,EAAKL,OAAO,IACxD+H,EAAQE,GAAKC,GAAb,SAA8B/G,GAAO8F,GAAUc,EAAQE,GAAKC,GAAb,SAA8B/G,GAAMiI,QAEhF,GAAU,MAANV,EAOP,OADAP,QAAQC,KAAR,uCAAAV,OAAoDnI,EAAEmJ,KAC/C,KAKf,GAAiB,SAAbZ,EAAqB,CAErBC,EAAQE,GAAKC,GAAb,KAA4B,GAG5B,IAAIQ,EAAIrI,EAAKwG,IAEb,KAAI6B,GAAK,GAAQA,GAAK,IAYlB,OADAP,QAAQC,KAAR,uCAAAV,OAAoDnI,EAAEmJ,KAC/C,KATP,GAAIrI,EAAKL,OAAS6G,GAAI,GAAI,CACtB,IAAIhH,EA9JpB,SAAwBQ,GAIpB,MAAO,CACHsI,OAAQtI,EAAK,GAAK,GAAK,EAAI,EAC3BuI,OAAQ,CACJC,QAASxI,EAAK,GACdyI,SAAUzI,EAAK,GACfA,KAAM,CAACA,EAAK,IAAKA,EAAK,IAAKA,EAAK,OAqJpBsJ,CAAetJ,EAAKkI,MAAM1B,GAAKA,GAAM,KAC7CkB,EAAQE,GAAKC,GAAb,KAA0BrI,EAAE8I,OAAS9I,EAAE+I,YAEvCT,QAAQC,KAAR,gEAAAV,OAA6ErH,EAAKL,QAAUI,EAAGC,IAW3G,OAAO0H,EAUX,SAAS6B,GAAevJ,GAIpB,GAAa,OAATA,EAAe,OAAO,KAO1B,IALA,IAAIwJ,EAAU,GAGV9I,EAAI,KAIJA,EAAIV,EAAKyJ,QAAQvD,GAAaxF,IACtB,IAHC,CAKTA,IAEA,IAAIgJ,EAAI1J,EAAKyJ,QAAQtD,GAAWzF,GAE5BiJ,EAAmB1J,MAAMC,KAAKF,EAAKkI,MAAMxH,EAAGA,EAAE,IAAIP,IAAI,SAAAT,GAAC,OAAIR,EAAEQ,KAAKU,KAAK,KAC3E,GAAIuJ,IAAoBC,wBAEpB,OADA9B,QAAQ+B,IAAI,6DAA8DnJ,EAAGgJ,EAAGC,EAAiB,IAAK5J,EAAGC,IAClG,KAGX,GAAkB,MAAdA,EAAKU,EAAE,GAEP,OADAoH,QAAQC,KAAR,uDAAAV,OAAoErH,EAAKU,EAAE,EAAG,KACvE,KAGX,IAAI6H,EAASf,GAAkBxH,EAAKkI,MAAMxH,EAAGgJ,IAEzCnB,GACA3B,GAAU4C,EAASjB,GAO3B,OAAOiB,EAyDJ,SAASM,GAASb,GACrB,OAAc,OAAVA,QAA4B7J,IAAV6J,GAAwC,IAAjBA,EAAMtJ,OAAqB,IAEjE,IADGc,WAAWP,KAAK+I,GAAOc,OAAO,SAACC,EAAeC,GAAhB,OAAiCD,EAAgBC,IACrE,IAMjB,SAASC,KACZ,IAAIC,EAAM,CACNvI,EACAC,EACAa,GAEA0H,EAAKN,GAASK,GAElB,OADAA,EAAIjJ,KAAKkJ,GACF1I,EAAa2F,OAAO8C,GAMxB,SAASE,GAAcC,GAC1B,IAAIH,EAAM,CACNvI,EACAC,EACAyI,EACA5H,GAEA0H,EAAKN,GAASK,GAElB,OADAA,EAAIjJ,KAAKkJ,GACF1I,EAAa2F,OAAO8C,GAMxB,SAASI,GAAiBD,EAAaE,GAI1C,IAAIL,EAAM,CACNvI,EACAC,EACAyI,EACAE,GAEAJ,EAAKN,GAASK,GAElB,OADAA,EAAIjJ,KAAKkJ,GACF1I,EAAa2F,OAAO8C,GAiF/B,SAASM,GAA8BH,EAAaE,EAAWxK,GAE3D8H,QAAQ+B,IAAR,iCAAAxC,OAA6CiD,EAA7C,MAAAjD,OAA6DmD,EAA7D,MAAAnD,OAA2EqD,KAAKC,UAAU3K,GAA1F,MAEA,IAAI4K,EA3ER,SAA+BN,EAAaE,EAAWpC,GAEnDN,QAAQ+B,IAAR,yBAAAxC,OAAqCiD,EAArC,MAAAjD,OAAqDmD,EAArD,WAIA,IAFA,IAAII,EAAO,GAJ+CC,EAM5C7I,OAAO8I,KAAK1C,GAA1B2C,EAAA,EAAAA,EAAAF,EAAAlL,OAAAoL,IAAkC,CAA7B,IAAIrK,EAACmK,EAAAE,GAEF7B,EAAOd,EAAM1H,GAEjB,GAAKwI,EAAK8B,QAAV,CAGA,IAAIb,EAAM,CACNxI,EACAE,EACAyI,EACAE,GAGJL,EAAIjJ,KAAW,GAALR,EAAE,GAAO,EAAG,EAAGwI,EAAKV,QAAS,GACvC2B,EAAIjJ,KAAW,GAALR,EAAE,GAAO,EAAG,EAAGwI,EAAKT,SAAU,GACxC0B,EAAIjJ,KAAW,GAALR,EAAE,GAAO,EAAG,EAAGwI,EAAKlJ,KAAK,GAAI,GACvCmK,EAAIjJ,KAAW,GAALR,EAAE,GAAO,EAAG,EAAGwI,EAAKlJ,KAAK,GAAI,GACvCmK,EAAIjJ,KAAW,GAALR,EAAE,GAAO,EAAG,EAAGwI,EAAKlJ,KAAK,GAAI,GACvCmK,EAAIjJ,KAAW,GAALR,EAAE,GAAO,EAAG,EAAGwI,EAAKR,QAG9ByB,EAAIjJ,KAAW,GAALR,EAAE,GAAO,GAAM,EAAGwI,EAAK+B,cAAe,GAChDd,EAAIjJ,KAAW,GAALR,EAAE,GAAO,GAAM,EAAGwI,EAAKgC,iBAAkB,GACnDf,EAAIjJ,KAAW,GAALR,EAAE,GAAO,GAAM,EAAGwI,EAAKiC,mBAAoB,GACrDhB,EAAIjJ,KAAW,GAALR,EAAE,GAAO,GAAM,EAAGwI,EAAKkC,QAAS,GAG1CjB,EAAIjJ,KAAK4I,GAASK,IAGlBS,EAAK1J,KAAKQ,EAAa2F,OAAO8C,KAMlC,OAFAS,EAAKzK,IAAI,SAAAkL,GAAC,OAAIvD,QAAQ+B,IAAI,wBAAyB9J,EAAGsL,MAE/CT,EAgCIU,CAAsBhB,EAAaE,EAAWxK,EAAK6B,GAAeyI,GAApB,SAA6CE,GAA7C,OAIzD,OAHIxK,EAAK6B,GAAeyI,GAApB,SAA6CE,GAA7C,SACAI,EAAK1J,KA/Bb,SAA+BoJ,EAAaE,EAAWe,GAKnD,IAAIpB,EAAM,CACNxI,EACAE,EACAyI,EACAE,EACA1E,GACA,EACAyF,GASJ,OALApB,EAAIjJ,KAAK4I,GAASK,IAKXzI,EAAa2F,OAAO8C,GAUbqB,CAAsBlB,EAAaE,EAAWxK,EAAK6B,GAAeyI,GAApB,SAA6CE,GAA7C,eAErDI,EA6CX,SAASa,GAAqBnB,EAAatK,GAEvC,IAAKA,EAAK6B,GAAeyI,GAAaU,QAAS,OAAO,KAGtD,IAAIb,EAAM,CACNxI,EACAE,EACAyI,EACApI,EACA,GAGE1C,EAAIQ,EAAK6B,GAAeyI,GAApB,KAGVH,EAAIjJ,KAAK1B,EAAEG,QAEX,IAAK,IAAIe,EAAE,EAAGA,EAAIlB,EAAEG,OAAQe,IACxByJ,EAAIjJ,KAAK1B,EAAEkM,WAAWhL,IAO1B,OAHAyJ,EAAIjJ,KAAK4I,GAASK,IAGXzI,EAAa2F,OAAO8C,GAI/B,SAASwB,GAAkCrB,EAAatK,GACpD,OAvEJ,SAAgCsK,EAAasB,GAMzC,IAFA,IAAIhB,EAAO,GAJwCiB,EAMrC7J,OAAO8I,KAAKc,GAA1BE,EAAA,EAAAA,EAAAD,EAAAlM,OAAAmM,IAAqC,CAAhC,IAAIpL,EAACmL,EAAAC,GAEFC,EAAUH,EAASlL,GAEvB,GAAKqL,EAAQf,QAAb,CAGA,IAAIb,EAAM,CACNxI,EACAE,EACAyI,EACA7H,GAGJ0H,EAAIjJ,KAAW,GAALR,EAAE,GAAO,EAAG,EAAGqL,EAAQvD,QAAS,GAC1C2B,EAAIjJ,KAAW,GAALR,EAAE,GAAO,EAAG,EAAGqL,EAAQtD,SAAU,GAC3C0B,EAAIjJ,KAAW,GAALR,EAAE,GAAO,EAAG,EAAGqL,EAAQ/L,KAAK,GAAI,GAC1CmK,EAAIjJ,KAAW,GAALR,EAAE,GAAO,EAAG,EAAGqL,EAAQ/L,KAAK,GAAI,GAC1CmK,EAAIjJ,KAAW,GAALR,EAAE,GAAO,EAAG,EAAGqL,EAAQ/L,KAAK,GAAI,GAC1CmK,EAAIjJ,KAAW,GAALR,EAAE,GAAO,EAAG,EAAGqL,EAAQrD,QAGjCyB,EAAIjJ,KAAK4I,GAASK,IAGlBS,EAAK1J,KAAKQ,EAAa2F,OAAO8C,KAKlC,OAAOS,EAmCAoB,CAAuB1B,EAAatK,EAAK6B,GAAeyI,GAApB,8BC9sB/C,SAAS2B,GAASC,GACd,IAAIC,EAAIC,KAAQC,OAAOC,KAAK,SAAA5F,GAAI,OAAIA,EAAKwF,KAAOA,IAChD,OAAIC,GAGOC,KAAQG,QAAQD,KAAK,SAAA5F,GAAI,OAAIA,EAAKwF,KAAOA,IAIxD,SAASM,GAAUN,GACf,OAAOE,KAAQC,OAAOC,KAAK,SAAA5F,GAAI,OAAIA,EAAKwF,KAAOA,IAGnD,SAASO,GAAWP,GAChB,OAAOE,KAAQG,QAAQD,KAAK,SAAA5F,GAAI,OAAIA,EAAKwF,KAAOA,IAOpD,SAASQ,GAAUR,GACf,IAAIxL,EAAI8L,GAAUN,GAClB,OAAOxL,EAAIA,EAAEiM,KAAO,KAGxB,SAASC,GAAWV,GAChB,IAAIxL,EAAI+L,GAAWP,GACnB,OAAOxL,EAAIA,EAAEiM,KAAO,wCCzBXE,GAAkB,SAAAvE,GAC3B,GAAc,IAAVA,EAAa,MAAO,MAExB,IAAIhH,EAAIwL,KAAKC,OAAOzE,EAAQ,GAAK,GAC7B5H,GAAK4H,EAAQ,GAAK,EAAI,EAC1B,OAAON,OAAOC,aAAa3G,EAAI,IAAMZ,EAAEb,YCUrCmN,GAAY,SAAAC,GAAkB,IAAfrB,EAAeqB,EAAfrB,SACjB,OAAiB,OAAbA,QAAkCxM,IAAbwM,EAA+B,KAEpDpN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIwO,QAAS,EAAGvO,UAAU,QAA1B,kBAEHqD,OAAO8I,KAAKc,GAAUzL,IAAI,SAAAO,GACvB,IAAIyM,EAAI5I,GAAUqH,EAASlL,GAAT,UAIlB,OJgFO,KInFHkL,EAASlL,GAAT,WACAyM,EAAIA,EAAI,IAAMC,KAAcxB,EAASlL,GAAT,KAAoB,IAAI,GAAQ,SAAWkL,EAASlL,GAAT,KAAoB,IAG3FlC,EAAAC,EAAAC,cAAA,MAAIyC,IAAKT,GACLlC,EAAAC,EAAAC,cAAA,sBAAcgC,GACdlC,EAAAC,EAAAC,cAAA,iBAASQ,EAAE0M,EAASlL,GAAT,UACXlC,EAAAC,EAAAC,cAAA,iBAASQ,EAAE0M,EAASlL,GAAT,WACXlC,EAAAC,EAAAC,cAAA,UAAKyO,GACL3O,EAAAC,EAAAC,cAAA,UAAKqB,EAAG6L,EAASlL,GAAT,OAERlC,EAAAC,EAAAC,cAAA,UAAKkN,EAASlL,GAAT,OAAwB,SAAW,cAU9D2M,GAAe,SAAAC,GAAkB,IAAf1B,EAAe0B,EAAf1B,SACpB,OAAiB,OAAbA,EAA0B,KAE1BpN,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC6O,GAAD,CAAW3B,SAAUA,MAK3B4B,GAAe,SAAAC,GAAqB,IAAlB3M,EAAkB2M,EAAlB3M,IAAKyH,EAAakF,EAAblF,OACzB,OAAe,OAAXA,QAA8BnJ,IAAXmJ,EAA6B,KAEhD/J,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIwO,QAAS,GAAIvO,UAAU,QAAQkE,EAAkB/B,KAEzDtC,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,uBAEHsD,OAAO8I,KAAKvC,EAAM,OAAWpI,IAAI,SAAAO,GAC9B,IAAIyM,EAAI5I,GAAUgE,EAAM,MAAU7H,GAAhB,UJ+Bf,KI9BC6H,EAAM,MAAU7H,GAAhB,WACAyM,EAAIA,EAAI,IAAMC,KAAc7E,EAAM,MAAU7H,GAAhB,KAA2B,IAAI,GAAQ,SAAW6H,EAAM,MAAU7H,GAAhB,KAA2B,IAE7G,IAAMgN,EAAKnF,EAAM,MAAU7H,GAAhB,mBACLiN,EAAKpF,EAAM,MAAU7H,GAAhB,iBACX,OACIlC,EAAAC,EAAAC,cAAA,MAAIyC,IAAG,GAAAkG,OAAKvG,EAAL,KAAAuG,OAAY3G,IACflC,EAAAC,EAAAC,cAAA,UAAKgC,GACLlC,EAAAC,EAAAC,cAAA,UAAKQ,EAAEqJ,EAAM,MAAU7H,GAAhB,UACPlC,EAAAC,EAAAC,cAAA,UAAKQ,EAAEqJ,EAAM,MAAU7H,GAAhB,WACPlC,EAAAC,EAAAC,cAAA,UAAKqB,EAAGwI,EAAM,MAAU7H,GAAhB,OACRlC,EAAAC,EAAAC,cAAA,UAAKyO,GACL3O,EAAAC,EAAAC,cAAA,UAAK6J,EAAM,MAAU7H,GAAhB,OAA+B,SAAW,OAC/ClC,EAAAC,EAAAC,cAAA,UAAKQ,EAAEqJ,EAAM,MAAU7H,GAAhB,UACPlC,EAAAC,EAAAC,cAAA,UAAKiP,KAAM1I,GAASA,GAAO0I,GAAMzO,EAAEyO,IACnCnP,EAAAC,EAAAC,cAAA,UAAKgP,KAAMzI,GAASA,GAAOyI,GAAMxO,EAAEwO,IACnClP,EAAAC,EAAAC,cAAA,UAAKQ,EAAEqJ,EAAM,MAAU7H,GAAhB,uBAUjCkN,GAAW,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,SAChB,OAAiB,OAAbA,QAAkC1O,IAAb0O,EAA+B,KAEpDtP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACVqD,OAAO8I,KAAKgD,GAAU3N,IAAI,SAAAW,GAAG,OAAItC,EAAAC,EAAAC,cAACqP,GAAD,CAAc5M,IAAKL,EAAKA,IAAKA,EAAKyH,OAAQuF,EAAShN,SAK3FkN,GAAS,SAAAC,GAAqB,IAAlB3F,EAAkB2F,EAAlB3F,MAAOtI,EAAWiO,EAAXjO,KACrB,OAAa,OAATA,QAA0BZ,IAATY,EAA2B,KAE5CxB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,oBAAYmO,GAAgBlM,SAAS2H,EAAO,KAA5C,MAAqDA,EAArD,MAA+DtI,EAAI,MAEnExB,EAAAC,EAAAC,cAACwP,GAAD,CAAUJ,SAAU9N,EAAI,WACxBxB,EAAAC,EAAAC,cAACyP,GAAD,CAAcvC,SAAU5L,EAAI,SAKlCoO,GAAU,SAAAC,GAAiB,IAAd7E,EAAc6E,EAAd7E,QACf,OAAgB,OAAZA,QAAgCpK,IAAZoK,EAA8B,KAElDhL,EAAAC,EAAAC,cAAA,WACKsD,OAAO8I,KAAKtB,GAASrJ,IAAI,SAAA0H,GAAG,OAAIrJ,EAAAC,EAAAC,cAAC4P,GAAD,CAAQnN,IAAK0G,EAAKS,MAAOT,EAAK7H,KAAMwJ,EAAQ3B,SAqB1E0G,GAhBG,SAAAC,GAAc,IAAXxO,EAAWwO,EAAXxO,KACjB,OACIxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEPqB,GAAQxB,EAAAC,EAAAC,cAAC+P,GAAD,CAASjF,QAASxJ,EAAK6B,OC9G1B6M,8MAIjBC,MAAQ,CACJtC,OAAQ,GACRE,QAAS,GACTqC,MAAO,KACPC,OAAQ,KACRC,cAAc,KAKlBC,aAAe,SAAAC,GACPC,EAAKC,MAAMC,kBACPH,IACIA,EAAKI,YAAY,cAAe,MAAOH,EAAKC,MAAMC,kBAClDrH,QAAQC,KAAR,iFAEAD,QAAQ+B,IAAR,sEACAmF,EAAKK,YAAY,cAAe,MAAOJ,EAAKC,MAAMC,kBAC9CF,EAAKC,MAAMI,mBACXL,EAAKC,MAAMI,kBAAkBN,EAAK9C,IAEtCpE,QAAQ+B,IAAI,iBAAkBmF,EAAKrC,WAUnD4C,gBAAkB,SAAAP,GACVA,IACIA,EAAKQ,gBAAgBR,EAAKQ,iBAC9B1H,QAAQ+B,IAAR,0BAAAxC,OAAsC2H,EAAK9C,GAA3C,kBACI+C,EAAKC,MAAMO,sBACXR,EAAKC,MAAMO,qBAAqBT,EAAK9C,QASjDwD,cAAgB,SAAAV,GACRA,IACAC,EAAKU,SAAS,CAACd,OAAQG,EAAK9C,KAC5BpE,QAAQ+B,IAAR,yBAAAxC,OAAqC2H,EAAK9C,GAA1C,eACI+C,EAAKC,MAAMU,oBACXX,EAAKC,MAAMU,mBAAmBZ,EAAK9C,QAQ/C2D,iBAAmB,WACf,GAAIZ,EAAKN,MAAME,OAAQ,CACnB,IAAIiB,EAAUb,EAAKN,MAAME,OACzBI,EAAKU,SACDI,aAAQ,SAAAC,GACJA,EAAMC,sBAAuB,EAC7BD,EAAMnB,OAAS,QAGvB/G,QAAQ+B,IAAR,4BAAAxC,OAAwCyI,EAAxC,kBACIb,EAAKC,MAAMgB,uBACXjB,EAAKC,MAAMgB,sBAAsBJ,OAK7CK,iBAAmB,WAEf,GAAIlB,EAAKC,MAAMkB,YAIX,GAFAtI,QAAQ+B,IAAR,sCAAAxC,OAAkD4H,EAAKC,MAAMkB,aAAenB,EAAKN,MAAMtC,QAE9D,OAArB4C,EAAKN,MAAMC,MAAgB,KAAAyB,GAAA,EAAAC,GAAA,EAAAC,OAAAnR,EAAA,IAE3B,QAAAoR,EAAAC,EAAiBxB,EAAKN,MAAMtC,OAA5BqE,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAoC,KAA3BrB,EAA2BwB,EAAApP,MAIhC,GAFA0G,QAAQ+B,IAAR,+BAAAxC,OAA2C2H,EAAKrC,KAAhD,KAAAtF,OAAwD2H,EAAK9C,KAE3C,UAAd8C,EAAK8B,MAAiF,MAA5D9B,EAAKrC,KAAKoE,MAAM,IAAIC,OAAO/B,EAAKC,MAAMkB,YAAa,MAAgB,CAE7FtI,QAAQ+B,IAAR,kCAAAxC,OAA8C2H,EAAKrC,OAEnDsC,EAAKU,SAAS,CAACf,MAAOI,EAAK9C,KAE3B+C,EAAKF,aAAaC,GAQlB,QApBmB,MAAAiC,GAAAX,GAAA,EAAAC,EAAAU,EAAA,YAAAZ,GAAA,MAAAI,EAAAS,QAAAT,EAAAS,SAAA,WAAAZ,EAAA,MAAAC,SAyB3BzI,QAAQ+B,IAAR,oEAKZsH,kBAAoB,WAEhB,GAAIlC,EAAKC,MAAMkB,YAIX,GAFAtI,QAAQ+B,IAAR,uCAAAxC,OAAmD4H,EAAKC,MAAMkB,cAEpC,OAAtBnB,EAAKN,MAAME,OAAiB,KAAAuC,GAAA,EAAAC,GAAA,EAAAC,OAAAlS,EAAA,IAE5B,QAAAmS,EAAAC,EAAiBvC,EAAKN,MAAMpC,QAA5BmE,OAAAC,cAAAS,GAAAG,EAAAC,EAAAZ,QAAAC,MAAAO,GAAA,EAAqC,KAA5BpC,EAA4BuC,EAAAnQ,MAIjC,GAFA0G,QAAQ+B,IAAR,gCAAAxC,OAA4C2H,EAAKrC,KAAjD,KAAAtF,OAAyD2H,EAAK9C,KAE5C,WAAd8C,EAAK8B,MAAkF,MAA5D9B,EAAKrC,KAAKoE,MAAM,IAAIC,OAAO/B,EAAKC,MAAMkB,YAAa,MAAgB,CAE9FtI,QAAQ+B,IAAR,qDAAAxC,OAAiE2H,EAAKrC,OAGtEsC,EAAKS,cAAcV,GAEnB,QAboB,MAAAiC,GAAAI,GAAA,EAAAC,EAAAL,EAAA,YAAAG,GAAA,MAAAI,EAAAN,QAAAM,EAAAN,SAAA,WAAAG,EAAA,MAAAC,SAkB5BxJ,QAAQ+B,IAAR,qEAKZ4H,eAAiB,WACb,IAAMC,EAAI,IAAIV,OAAO/B,EAAKC,MAAMyC,KAAM,KAChCC,EAAK,IAAIZ,OAAOxP,EAA4B,KAOlDyN,EAAKU,SAAS,CACNtD,OAAQD,UAAeyF,OAAO,SAAA7C,GAAI,OAA0B,MAAtBA,EAAKrC,KAAKoE,MAAMW,KACtD5C,aAAc1C,UAAe0F,UAAU,SAAA9C,GAAI,OAA2B,MAAvBA,EAAKrC,KAAKoE,MAAMa,MAAgB,GAEnF,kBAAM3C,EAAKkB,wBAInB4B,gBAAkB,WACd,IAAML,EAAI,IAAIV,OAAO/B,EAAKC,MAAMyC,KAAM,KAEtC1C,EAAKU,SAAS,CACNpD,QAASH,WAAgByF,OAAO,SAAA7C,GAAI,OAA0B,MAAtBA,EAAKrC,KAAKoE,MAAMW,MAE5D,kBAAMzC,EAAKkC,yBAInBa,iBAAmB,WACflK,QAAQ+B,IAAI,yBACZoF,EAAKM,gBAAgBtD,GAASgD,EAAKN,MAAMC,QACzCK,EAAKU,SAAS,CACVtD,OAAQ,GACRuC,MAAO,KACPE,cAAc,OAItBmD,kBAAoB,WAChBnK,QAAQ+B,IAAI,0BACZoF,EAAKY,mBACLZ,EAAKU,SAAS,CAAEpD,QAAS,GAAIsC,OAAQ,UAGzCqD,uBAAyB,SAAA7J,GAErBP,QAAQqK,MAAR,iCAAA9K,OAA+CgB,EAAE2G,KAAK8B,KAAtD,KAAAzJ,OAA8DgB,EAAEyI,KAAhE,MAAAzJ,OAAyEgB,EAAE2G,KAAKrC,MAAQtE,GAGzE,iBAAXA,EAAEyI,OAEF7B,EAAKM,gBAAgBlH,EAAE2G,KAAK9C,IAC5B+C,EAAKY,oBAGLxH,EAAE2G,KAAKrC,KAAKoE,MAAM,IAAIC,OAAO/B,EAAKC,MAAMyC,KAAM,OAE1B,UAAhBtJ,EAAE2G,KAAK8B,OAEPhJ,QAAQ+B,IAAI,oDACZoF,EAAKwC,kBAGW,WAAhBpJ,EAAE2G,KAAK8B,OACPhJ,QAAQ+B,IAAI,qDACZoF,EAAK8C,oBAKTjK,QAAQ+B,IAAR,8CAAAxC,OAA0DgB,EAAE2G,KAAKrC,OAMrE7E,QAAQsK,cAQZC,WAAa,SAACvC,GAEV,GAAe,UADP7D,GAAS6D,GACXgB,KAAkB,CACpBhJ,QAAQ+B,IAAI,eAAgBiG,GAC5B,IAAIwC,EAAOrD,EAAKN,MAAMC,MAClBK,EAAKN,MAAMC,OACXK,EAAKM,gBAAgBtD,GAASgD,EAAKN,MAAMC,QAGzCkB,IAAYwC,GACZrD,EAAKF,aAAavC,GAAUsD,IAGhCb,EAAKU,SAAS,CAAEf,MAAOkB,IAAYwC,EAAO,KAAOxC,QAC9C,CACHhI,QAAQ+B,IAAI,gBAAiBiG,GAC7B,IAAIwC,EAAOrD,EAAKN,MAAME,OAGlBI,EAAKN,MAAME,QACXI,EAAKY,mBAELC,IAAYwC,GACZrD,EAAKS,cAAczD,GAAS6D,QAMxCyC,OAAS,SAAAtB,GACDA,EACAnJ,QAAQC,KAAK,6CAA8CkJ,IAE3DnJ,QAAQ+B,IAAI,gCACZuC,eAAoB,YAAa6C,EAAKiD,wBACtC9F,eAAoB,eAAgB6C,EAAKiD,4BAoCjDM,aAAe,WACX,IAAIC,EAAI,GADSC,GAAA,EAAAC,GAAA,EAAAC,OAAAxT,EAAA,IAEjB,QAAAyT,EAAAC,EAAc1G,UAAdsE,OAAAC,cAAA+B,GAAAG,EAAAC,EAAAlC,QAAAC,MAAA6B,GAAA,EAA8B,KAArBvG,EAAqB0G,EAAAzR,MAC1BqR,EAAEtG,EAAEQ,MAAQ,CACRiC,MAAO,CACH1C,GAAIC,EAAED,GACN6G,SAAU5G,EAAED,KAAO+C,EAAKN,MAAMC,OAElCC,OAAQ,OARC,MAAAoC,GAAA0B,GAAA,EAAAC,EAAA3B,EAAA,YAAAyB,GAAA,MAAAI,EAAA5B,QAAA4B,EAAA5B,SAAA,WAAAyB,EAAA,MAAAC,GAAA,IAAAI,GAAA,EAAAC,GAAA,EAAAC,OAAA9T,EAAA,IAWjB,QAAA+T,EAAAC,EAAchH,WAAdsE,OAAAC,cAAAqC,GAAAG,EAAAC,EAAAxC,QAAAC,MAAAmC,GAAA,EAA+B,KAAtB7G,EAAsBgH,EAAA/R,MACrB+K,EAAEQ,QAAQ8F,IACZA,EAAEtG,EAAEQ,MAAQ,CACRiC,MAAO,KACPC,OAAQ,OAGhB4D,EAAEtG,EAAEQ,MAAMkC,OAAS,CACf3C,GAAIC,EAAED,GACN6G,SAAU5G,EAAED,KAAO+C,EAAKN,MAAME,SApBrB,MAAAoC,GAAAgC,GAAA,EAAAC,EAAAjC,EAAA,YAAA+B,GAAA,MAAAI,EAAAlC,QAAAkC,EAAAlC,SAAA,WAAA+B,EAAA,MAAAC,GAuBjB,OAAOT,sFAzCP3K,QAAQ+B,IAAR,8CAAAxC,OAA0D+E,aACtDA,YACAtE,QAAQ+B,IAAR,8DACAwJ,KAAK5B,iBACL4B,KAAKtB,oBAELjK,QAAQ+B,IAAI,qDACZuC,UAAeiH,KAAKd,QAAQ,mDAKhCzK,QAAQ+B,IAAI,kDACZwJ,KAAKrB,mBACLqB,KAAKpB,qDA+BA,IAEAnD,EAAgBuE,KAAK1E,MAArBG,aAaD,OACItQ,EAAAC,EAAAC,cAAC4U,EAAA,SAAD,KAEQD,KAAKnE,MAAMqE,cAAcF,KAAKb,eAAgBa,KAAKhB,aAErDvD,GACFtQ,EAAAC,EAAAC,cAAC4U,EAAA,SAAD,KACKD,KAAKnE,MAAMsE,kBA1VFvU,aAoWlCyP,GAAK+E,aA9WgB,CACjBC,UAAW,GACX/B,KAAM,8BCoBKgC,GA3CG,SAAA1G,GAAoC,IAAjC2G,EAAiC3G,EAAjC2G,aAAcC,EAAmB5G,EAAnB4G,aAI/B,OACIrV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAIVqD,OAAO8I,KAAK8I,GAAczT,IAAI,SAACwM,EAAMrE,GAAP,OAC3B9J,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOwC,IAAKmH,GACvB9J,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAagO,GAC3BiH,EAAajH,GAAMiC,OACpBpQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAC4U,EAAA,SAAD,cACY9U,EAAAC,EAAAC,cAACoV,GAAArV,EAAD,CACJsV,SAAU,kBAAMF,EAAaD,EAAajH,GAAMiC,MAAM1C,KACtD8H,QAASJ,EAAajH,GAAMiC,MAAMmE,SAClCpU,UAAU,eACVuN,GAAE,UAAA7E,OAAYuM,EAAajH,GAAMiC,MAAM1C,IACvC+H,OAAQ,GAAIC,MAAO,OAI9BN,EAAajH,GAAMkC,QACpBrQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAC4U,EAAA,SAAD,eACa9U,EAAAC,EAAAC,cAACoV,GAAArV,EAAD,CACLsV,SAAU,kBAAMF,EAAaD,EAAajH,GAAMkC,OAAO3C,KACvD8H,QAASJ,EAAajH,GAAMkC,OAAOkE,SACnCpU,UAAU,eACVuN,GAAE,UAAA7E,OAAYuM,EAAajH,GAAMkC,OAAO3C,IACxC+H,OAAQ,GAAIC,MAAO,gBCmNpCC,8MA7MXxF,MAAQ,CACJE,OAAQ,KACR7O,KAAM,KACNoU,SAAU,CAAC,CACPzH,KAAM,sBACNjF,QAAS2C,GAAc,IACxB,CACCsC,KAAM,iBACNjF,QAAS2C,GAAc,IACxB,CACCsC,KAAM,mCACNjF,QAAS6C,GAAiB,EAAG,KAC9B,CACCoC,KAAM,qCACNjF,QAASwC,OAEbmK,cAAe,MAMnBC,SAAW,WACPC,WAAW,kBAAMtF,EAAKC,MAAMsF,QAAO,IAAQ,KAC3CvF,EAAKC,MAAMsF,QAAO,MAGtBC,oBAAsB,SAACC,GACnB,IAAIlV,GAAKkV,EAAM7V,OAAOuC,MAAMtB,cAAciR,MAAM,gBAAkB,IAAI3Q,KAAK,IAC3E6O,EAAKU,SAAS,CACV0E,cAAe7U,OAIvBmV,kBAAoB,WAChB,GAAI1F,EAAKN,MAAM0F,cAAe,CAC1B,IAAIrU,EAAOC,MAAMC,KAAKG,EAAc4O,EAAKN,MAAM0F,cAAe,OAC1DrU,GAAQA,EAAKL,OAAS,IACtBK,EAAKkB,KAAK4I,GAAS9J,IACnBiP,EAAK2F,UAAUlT,EAAa2F,OAAOrH,SAuB/C6U,qBAlFJ,SAAuBC,EAAUC,GAE7B,IACIC,EADAZ,EAAW,GAGf,OAAO,WACHa,aAAaD,GACb,IAAIN,EAAQ5N,UAAU,GACtBsN,EAASlT,KAAKwT,EAAM1U,MACpBgV,EAAUT,WAAW,WAEjBS,EAAU,KACVF,EAASV,GACTA,EAAW,IACZW,IAoEgBG,CACnB,SAAAd,GACInF,EAAKU,SACDI,aACI,SAAAC,GAAS,IAAAK,GAAA,EAAAC,GAAA,EAAAC,OAAAnR,EAAA,IACL,QAAAoR,EAAAC,EAAc2D,EAAd1D,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAwB,KAAfhF,EAAemF,EAAApP,MAChBkG,GAAY+D,GACZ2E,EAAMhQ,KAAO4G,GAAUoJ,EAAMhQ,MAAQ,GAAIuJ,GAAe8B,IAExDvD,QAAQ+B,IAAI,wCALf,MAAAoH,GAAAX,GAAA,EAAAC,EAAAU,EAAA,YAAAZ,GAAA,MAAAI,EAAAS,QAAAT,EAAAS,SAAA,WAAAZ,EAAA,MAAAC,OAajBtB,EAAKC,MAAMsF,QAAO,IAEtB,OAIJW,UAAY,SAACrF,GACTb,EAAKU,SAAS,CAACd,OAAQiB,OAG3B8E,UAAY,SAAAzK,GAER,GADArC,QAAQ+B,IAAI,YAAaM,GACpB8E,EAAKN,MAAME,OAAhB,CACA,IAAIuG,EAAM3I,GAAWwC,EAAKN,MAAME,QAC3BuG,GAILnG,EAAKqF,WACLrF,EAAKU,SACD,CAAC3P,KAAM,MACP,kBAAMoV,EAAIR,UAAUnT,EAAiB0I,MANrCrC,QAAQC,KAAR,gBAAAV,OAA6B4H,EAAKN,MAAME,OAAxC,mBAURwG,YAAc,SAAClL,GACX8E,EAAK2F,UAAUzK,4EAqBf,IAfK,IAAAmL,EAAAjC,KAAAkC,EAEqClC,KAAK1E,MAAvC3O,EAFHuV,EAEGvV,KAAMoU,EAFTmB,EAESnB,SAAUC,EAFnBkB,EAEmBlB,cAElBjK,EAAKN,GAASzJ,EAAcgU,EAAe,OAU7CmB,EAAU,GACL9U,EAAE,EAAGA,EAAI2T,EAAc1U,OAAQe,IAC/BA,EAAI,GAAOA,EAAI,IAAM,IAAI8U,GAAW,KACzCA,GAAWnB,EAAc3T,GAG7B,OACIlC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAEXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACdyV,EAASjU,IAAI,SAACgK,EAAKzJ,GAAN,OACVlC,EAAAC,EAAAC,cAAA,OAAKyC,IAAKT,EAAG/B,UAAU,gBACnBH,EAAAC,EAAAC,cAAA,UAAQ+W,QAAS,kBAAMH,EAAKD,YAAYlL,EAAIzC,WAA5C,QACAlJ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAeoB,EAAG0B,EAAgB4F,OAAO8C,EAAIzC,QAAQQ,MAAM,EAAG,KAA9E,KACA1J,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAASoB,EAAGoK,EAAIzC,QAAQQ,MAAM,GAAI,IAAlD,KACA1J,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAhB,IAA+BoB,EAAGoK,EAAIzC,QAAQQ,OAAO,KACrD1J,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAhB,IAAiCwL,EAAIwC,WAMjDnO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,UAAQ+W,QAASpC,KAAKsB,kBAAmBe,SAAWrB,EAAc1U,OAAS,IAAO,GAAlF,QACAnB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAcoB,EAAG0B,GAAjC,IAAoD1B,EAAG2B,GAAvD,KACAlD,EAAAC,EAAAC,cAAA,SAAOoS,KAAK,OAAOnS,UAAU,OAAOgX,KAAK,KAAKvU,MAAOiT,EAC9CuB,YAAa,kBAAmB7B,SAAUV,KAAKoB,sBACtDjW,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAhB,IAA+BO,EAAEkL,KAErC5L,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACVoB,EAAG0B,GADR,IAC2B1B,EAAG2B,GAD9B,IAC8C8T,EAD9C,IACwDtW,EAAEkL,MAKlE5L,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAACmX,GAAD,CAAW7V,KAAMA,QAmBjCxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAACoX,GAAD,CAAMnE,KPrOG,KOqOkBvB,YPhOX,UOiOVmD,cAAe,SAACK,EAAcC,GAAf,OAAgCrV,EAAAC,EAAAC,cAACqX,GAAD,CAAWnC,aAAcA,EAAcC,aAAcA,KACpG1E,iBAAkBkE,KAAKwB,qBACvBjF,mBAAoByD,KAAK8B,UACzBxW,UAAU,IACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,yDArMCM,yCCjCnB+W,gBAAW,SAAA/I,GAAA,IAAGf,EAAHe,EAAGf,GAAI5D,EAAP2E,EAAO3E,MAAOqE,EAAdM,EAAcN,KAAMoG,EAApB9F,EAAoB8F,SAAU0C,EAA9BxI,EAA8BwI,QAA9B,OACbjX,EAAAC,EAAAC,cAAA,OAAKC,UAAWoU,EAAW,oBAAsB,WAAY0C,QAAS,kBAAMA,EAAQnN,KAChF9J,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAauN,GADjC,IAC4C1N,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAegO,MAuChEsJ,GApCQ,SAAA3I,GAAA,IAAGtN,EAAHsN,EAAGtN,KAAMkW,EAAT5I,EAAS4I,cAAeT,EAAxBnI,EAAwBmI,QAAxB,OACnBjX,EAAAC,EAAAC,cAAC4U,EAAA,SAAD,KACI9U,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAACyX,GAAD,CAAUjK,GAAI,MAAO5D,MAAO,EAAGqE,KAAM,GAAIoG,SAAU,IAAMmD,EAAeT,QAASA,EAAStU,IAAK,IAC/F3C,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,YAEA,CAAC,IAAK,IAAK,IAAK,KAAKyB,IACrB,SAAAiW,GAAM,OACF5X,EAAAC,EAAAC,cAAC4U,EAAA,SAAD,CAAUnS,IAAKiV,GAOXnW,MAAMC,KAAKD,MAAM,GAAG6K,QAAQ3K,IAC5B,SAAAkW,GACI,ILfOC,EKeHpK,EAAKkK,GAAUC,EAAQ,GACvB/N,ELXV,IALagO,EKgBqBpK,GLblCR,WAAW,GAAK,IACpB/K,SAAS2V,EAAG,GAAI,IKeF3J,EADO3M,GAAQA,EAAK6B,IAAkB7B,EAAK6B,GAAeyG,GAC5CtI,EAAK6B,GAAeyG,GAApB,KAAqC,GAEvD,OAAO9J,EAAAC,EAAAC,cAACyX,GAAD,CAAUjK,GAAIA,EAAI5D,MAAOA,EAAOqE,KAAMA,EAAMoG,SAAUzK,IAAU4N,EAAeT,QAASA,EAAStU,IAAKmH,YClC/HiO,UAAU,SAAAtJ,GAAA,IAAGN,EAAHM,EAAGN,KAAMT,EAATe,EAASf,GAAI6G,EAAb9F,EAAa8F,SAAU0C,EAAvBxI,EAAuBwI,QAAvB,OACZjX,EAAAC,EAAAC,cAAA,OAAKC,UAAWoU,EAAW,oBAAsB,WAAY0C,QAAS,kBAAMA,EAAQvJ,KAChF1N,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQgO,MA+BhB6J,GA3BS,SAAAlJ,GAAA,IAAGmJ,EAAHnJ,EAAGmJ,eAAgBhB,EAAnBnI,EAAmBmI,QAAnB,OACpBjX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAEPyF,EAAajE,IACT,SAAAgB,GAAG,OAAI3C,EAAAC,EAAAC,cAACgY,GAAD,CAASvV,IAAKA,EAAKwL,KAAMhK,EAASxB,GAAM+K,GAAI/K,EAAK4R,SAAU5R,IAAQsV,EAAgBhB,QAASA,MAIvGpR,EAAUlE,IACN,SAAAgB,GAAG,OAAI3C,EAAAC,EAAAC,cAACgY,GAAD,CAASvV,IAAKA,EAAKwL,KAAMhK,EAASxB,GAAM+K,GAAI/K,EAAK4R,SAAU5R,IAAQsV,EAAgBhB,QAASA,MAG3GjX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,QAEIuF,EAAkB/D,IACd,SAAAgB,GAAG,OAAI3C,EAAAC,EAAAC,cAACgY,GAAD,CAASvV,IAAKA,EAAKwL,KAAMhK,EAASxB,GAAM+K,GAAI/K,EAAK4R,SAAU5R,IAAQsV,EAAgBhB,QAASA,MAG3GjX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,QAEIwF,EAAqBhE,IACjB,SAAAgB,GAAG,OAAI3C,EAAAC,EAAAC,cAACgY,GAAD,CAASvV,IAAKA,EAAKwL,KAAMhK,EAASxB,GAAM+K,GAAI/K,EAAK4R,SAAU5R,IAAQsV,EAAgBhB,QAASA,QCnB7GkB,UAAU,SAAA1J,GAAiC,IAA9B2J,EAA8B3J,EAA9B2J,cAAe7C,EAAe9G,EAAf8G,SAC9B,OACIvV,EAAAC,EAAAC,cAAA,UAAQ0C,MAAOwV,EAAe7C,SAAU,SAACW,GAAD,OAAWX,EAASW,EAAM7V,OAAOuC,SACrE5C,EAAAC,EAAAC,cAAA,UAAQ0C,MAAM,KAAd,KACA5C,EAAAC,EAAAC,cAAA,UAAQ0C,MAAM,KAAd,QAKNyV,GAAW,SAAAvJ,GAAiC,IAA9BsJ,EAA8BtJ,EAA9BsJ,cAAe7C,EAAezG,EAAfyG,SAC/B,OACIvV,EAAAC,EAAAC,cAAA,UAAQ0C,MAAOwV,EAAe7C,SAAU,SAACW,GAAD,OAAWX,EAASW,EAAM7V,OAAOuC,SAEjEY,OAAO8I,KAAK7F,IAAQ9E,IAChB,SAAAgB,GACI,OAAO3C,EAAAC,EAAAC,cAAA,UAAQyC,IAAKA,EAAKC,MAAOD,GAAM8D,GAAO9D,QAO/D2V,GAAS,SAAArJ,GAAiC,IAA9BmJ,EAA8BnJ,EAA9BmJ,cAAe7C,EAAetG,EAAfsG,SAC7B,OACIvV,EAAAC,EAAAC,cAAA,UAAQ0C,MAAOwV,EAAe7C,SAAU,SAACW,GAAD,OAAWX,EAASW,EAAM7V,OAAOuC,SACrE5C,EAAAC,EAAAC,cAAA,UAAQ0C,MAAM,KAAd,WACA5C,EAAAC,EAAAC,cAAA,UAAQ0C,MAAM,KAAd,OACA5C,EAAAC,EAAAC,cAAA,UAAQ0C,MAAM,KAAd,UACA5C,EAAAC,EAAAC,cAAA,UAAQ0C,MAAM,KAAd,YAKN2V,GAAW,SAAAlJ,GAAwB,IAArBmJ,EAAqBnJ,EAArBmJ,KAAMjD,EAAelG,EAAfkG,SACtB,OACIvV,EAAAC,EAAAC,cAAA,UAAQ0C,MAAO4V,EAAMjD,SAAU,SAACW,GAAD,OAAWX,EAASW,EAAM7V,OAAOuC,SAExDnB,MAAMC,KAAKD,MAAM,KAAK6K,QAAQ3K,IAC1B,SAAAO,GACI,IAAIhB,EAAI0N,KAAc1M,GAAG,GACzB,OAAOlC,EAAAC,EAAAC,cAAA,UAAQyC,IAAKT,EAAGU,MAAOV,GAAIhB,OAOpDuX,GAAO,SAAAhJ,GAAuC,IAsC5CiJ,EAAIC,EAAIC,EAtCA9O,EAAoC2F,EAApC3F,MAAOC,EAA6B0F,EAA7B1F,OAAQ8O,EAAqBpJ,EAArBoJ,eAI3B,OAFe9O,EAAOE,WAAanE,EAI3B9F,EAAAC,EAAAC,cAAC4U,EAAA,SAAD,KACI9U,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAf,QAAuC2J,EAAvC,KACA9J,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQ0C,MAAOmH,EAAOE,SAAUsL,SAAU,SAACW,GAAD,OAAW2C,EAAe,WAAY,KAAM3C,EAAM7V,OAAOuC,SAE3FY,OAAO8I,KAAKrG,IAAuBtE,IAC/B,SAAAgB,GACI,OAAO3C,EAAAC,EAAAC,cAAA,UAAQyC,IAAKA,EAAKC,MAAOD,GAAMsD,GAAsBtD,QAKhF3C,EAAAC,EAAAC,cAAA,YAEAF,EAAAC,EAAAC,cAAA,YAEAF,EAAAC,EAAAC,cAAA,YAEAF,EAAAC,EAAAC,cAAA,YAEAF,EAAAC,EAAAC,cAAA,YAEAF,EAAAC,EAAAC,cAAA,YAEAF,EAAAC,EAAAC,cAAA,YAEAF,EAAAC,EAAAC,cAAA,cVuBW,KUhBlB6J,EAAOE,UViBiB,KUjBaF,EAAOE,UAC7CyO,EAAK1Y,EAAAC,EAAAC,cAAC4Y,GAAD,CAAUN,KAAMzO,EAAOvI,KAAK,GAAI+T,SAAU,SAAC3S,GAAD,OAAWiW,EAAe,OAAQ,EAAGjW,MACpF+V,EAAK3Y,EAAAC,EAAAC,cAAA,SAAOoS,KAAK,OAAO1P,MAAOmH,EAAOvI,KAAK,GAAI+T,SAAU,SAACW,GAAD,OAAW2C,EAAe,OAAQ,EAAG3C,EAAM7V,OAAOuC,UAC3GgW,EAAK,KAELF,EAAK1Y,EAAAC,EAAAC,cAAA,SAAOoS,KAAK,OAAO1P,MAAOmH,EAAOvI,KAAK,GAAI+T,SAAU,SAACW,GAAD,OAAW2C,EAAe,OAAQ,EAAG3C,EAAM7V,OAAOuC,UAC3G+V,EAAK3Y,EAAAC,EAAAC,cAAA,SAAOoS,KAAK,OAAO1P,MAAOmH,EAAOvI,KAAK,GAAI+T,SAAU,SAACW,GAAD,OAAW2C,EAAe,OAAQ,EAAG3C,EAAM7V,OAAOuC,UAC3GgW,EAAK5Y,EAAAC,EAAAC,cAAA,SAAOoS,KAAK,OAAO1P,MAAOmH,EAAOvI,KAAK,GAAI+T,SAAU,SAACW,GAAD,OAAW2C,EAAe,OAAQ,EAAG3C,EAAM7V,OAAOuC,WAI3G5C,EAAAC,EAAAC,cAAC4U,EAAA,SAAD,KACI9U,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAf,QAAuC2J,EAAvC,KACA9J,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQ0C,MAAOmH,EAAOE,SAAUsL,SAAU,SAACW,GAAD,OAAW2C,EAAe,WAAY,KAAM3C,EAAM7V,OAAOuC,SAE/FuD,GAA6BxE,IACzB,SAAAhB,GACI,OAAOX,EAAAC,EAAAC,cAAA,UAAQyC,IAAKhC,EAAEgC,IAAKC,MAAOjC,EAAEgC,KAAMhC,EAAEiC,WAK5D5C,EAAAC,EAAAC,cAAA,WAAMwY,EAAG1Y,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaoG,GAAoBwD,EAAOE,UAAU,KAC1EjK,EAAAC,EAAAC,cAAA,WAAMyY,EAAG3Y,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaoG,GAAoBwD,EAAOE,UAAU,KAC1EjK,EAAAC,EAAAC,cAAA,WAAM0Y,EAAG5Y,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaoG,GAAoBwD,EAAOE,UAAU,KAC1EjK,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC6Y,GAAD,CAAUX,cAAerO,EAAO4C,mBAAoB4I,SAAU,SAAC3S,GAAD,OAAWiW,EAAe,qBAAsB,KAAMjW,OAExH5C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC6Y,GAAD,CAAUX,cAAerO,EAAO2C,iBAAkB6I,SAAU,SAAC3S,GAAD,OAAWiW,EAAe,mBAAoB,KAAMjW,OAEpH5C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC8Y,GAAD,CAAQZ,cAAerO,EAAO6C,QAAS2I,SAAU,SAAC3S,GAAD,OAAWiW,EAAe,UAAW,KAAMjW,OAEhG5C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC+Y,GAAD,CAASb,cAAerO,EAAO0C,cAAe8I,SAAU,SAAC3S,GAAD,OAAWiW,EAAe,gBAAiB,KAAMjW,OAE7G5C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQ0C,MAAOmH,EAAOC,QAASuL,SAAU,SAACW,GAAD,OAAW2C,EAAe,UAAW,KAAM3C,EAAM7V,OAAOuC,SAEzFnB,MAAMC,KAAKD,MAAM,IAAI6K,QAAQ3K,IAAI,SAAAO,GAAC,OAAIlC,EAAAC,EAAAC,cAAA,UAAQyC,IAAKT,EAAGU,MAAOV,GAAIA,UAsC1EgX,8MA5BXC,aAAe,SAACC,EAAWC,EAAUC,EAAW1W,GAC5C6N,EAAKC,MAAM6I,SAASH,EAAWC,EAAUC,EAAW1W,4EAG/C,IAAAkU,EAAAjC,KAECjL,EAAQiL,KAAKnE,MAAM9G,MAEzB,OACI5J,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAf,QACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAf,UACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAf,UACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAf,UACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAf,WACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAf,UACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAf,WACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAf,YACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAf,YACCqD,OAAO8I,KAAK1C,GAAOjI,IAAI,SAAAO,GAAC,OACrBlC,EAAAC,EAAAC,cAACsZ,GAAD,CAAM7W,IAAKT,EAAG4H,MAAO5H,EAAG6H,OAAQH,EAAM1H,GAAI2W,eAAgB,SAACQ,EAAUC,EAAW1W,GAAtB,OAAgCkU,EAAKqC,aAAajX,EAAGmX,EAAUC,EAAW1W,gBAvBvHnC,sBC3HlBgZ,iMAlBF,IAAAhJ,EAAAoE,KACL,OACI7U,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mBAAhB,iBACAH,EAAAC,EAAAC,cAAA,UAAQqV,SAAU,SAACW,GAAD,OAAWzF,EAAKC,MAAM6I,SAASrD,EAAM7V,OAAOuC,QAAQA,MAAOiS,KAAKnE,MAAM3D,MAEhFvJ,OAAO8I,KAAK/E,IAAe5F,IACvB,SAAAgB,GACI,OAAO3C,EAAAC,EAAAC,cAAA,UAAQyC,IAAKA,EAAKC,MAAOD,GAAM4E,GAAc5E,eAVpDlC,cCgBjBiZ,8MAhBXC,aAAe,SAACzD,GACZ5M,QAAQ+B,IAAR,mCAAgD6K,EAAM7V,OAAOuC,OAC7D6N,EAAKC,MAAM6I,SAASrD,EAAM7V,OAAOuC,MAAMzB,OAAS,EAAI+U,EAAM7V,OAAOuC,MAAMR,OAAO,EAAG,GAAK8T,EAAM7V,OAAOuC,gFAInG,IAAMuL,EAAO0G,KAAKnE,MAAMvC,KACxB,OACInO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,wDACAF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAAhB,SAFJ,IAE0CH,EAAAC,EAAAC,cAAA,SAAO0C,MAAOuL,EAAMoH,SAAUV,KAAK8E,aAAcxC,KAAM,YAZ9E1W,aC6BzBmZ,GAAsB,GAE5B,SAASC,GAAMlZ,GACX,YAAaC,IAAND,GAAyB,OAANA,GAAoB,KAANA,MAsjB7B6O,eA5gBX,SAAAA,EAAYkB,GAAO,IAAAD,EAAA,OAAAjN,OAAAsW,EAAA,EAAAtW,CAAAqR,KAAArF,IACfiB,EAAAjN,OAAAuW,EAAA,EAAAvW,CAAAqR,KAAArR,OAAAwW,EAAA,EAAAxW,CAAAgM,GAAAyK,KAAApF,KAAMnE,KAwBVoF,SAAW,WAAsF,IAAArH,EAAAnG,UAAAnH,OAAA,QAAAP,IAAA0H,UAAA,GAAAA,UAAA,GAAR,GAAQ4R,GAAAzL,EAApF0L,KAAoF1L,EAAtE2L,oBAAsE,IAAAF,EAAxD,KAAwDA,EAAAG,EAAA5L,EAAlD6L,qBAAkD,IAAAD,GAAjC,EAAiCA,EAAAE,EAAA9L,EAA9B+L,qBAA8B,IAAAD,GAAb,EAAaA,EAE7FxE,WAAW,kBAAMtF,EAAKC,MAAMsF,OAAO,CAACmE,MAAM,KAAS,KACnD1J,EAAKC,MAAMsF,OAAO,CAACmE,MAAM,EAAMC,cAAaE,gBAAeE,mBA5B5C/J,EA+BnBgK,iBAAmB,SAACnI,EAAMpJ,GACtBuH,EAAKU,SACDI,aAAQ,SAAAC,GACJ,IAAI3E,EAAI,CAAEyF,OAAMpJ,WACNsI,EAAMkJ,eAAehY,KAAKmK,GAC1B+M,IAAqBpI,EAAMkJ,eAAehS,YApC7C+H,EAyCnBkK,eAAgB,SAAAzR,GACZuH,EAAKgK,iBAAiB,OAAQvR,IA1CfuH,EA6CnBmK,kBAAmB,SAAA1R,GACfuH,EAAKgK,iBAAiB,UAAWvR,IA9ClBuH,EAiDnBoK,gBAAiB,SAAA3R,GACbuH,EAAKgK,iBAAiB,QAASvR,IAlDhBuH,EAqDnB4F,qBA5FJ,SAAuBC,EAAUwE,EAAcvE,GAE3C,IACIC,EADAZ,EAAW,GAGf,OAAO,WACHa,aAAaD,GACb,IAAIN,EAAQ5N,UAAU,GACtBsN,EAASlT,KAAKwT,EAAM1U,MAEpBsZ,EAAalF,EAASzU,QACtBqV,EAAUT,WAAW,WAEjBS,EAAU,KACVF,EAASV,GACTA,EAAW,IACZW,IA4EgBG,CACnB,SAAAd,GAEI,IAAInL,EAAQmL,EAASrK,OAAO,SAACwP,EAAaC,GAAd,OAA0BD,EAAcC,EAAQ7Z,QAAQ,GAEpFsP,EAAKU,SACDI,aACI,SAAAC,GAEIA,EAAMyJ,QAAU,IAAIhZ,WAAWwI,GAC/B,IAAIyQ,EAAY,EAHXrJ,GAAA,EAAAC,GAAA,EAAAC,OAAAnR,EAAA,IAKL,QAAAoR,EAAAC,EAAc2D,EAAd1D,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAwB,KAAfhF,EAAemF,EAAApP,MAEpB4O,EAAMyJ,QAAQE,IAAItO,EAAGqO,GACrBA,GAAarO,EAAE1L,OAEX2H,GAAY+D,GACZ2E,EAAMhQ,KAAO4G,GAAUoJ,EAAMhQ,MAAQ,GAAIuJ,GAAe8B,IAExDvD,QAAQ+B,IAAI,wCAbf,MAAAoH,GAAAX,GAAA,EAAAC,EAAAU,EAAA,YAAAZ,GAAA,MAAAI,EAAAS,QAAAT,EAAAS,SAAA,WAAAZ,EAAA,MAAAC,OA8BjBtB,EAAKC,MAAMsF,OAAO,CAACmE,MAAM,KAE7B,SAACjZ,GAEGuP,EAAKC,MAAMsF,OAAO,CAACmE,MAAM,EAAMK,cAAetZ,KAElD,KAhGeuP,EAyInB2K,aAAe,SAACvR,GACZP,QAAQ+B,IAAI,eAAgBxB,GAC5B,IAAIwR,EAAOxR,EAAExJ,OAAOib,MAAM,GAC1BhS,QAAQ+B,IAAIgQ,GACZ5K,EAAK8K,UAAU,CAACF,KA7ID5K,EAgJnB+K,YAAc,SAAC3R,GACXP,QAAQ+B,IAAI,cAAexB,GAC3B4G,EAAKgL,iBAAiBC,QAAQC,SAlJflL,EAqJnBmL,YAAc,WACVnL,EAAKU,SAAS,CACV0K,gBAAgB,KAvJLpL,EA2JnBqL,YAAa,WACTrL,EAAKU,SAAS,CACV0K,gBAAgB,KA7JLpL,EAqKnBsL,OAAS,SAACT,GACNhS,QAAQ+B,IAAI,OAAQiQ,GACpB7K,EAAKU,SACD,CACI3P,KAAM,KACNgL,SAAS,EACTqP,gBAAgB,GAEpB,WAAOpL,EAAK8K,UAAUD,MA7KX7K,EAiLnBuL,aAAe,SAAClS,GAAU,IAEdtI,EAASiP,EAAKN,MAAd3O,KACJA,GAAQA,EAAK6B,IAAkB7B,EAAK6B,GAAeyG,GACnD2G,EAAKU,SACDI,aAAQ,SAAAC,GACJA,EAAM1F,YAAchC,MAI5B2G,EAAKU,SACDI,aAAQ,SAAAC,GACJA,EAAM1F,YAAchC,EAChBA,IAAU2G,EAAKN,MAAMrE,cACrB0F,EAAMhQ,KAAO,KACbgQ,EAAMhF,SAAU,MAIxBqN,GAAM/P,IAEN2G,EAAKwL,UAAUpQ,GAAc/B,GAAQrC,MAtM9BgJ,EA2MnByL,cAAgB,SAAClQ,GAMT6N,GAAMpJ,EAAKN,MAAMrE,cAAgBE,GAIjCyE,EAAKU,SAAS,CAAEnF,eArNLyE,EA6OnB0L,kBAAoB,SAACnQ,EAAWoN,EAAWC,EAAUC,EAAW1W,GAC5D0G,QAAQ+B,IAAI,4BAA6BW,EAAWoN,EAAWC,EAAUC,EAAW1W,GACpF,IAAIjC,EAAIwB,SAASS,EAAO,IACxB6N,EAAKU,SACDI,aAAQ,SAAAC,GACa,SAAb6H,EACA7H,EAAMhQ,KAAK6B,GAAemO,EAAM1F,aAAhC,SAAyDE,GAAzD,MAA6EoN,GAA7E,KAAgGE,GAAa3Y,EAE7G6Q,EAAMhQ,KAAK6B,GAAemO,EAAM1F,aAAhC,SAAyDE,GAAzD,MAA6EoN,GAAWC,GAAY1Y,EAEvF,aAAb0Y,IAEI7H,EAAMhQ,KAAK6B,GAAemO,EAAM1F,aAAhC,SAAyDE,GAAzD,MAA6EoN,GAA7E,OADAzY,IAAMmF,EAC8F,EAEA,GAG5G0L,EAAMhQ,KAAK6B,GAAemO,EAAM1F,aAAhC,SAAyDE,GAAzD,MAA6EoN,GAA7E,SAAqG,EACrG5H,EAAMhF,SAAU,MA/PTiE,EAuQnB2L,kBAAoB,SAACpQ,EAAWpJ,GAE5B,IAAIjC,EAAIwB,SAASS,EAAO,IACxB6N,EAAKU,SACDI,aAAQ,SAAAC,GACJA,EAAMhQ,KAAK6B,GAAemO,EAAM1F,aAAhC,SAAyDE,GAAzD,aAAsFrL,EACtF6Q,EAAMhQ,KAAK6B,GAAemO,EAAM1F,aAAhC,SAAyDE,GAAzD,SAAiF,EACjFwF,EAAMhF,SAAU,MA9QTiE,EAmRnB4L,iBAAmB,SAAClO,QAEHvN,IAATuN,GAA+B,OAATA,IACtBA,EAAKhN,OAAS,EACdmI,QAAQC,KAAR,sCAAAV,OAAmDsF,IAGvDsC,EAAKU,SACDI,aAAQ,SAAAC,GACJA,EAAMhQ,KAAK6B,GAAemO,EAAM1F,aAAhC,KAAuDqC,EACvDqD,EAAMhQ,KAAK6B,GAAemO,EAAM1F,aAAhC,SAA0D,EAC1D0F,EAAMhF,SAAU,OA9RTiE,EAmSnBK,kBAAoB,SAACQ,GACjBb,EAAKkK,eAAL,SAAA9R,OAA6BqF,GAAUoD,GAAvC,gBApSeb,EAuSnBQ,qBAAuB,SAACK,GACpBb,EAAKkK,eAAL,SAAA9R,OAA6BqF,GAAUoD,GAAvC,mBAxSeb,EA2SnBW,mBAAqB,SAACE,GAClBhI,QAAQ+B,IAAI,sBACZoF,EAAKU,SACDI,aAAQ,SAAAC,GACJA,EAAMnB,OAASiB,KAGvBb,EAAKkK,eAAL,UAAA9R,OAA8BuF,GAAWkD,GAAzC,gBAlTeb,EAqTnBiB,sBAAwB,SAACJ,GACrBhI,QAAQ+B,IAAI,yBACZoF,EAAKU,SACDI,aAAQ,SAAAC,GACJA,EAAMnB,OAAS,QAGvBI,EAAKkK,eAAL,UAAA9R,OAA8BuF,GAAWkD,GAAzC,mBA5Teb,EA+TnB2F,UAAY,SAACzK,EAAK2O,GAEd,GADAhR,QAAQ+B,IAAI,YAAa9J,EAAGoK,GAAM2O,GAC7B7J,EAAKN,MAAME,OAAhB,CAIA,IAAIuG,EAAM3I,GAAWwC,EAAKN,MAAME,QAC3BuG,EAILA,EAAIR,UAAUnT,EAAiB0I,GAH3BrC,QAAQC,KAAR,gBAAAV,OAA6B4H,EAAKN,MAAME,OAAxC,oBALA/G,QAAQC,KAAK,0CAlUFkH,EA6UnBwL,UAAY,SAACtQ,EAAK2O,GACd7J,EAAKqF,SAAS,CAACqE,MAAM,EAAMC,YAAa,oBAAqBI,cAAe,EAAGF,kBAC/E7J,EAAK2F,UAAUzK,EAAK2O,IA/UL7J,EAkVnB6L,YAAc,SAAC1G,GAAa,IAAAhD,GAAA,EAAAC,GAAA,EAAAC,OAAAlS,EAAA,IACxB,QAAAmS,EAAAC,EAAc4C,EAAd1D,OAAAC,cAAAS,GAAAG,EAAAC,EAAAZ,QAAAC,MAAAO,GAAA,EAAwB,KAAf/F,EAAekG,EAAAnQ,MACpB6N,EAAK2F,UAAUvJ,EAAG,IAFE,MAAA4F,GAAAI,GAAA,EAAAC,EAAAL,EAAA,YAAAG,GAAA,MAAAI,EAAAN,QAAAM,EAAAN,SAAA,WAAAG,EAAA,MAAAC,KAhVxBrC,EAAKgL,iBAAmBc,IAAMC,YAC9B/L,EAAKN,MAAQ,CACTE,OAAQ,KACRvE,YAAa,KACbE,UAAW,KACXQ,SAAS,EACThL,KAAM,KACNyZ,QAAS,KACTP,eAAgB,GAGhBmB,gBAAgB,GAbLpL,mHAwGH6K,+FACNmB,QAAQC,IAAIpB,EAAM3Z,IAAN,eAAAmN,EAAAtL,OAAAmZ,GAAA,EAAAnZ,CAAAoZ,GAAA3c,EAAA4c,KACd,SAAAC,EAAMzB,GAAN,IAAA7Z,EAAA,OAAAob,GAAA3c,EAAA8c,KAAA,SAAAC,GAAA,cAAAA,EAAAlJ,KAAAkJ,EAAA5K,MAAA,YACQiJ,EAAKlE,KA1JH,SAyJV,CAAA6F,EAAA5K,KAAA,QAEQ9I,QAAQC,KAAR,cAAAV,OAA2BwS,EAAKlN,KAAhC,oBAAAtF,OAAuDwS,EAAKlE,OAC5DL,EAAK8D,kBAAkB,gBAH/BoC,EAAA5K,KAAA,uBAKQ0E,EAAKhB,SAAS,CAACqE,MAAM,EAAMC,YAAa,oBALhD4C,EAAAC,GAMyBhb,WANzB+a,EAAA5K,KAAA,EAM0C,IAAI8K,SAAS7B,GAAM8B,cAN7D,OAAAH,EAAAI,GAAAJ,EAAAK,KAOYvU,GADEtH,EANd,IAAAwb,EAAAC,GAAAD,EAAAI,MAQYtG,EAAK3F,SACDI,aAAQ,SAAAC,GAEJA,EAAMhQ,KAAOuJ,GAAevJ,GAC5B,IAAI8b,EAAM9Z,OAAO8I,KAAKkF,EAAMhQ,KAAK6B,IAAgB,GAC7Cka,EAAM/Z,OAAO8I,KAAKkF,EAAMhQ,KAAK6B,GAAeia,GAA1B,UAA4C,GAClE9L,EAAM1F,YAAc3J,SAASmb,EAAK,IAClC9L,EAAMxF,UAAY7J,SAASob,EAAK,OAGxCzG,EAAK6D,eAAe,qBAEpB7D,EAAK8D,kBAAkB,iBACvBtR,QAAQ+B,IAAI,2BAA4B9J,EAAGC,EAAKkI,MAAM,EAAG,MAE7DoN,EAAKpG,MAAMsF,OAAO,CAACmE,MAAM,IAvBjC,yBAAA6C,EAAAQ,SAAAV,EAAAjI,SADc,gBAAA4I,GAAA,OAAA3O,EAAAlG,MAAAiM,KAAAvM,YAAA,yIAgPb,IAAAoV,EAAA7I,KAAAkC,EAEqElC,KAAK1E,MAAvEE,EAFH0G,EAEG1G,OAAQvE,EAFXiL,EAEWjL,YAAaE,EAFxB+K,EAEwB/K,UAAWxK,EAFnCuV,EAEmCvV,KAAMgL,EAFzCuK,EAEyCvK,QAASqP,EAFlD9E,EAEkD8E,eAEnD8B,GAAa,EAEbnc,IAEAmc,GAAa,EAEPta,KAAiB7B,IACnB8H,QAAQ+B,IAAR,wBAAqC7J,GACrCmc,GAAa,IAGbA,GAAgB7R,KAAetK,EAAK6B,KAEpCsa,GAAa,IAGbA,GAAgB,aAAcnc,EAAK6B,GAAeyI,KAElD6R,GAAa,IAGbA,GAAgB3R,KAAaxK,EAAK6B,GAAeyI,GAApB,WAE7B6R,GAAa,IAGbA,GAAgB,UAAWnc,EAAK6B,GAAeyI,GAApB,SAA6CE,KAExE2R,GAAa,IAKrBA,EAAaA,GAAwG,IAAzFna,OAAO8I,KAAK9K,EAAK6B,GAAeyI,GAApB,SAA6CE,GAA7C,OAAkE7K,OAE1G,IAAIyc,EAAiB,GACrB,GAAID,EAAY,CACZC,EAAiB3R,GAA8BH,EAAaE,EAAWxK,GACvE,IAAIN,EAAI+L,GAAqBnB,EAAatK,GACtCN,GACA0c,EAAelb,KAAKxB,GAqB5B,OAEIlB,EAAAC,EAAAC,cAAC2d,GAAA,EAAD,CACIC,cAAY,EACZC,MAAO,CAACC,SAAU,YAElBjC,OAAQlH,KAAKkH,OACbH,YAAa/G,KAAK+G,YAClBE,YAAajH,KAAKiH,aAGjBD,GACD7b,EAAAC,EAAAC,cAAA,OAAK6d,MA7BQ,CACjBC,SAAU,WACVC,IAAK,EACLC,MAAO,EACPC,OAAQ,EACRC,KAAM,EACNC,WAAY,OACZC,WAAY,kBACZC,UAAW,SACXC,MAAO,OACPC,SAAU,SAmBN,sBAIAze,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAEXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAACoX,GAAD,CAAMnE,KbvfD,KaufsBvB,Yblff,UamfNmD,cAAe,SAACK,EAAcC,GAAf,OAAgCrV,EAAAC,EAAAC,cAACqX,GAAD,CAAWnC,aAAcA,EAAcC,aAAcA,KACpG1E,iBAAkBkE,KAAKwB,qBACvBvF,kBAAmB+D,KAAK/D,kBACxBG,qBAAsB4D,KAAK5D,qBAC3BG,mBAAoByD,KAAKzD,mBACzBM,sBAAuBmD,KAAKnD,sBAC5BvR,UAAU,IACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,iDAIRH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAEXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,+EACgFH,EAAAC,EAAAC,cAAA,WADhF,4EAE6EF,EAAAC,EAAAC,cAAA,WAF7E,iEAMAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACXH,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAACwe,GAAD,CAAgBld,KAAMA,EAAMkW,cAAe5L,EAAamL,QAASpC,KAAKmH,eACtEhc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACVkQ,GAAUrQ,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAc8W,QAAS,kBAAMyG,EAAKzB,UAAUvQ,KZ7fvE,QY6fS,+BACX1L,EAAAC,EAAAC,cAAA,SAAOye,IAAK9J,KAAK4G,iBAAkBnJ,KAAK,OAAOyL,MAAO,CAACa,QAAQ,QAAUrJ,SAAUV,KAAKuG,eACxFpb,EAAAC,EAAAC,cAAA,UAAQ+W,QAASpC,KAAK2G,aAAtB,8BAOPha,GAAQA,EAAK6B,GAAeyI,IAAgB9L,EAAAC,EAAAC,cAAC2e,GAAD,CAAkB1Q,KAAM3M,EAAK6B,GAAeyI,GAApB,KAA0CyN,SAAU,SAACpL,GAAD,OAAUuP,EAAKrB,iBAAiBlO,QAKjKnO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAC4U,EAAA,SAAD,KAEI9U,EAAAC,EAAAC,cAAA,sBACC2Z,GAAM/N,IAAgB9L,EAAAC,EAAAC,cAAC4e,GAAD,CAAiB7G,eAAgBjM,EAAWiL,QAASpC,KAAKqH,gBAChFyB,GACD3d,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACXH,EAAAC,EAAAC,cAAC6e,GAAD,CACI/S,UAAWA,EACXpC,MAAOpI,EAAK6B,GAAeyI,GAApB,SAA6CE,GAA7C,MACPuN,SAAU,SAACH,EAAWC,EAAUC,EAAW1W,GAAjC,OAA2C8a,EAAKvB,kBAAkBnQ,EAAWoN,EAAWC,EAAUC,EAAW1W,MAC3H5C,EAAAC,EAAAC,cAAC8e,GAAD,CACIhT,UAAWA,EACXe,KAAMvL,EAAK6B,GAAeyI,GAApB,SAA6CE,GAA7C,aACNuN,SAAU,SAAC3W,GAAD,OAAW8a,EAAKtB,kBAAkBpQ,EAAWpJ,SAMtE4J,GACDxM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAC4U,EAAA,SAAD,KACI9U,EAAAC,EAAAC,cAAA,mDACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAAS8W,QAAS,kBAAMyG,EAAKpB,YAAYsB,KAA3D,oBAOf/I,KAAKnE,MAAMuO,OAAStB,GACrB3d,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACfH,EAAAC,EAAAC,cAAA,8CACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACVyd,EAAejc,IAAI,SAACkL,EAAG3K,GAAJ,OAAUlC,EAAAC,EAAAC,cAAA,OAAKyC,IAAKT,EAAG/B,UAAU,QAAQoB,EAAGsL,mBA9gB3EpM,sBCvDRye,GAAU,CACnBC,IAAM,WACNC,IAAM,UACNC,IAAM,aACNC,IAAM,iBACNC,IAAM,iBACNC,IAAM,mBACNC,IAAM,eAGGC,GAAY,CACrBhZ,EAAG,uBACHpC,EAAG,4BACHqC,EAAG,6BACHE,EAAG,sBACHC,EAAG,2BACHC,EAAG,sBACHC,EAAG,kBACHC,EAAG,mBACHE,GAAI,wBACJC,GAAI,sBACJC,GAAI,4BACJ9C,GAAI,4BACJG,GAAI,2BACJC,GAAI,2BACJC,GAAI,2BACJC,GAAI,2BACJ8a,GAAI,qBACJC,GAAI,0BACJC,GAAI,2BACJC,GAAI,oBACJC,GAAI,yBACJC,GAAI,oBACJC,GAAI,gBACJC,GAAI,iBACJC,GAAI,sBACJC,GAAI,oBACJC,GAAI,0BACJC,GAAI,0BACJC,GAAI,sBACJC,GAAI,sBACJC,GAAI,2BACJC,GAAI,sBACJC,GAAI,wBACJC,GAAI,wBACJC,GAAI,kBACJC,GAAI,eACJC,GAAI,qBACJC,GAAI,oBACJC,GAAI,mBACJC,GAAI,kBACJC,GAAI,kBACJC,GAAI,kBACJC,GAAI,kBACJC,GAAI,mBACJC,GAAI,oCACJC,GAAI,oCACJC,GAAI,oCACJC,GAAI,oCACJC,GAAI,gBACJC,GAAI,gBACJC,GAAI,eACJC,GAAI,gBACJC,GAAI,eACJC,GAAI,wBACJC,GAAI,wBACJC,GAAI,kCACJC,GAAI,oCACJC,IAAK,8BACLC,IAAK,gCACLC,IAAK,gBACLC,IAAK,sBACLC,IAAK,0BACLC,IAAK,gBACLC,IAAK,gBACLC,IAAK,eACLnd,IAAK,iBACLC,IAAK,kBCpEHmd,UAAe,IA+FNC,8MA3FX1S,MAAQ,CACJyF,SAAU,MAGdS,qBAAuB,SAACH,GAEpBzF,EAAKU,SACDI,aAAQ,SAAAC,GACMA,EAAMoE,SAASkN,QAAQ5M,EAAM1U,MAC7BohB,IAAcpR,EAAMoE,SAASmN,kFAQ/C,OAEI/iB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAEXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAACoX,GAAD,CAAMnE,KfnCG,KemCkBvB,YfnClB,KeoCHmD,cAAe,SAACK,EAAcC,GAAf,OAAgCrV,EAAAC,EAAAC,cAACqX,GAAD,CAAWnC,aAAcA,EAAcC,aAAcA,KAEpG1E,iBAAkBkE,KAAKwB,sBACzBrW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,0EAIRH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,WAEIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,gIAIAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACXH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACV0U,KAAK1E,MAAMyF,SAASjU,IAAI,SAACgK,EAAKzJ,GAC3B,IAAI2K,EAAImW,aAAUrX,GACdsX,EAAQ,GACRC,EAAQ,GACZ,OAAQrW,EAAEsW,aACN,KAAK,IACL,KAAK,IACDF,EAAQrU,KAAc/B,EAAElK,KACxBugB,EAAK,aAAAra,OAAgBgE,EAAEuW,UACvB,MACJ,KAAK,IACD,MACJ,KAAK,IACDH,EAAQvD,GAAU7S,EAAEwW,eACpBH,EAAQrW,EAAEyW,aACV,MACJ,KAAK,IACDL,EAAK,YAAApa,OAAegE,EAAE0W,SACtBL,EAAQ,GACR,MACJ,KAAK,IACD,MACJ,KAAK,IACDD,EAAK,SAAApa,OAAYgE,EAAE2W,WACnBN,EAAK,eAAAra,OAAkBgE,EAAE4W,qBAKjC,OACIzjB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,IAAyBoB,EAAGoK,GAA5B,KACA3L,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAhB,WAAuC0M,EAAE7C,SACzChK,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAY+e,GAAQrS,EAAEsW,cACtCnjB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAY8iB,GAC5BjjB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAY+iB,mBA9EtDziB,aCcPijB,UAxBA,WACX,OACI1jB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,iDAAiDC,OAAO,SAASC,IAAI,uBAA7E,oCASJN,EAAAC,EAAAC,cAAA,WAGIF,EAAAC,EAAAC,cAAA,wJACqCF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,+CAA+CC,OAAO,SAASC,IAAI,uBAA3E,iCADrC,SCADqjB,oLAbP,OACI3jB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAEXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAM4d,MAAO,CAAC6F,UAAW,SAAxC,uDAPKnjB,aCqLNojB,qNAxKX1T,MAAQ,CACJ3O,KAAM,QAMVsU,SAAW,WAAsF,IAAArH,EAAAnG,UAAAnH,OAAA,QAAAP,IAAA0H,UAAA,GAAAA,UAAA,GAAR,GAAQ4R,GAAAzL,EAApF0L,KAAoF1L,EAAtE2L,oBAAsE,IAAAF,EAAxD,KAAwDA,EAAAG,EAAA5L,EAAlD6L,qBAAkD,IAAAD,GAAjC,EAAiCA,EAAAE,EAAA9L,EAA9B+L,qBAA8B,IAAAD,GAAb,EAAaA,EAE7FxE,WAAW,kBAAMtF,EAAKC,MAAMsF,OAAO,CAACmE,MAAM,KAAS,KACnD1J,EAAKC,MAAMsF,OAAO,CAACmE,MAAM,EAAMC,cAAaE,gBAAeE,qBAmC/DoB,YAAc,WACVnL,EAAKU,SAAS,CACV0K,gBAAgB,OAIxBC,YAAa,WACTrL,EAAKU,SAAS,CACV0K,gBAAgB,OAQxBE,OAAS,SAACT,GAEN7K,EAAKU,SACL,CACQ3P,KAAM,KACNqa,gBAAgB,GAE5B,WAAOpL,EAAK8K,UAAUD,QAGtBjF,qBAAuB,SAACH,GAGhBpN,GAAYoN,EAAM1U,MAElBiP,EAAKU,SACDI,aAAQ,SAAAC,GACJA,EAAMhQ,KAAO4G,GAAUoJ,EAAMhQ,MAAQ,GAAIuJ,GAAemL,EAAM1U,UAKtE8H,QAAQ+B,IAAI,2JAjEJiQ,+FACNmB,QAAQC,IAAIpB,EAAM3Z,IAAN,eAAAmN,EAAAtL,OAAAmZ,GAAA,EAAAnZ,CAAAoZ,GAAA3c,EAAA4c,KACd,SAAAC,EAAMzB,GAAN,IAAA7Z,EAAA,OAAAob,GAAA3c,EAAA8c,KAAA,SAAAC,GAAA,cAAAA,EAAAlJ,KAAAkJ,EAAA5K,MAAA,YACQiJ,EAAKlE,KAzBH,SAwBV,CAAA6F,EAAA5K,KAAA,QAEQ9I,QAAQC,KAAR,GAAAV,OAAgBwS,EAAKlN,KAArB,oBAAAtF,OAA4CwS,EAAKlE,OAFzD6F,EAAA5K,KAAA,uBAIQ0E,EAAKhB,SAAS,CAACqE,MAAM,EAAMC,YAAa,oBAJhD4C,EAAAC,GAKyBhb,WALzB+a,EAAA5K,KAAA,EAK0C,IAAI8K,SAAS7B,GAAM8B,cAL7D,OAAAH,EAAAI,GAAAJ,EAAAK,KAMYvU,GADEtH,EALd,IAAAwb,EAAAC,GAAAD,EAAAI,KAOYtG,EAAK3F,SACDI,aAAQ,SAAAC,GACJA,EAAMhQ,KAAO4G,GAAUoJ,EAAMhQ,MAAQ,GAAIuJ,GAAevJ,IACxDsV,EAAKpG,MAAMsF,QAAO,MAK1B1M,QAAQ+B,IAAI,2BAA4B9J,EAAGC,EAAKkI,MAAM,EAAG,KAE7DoN,EAAKpG,MAAMsF,OAAO,CAACmE,MAAM,IAjBjC,yBAAA6C,EAAAQ,SAAAV,EAAAjI,SADc,gBAAA4I,GAAA,OAAA3O,EAAAlG,MAAAiM,KAAAvM,YAAA,yIAyEb,IAAAyO,EAE4BlC,KAAK1E,MAA9B3O,EAFHuV,EAEGvV,KAAMqa,EAFT9E,EAES8E,eAed,OAEI7b,EAAAC,EAAAC,cAAC2d,GAAA,EAAD,CACIC,cAAY,EACZC,MAAO,CAACC,SAAU,YAElBjC,OAAQlH,KAAKkH,OACbH,YAAa/G,KAAK+G,YAClBE,YAAajH,KAAKiH,aAEjBD,GACD7b,EAAAC,EAAAC,cAAA,OAAK6d,MAxBQ,CACjBC,SAAU,WACVC,IAAK,EACLC,MAAO,EACPC,OAAQ,EACRC,KAAM,EACNC,WAAY,OACZC,WAAY,kBACZC,UAAW,SACXC,MAAO,OACPC,SAAU,SAcN,sBAIAze,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAEXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAACoX,GAAD,CAAMnE,KlB5ID,KkB4IsBvB,YlBvIf,UkBwINmD,cAAe,SAACK,EAAcC,GAAf,OAAgCrV,EAAAC,EAAAC,cAACqX,GAAD,CAAWnC,aAAcA,EAAcC,aAAcA,KACpG1E,iBAAkBkE,KAAKwB,qBACvBlW,UAAU,cACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,iDAIRH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAEXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,iCACkCH,EAAAC,EAAAC,cAAA,WADlC,kCAIAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACXH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACmX,GAAD,CAAW7V,KAAMA,iBAlJ3Bf,cCHpB8X,UAAW,SAAA9J,GAAwB,IAArB+J,EAAqB/J,EAArB+J,KAAMjD,EAAe9G,EAAf8G,SACtB,OACIvV,EAAAC,EAAAC,cAAA,UAAQqV,SAAU,SAACW,GAAD,OAAWX,EAASW,EAAM7V,OAAOuC,QAAQA,MAAO4V,GAE1D/W,MAAMC,KAAKD,MAAM,KAAK6K,QAAQ3K,IAC1B,SAAAO,GACI,IAAIhB,EAAI0N,KAAc1M,GAAG,GACzB,OAAOlC,EAAAC,EAAAC,cAAA,UAAQyC,IAAKT,EAAGU,MAAOV,GAAIhB,QAOpD4iB,GAAU,SAAAhV,GAAuC,IA8B/C4J,EAAIC,EAAIC,EA9BG9O,EAAoCgF,EAApChF,MAAOC,EAA6B+E,EAA7B/E,OAAQ8O,EAAqB/J,EAArB+J,eAI9B,OAFe9O,EAAOE,WAAanE,EAI3B9F,EAAAC,EAAAC,cAAC4U,EAAA,SAAD,KACI9U,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAf,WAA6C2J,EAA7C,KACA9J,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQqV,SAAU,SAACW,GAAD,OAAW2C,EAAe,WAAY,KAAM3C,EAAM7V,OAAOuC,QAAQA,MAAOmH,EAAOE,UAMzF7D,GAA+BzE,IAC3B,SAAAhB,GACI,OAAOX,EAAAC,EAAAC,cAAA,UAAQyC,IAAKhC,EAAEgC,IAAKC,MAAOjC,EAAEgC,KAAMhC,EAAEiC,WAKhE5C,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,cnBiEW,KmB3DnB6J,EAAOE,UACPyO,EAAK1Y,EAAAC,EAAAC,cAAC6jB,GAAD,CAAUvL,KAAMzO,EAAOvI,KAAK,GAAI+T,SAAU,SAAC3S,GAAD,OAAWiW,EAAe,OAAQ,EAAGjW,MACpF+V,EAAK3Y,EAAAC,EAAAC,cAAA,SAAOoS,KAAK,OAAO1P,MAAOmH,EAAOvI,KAAK,GAAI+T,SAAU,SAACW,GAAD,OAAW2C,EAAe,OAAQ,EAAG3C,EAAM7V,OAAOuC,UAC3GgW,EAAK,KAELF,EAAK1Y,EAAAC,EAAAC,cAAA,SAAOoS,KAAK,OAAO1P,MAAOmH,EAAOvI,KAAK,GAAI+T,SAAU,SAACW,GAAD,OAAW2C,EAAe,OAAQ,EAAG3C,EAAM7V,OAAOuC,UAC3G+V,EAAK3Y,EAAAC,EAAAC,cAAA,SAAOoS,KAAK,OAAO1P,MAAOmH,EAAOvI,KAAK,GAAI+T,SAAU,SAACW,GAAD,OAAW2C,EAAe,OAAQ,EAAG3C,EAAM7V,OAAOuC,UAC3GgW,EAAK5Y,EAAAC,EAAAC,cAAA,SAAOoS,KAAK,OAAO1P,MAAOmH,EAAOvI,KAAK,GAAI+T,SAAU,SAACW,GAAD,OAAW2C,EAAe,OAAQ,EAAG3C,EAAM7V,OAAOuC,WAI3G5C,EAAAC,EAAAC,cAAC4U,EAAA,SAAD,KACI9U,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAf,WAA6C2J,EAA7C,KACA9J,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQqV,SAAU,SAACW,GAAD,OAAW2C,EAAe,WAAY,KAAM3C,EAAM7V,OAAOuC,QAAQA,MAAOmH,EAAOE,UAE7F7D,GAA+BzE,IAC3B,SAAAhB,GACI,OAAOX,EAAAC,EAAAC,cAAA,UAAQyC,IAAKhC,EAAEgC,IAAKC,MAAOjC,EAAEgC,KAAMhC,EAAEiC,WAK5D5C,EAAAC,EAAAC,cAAA,WAAMwY,EAAG1Y,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaoG,GAAoBwD,EAAOE,UAAU,KAC1EjK,EAAAC,EAAAC,cAAA,WAAMyY,EAAG3Y,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaoG,GAAoBwD,EAAOE,UAAU,KAC1EjK,EAAAC,EAAAC,cAAA,WAAM0Y,EAAG5Y,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaoG,GAAoBwD,EAAOE,UAAU,KAC1EjK,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQqV,SAAU,SAACW,GAAD,OAAW2C,EAAe,UAAW,KAAM3C,EAAM7V,OAAOuC,QAAQA,MAAOmH,EAAOC,SAExFvI,MAAMC,KAAKD,MAAM,IAAI6K,QAAQ3K,IAAI,SAAAO,GAAC,OAAIlC,EAAAC,EAAAC,cAAA,UAAQyC,IAAKT,EAAGU,MAAOV,GAAIA,UAkC1E8hB,8MAxBXC,gBAAkB,SAACC,EAAc7K,EAAUC,EAAW1W,GAClD6N,EAAKC,MAAM6I,SAAS2K,EAAc7K,EAAUC,EAAW1W,4EAGlD,IAAAkU,EAAAjC,KAECzH,EAAWyH,KAAKnE,MAAMtD,SAE5B,OACIpN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAf,QACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAf,UACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAf,UACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAf,UACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAf,YACCqD,OAAO8I,KAAKc,GAAUzL,IAAI,SAAAO,GAAC,OACxBlC,EAAAC,EAAAC,cAACikB,GAAD,CAASxhB,IAAKT,EAAG4H,MAAO5H,EAAG6H,OAAQqD,EAASlL,GAAI2W,eAAgB,SAACQ,EAAUC,EAAW1W,GAAtB,OAAgCkU,EAAKmN,gBAAgB/hB,EAAGmX,EAAUC,EAAW1W,gBAnBhInC,aC/D3BmZ,GAAsB,OA6bbwK,8MAjaXjU,MAAQ,CACJE,OAAQ,KACRvE,YAAa,KACbU,SAAS,EACThL,KAAM,KACNkZ,eAAgB,MAMpB5E,SAAW,WAAsF,IAAArH,EAAAnG,UAAAnH,OAAA,QAAAP,IAAA0H,UAAA,GAAAA,UAAA,GAAR,GAAQ4R,GAAAzL,EAApF0L,KAAoF1L,EAAtE2L,oBAAsE,IAAAF,EAAxD,KAAwDA,EAAAG,EAAA5L,EAAlD6L,qBAAkD,IAAAD,GAAjC,EAAiCA,EAAAE,EAAA9L,EAA9B+L,qBAA8B,IAAAD,GAAb,EAAaA,EAE7FxE,WAAW,kBAAMtF,EAAKC,MAAMsF,OAAO,CAACmE,MAAM,KAAS,KACnD1J,EAAKC,MAAMsF,OAAO,CAACmE,MAAM,EAAMC,cAAaE,gBAAeE,qBAG/DC,iBAAmB,SAACnI,EAAMpJ,GACtBuH,EAAKU,SACDI,aAAQ,SAAAC,GACJ,IAAI3E,EAAI,CAAEyF,OAAMpJ,WACNsI,EAAMkJ,eAAehY,KAAKmK,GAC1B+M,IAAqBpI,EAAMkJ,eAAehS,cAKhEiS,eAAiB,SAAAzR,GACbuH,EAAKgK,iBAAiB,OAAQvR,MAGlC0R,kBAAoB,SAAA1R,GAChBuH,EAAKgK,iBAAiB,UAAWvR,MAGrC2R,gBAAkB,SAAA3R,GACduH,EAAKgK,iBAAiB,QAASvR,MAGnCmN,qBA7DJ,SAAuBC,EAAUwE,EAAcvE,GAE3C,IACIC,EADAZ,EAAW,GAGf,OAAO,WACHa,aAAaD,GACb,IAAIN,EAAQ5N,UAAU,GACtBsN,EAASlT,KAAKwT,EAAM1U,MAEpBsZ,EAAalF,EAASzU,QACtBqV,EAAUT,WAAW,WAEjBS,EAAU,KACVF,EAASV,GACTA,EAAW,IACZW,IA6CgBG,CACnB,SAAAd,GACInF,EAAKU,SACDI,aACI,SAAAC,GAAS,IAAAK,GAAA,EAAAC,GAAA,EAAAC,OAAAnR,EAAA,IACL,QAAAoR,EAAAC,EAAc2D,EAAd1D,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAwB,KAAfhF,EAAemF,EAAApP,MAChBkG,GAAY+D,GACZ2E,EAAMhQ,KAAO4G,GAAUoJ,EAAMhQ,MAAQ,GAAIuJ,GAAe8B,IAExDvD,QAAQ+B,IAAI,wCALf,MAAAoH,GAAAX,GAAA,EAAAC,EAAAU,EAAA,YAAAZ,GAAA,MAAAI,EAAAS,QAAAT,EAAAS,SAAA,WAAAZ,EAAA,MAAAC,GAQL,IAAIuL,EAAM9Z,OAAO8I,KAAKkF,EAAMhQ,KAAK6B,IAAgB,GACjDmO,EAAM1F,YAAc3J,SAASmb,EAAK,OAO9C7M,EAAKC,MAAMsF,OAAO,CAACmE,MAAM,KAE7B,SAACjZ,GAEGuP,EAAKC,MAAMsF,OAAO,CAACmE,MAAM,EAAMK,cAAetZ,KAElD,OAuCJka,aAAe,SAACvR,GACZP,QAAQ+B,IAAI,eAAgBxB,GAC5B,IAAIwR,EAAOxR,EAAExJ,OAAOib,MAAM,GAC1BhS,QAAQ+B,IAAIgQ,GACZ5K,EAAK8K,UAAU,CAACF,OAGpBG,YAAc,SAAC3R,GACXP,QAAQ+B,IAAI,cAAexB,GAC3B4G,EAAKgL,iBAAiBC,QAAQC,WAGlCC,YAAc,WACVnL,EAAKU,SAAS,CACV0K,gBAAgB,OAIxBC,YAAa,WACTrL,EAAKU,SAAS,CACV0K,gBAAgB,OAQxBE,OAAS,SAACT,GAEN7K,EAAKU,SACD,CACI3P,KAAM,KACNgL,SAAS,EACTqP,gBAAgB,GAEpB,WAAOpL,EAAK8K,UAAUD,QAI9BU,aAAe,SAAClS,GAAU,IA1KfnJ,EA4KCa,EAASiP,EAAKN,MAAd3O,KACJA,GAAQA,EAAK6B,IAAkB7B,EAAK6B,GAAeyG,GACnD2G,EAAKU,SACDI,aAAQ,SAAAC,GACJA,EAAM1F,YAAchC,MAI5B2G,EAAKU,SACDI,aAAQ,SAAAC,GACJA,EAAM1F,YAAchC,EAChBA,IAAU2G,EAAKN,MAAMrE,cACrB0F,EAAMhQ,KAAO,KACbgQ,EAAMhF,SAAU,WAxLvB5L,KADFD,EA6LOmJ,IA5Lc,OAANnJ,GAAoB,KAANA,GA+L5B8P,EAAK2F,UAAUvK,GAAc/B,GAAQrC,QAQjD4c,mBAAqB,SAACH,EAAc7K,EAAUC,EAAW1W,GAErD,IAAIjC,EAAIwB,SAASS,EAAO,IACxB6N,EAAKU,SACDI,aAAQ,SAAAC,GACa,SAAb6H,EACA7H,EAAMhQ,KAAK6B,GAAemO,EAAM1F,aAAhC,KAAqDoY,GAArD,KAA2E5K,GAAa3Y,EAExF6Q,EAAMhQ,KAAK6B,GAAemO,EAAM1F,aAAhC,KAAqDoY,GAAc7K,GAAY1Y,EAElE,aAAb0Y,IAEI7H,EAAMhQ,KAAK6B,GAAemO,EAAM1F,aAAhC,KAAqDoY,GAArD,OADAvjB,IAAMmF,EACyE,EAEA,GAGvF0L,EAAMhQ,KAAK6B,GAAemO,EAAM1F,aAAhC,KAAqDoY,GAArD,SAAgF,EAChF1S,EAAMhF,SAAU,QAK5B6P,iBAAmB,SAAClO,QAEHvN,IAATuN,GAA+B,OAATA,IACtBA,EAAKhN,OAAS,EACdmI,QAAQC,KAAR,yCAAAV,OAAsDsF,IAG1DsC,EAAKU,SACDI,aAAQ,SAAAC,GACJA,EAAMhQ,KAAK6B,GAAemO,EAAM1F,aAAhC,KAAuDqC,EACvDqD,EAAMhQ,KAAK6B,GAAemO,EAAM1F,aAAhC,SAA0D,EAC1D0F,EAAMhF,SAAU,SAK5BsE,kBAAoB,SAACQ,GACjBb,EAAKkK,eAAL,SAAA9R,OAA6BqF,GAAUoD,GAAvC,kBAGJL,qBAAuB,SAACK,GACpBb,EAAKkK,eAAL,SAAA9R,OAA6BqF,GAAUoD,GAAvC,qBAGJF,mBAAqB,SAACE,GAClBhI,QAAQ+B,IAAI,sBACZoF,EAAKU,SACDI,aAAQ,SAAAC,GACJA,EAAMnB,OAASiB,QAM3BI,sBAAwB,SAACJ,GACrBhI,QAAQ+B,IAAI,yBACZoF,EAAKU,SACDI,aAAQ,SAAAC,GACJA,EAAMnB,OAAS,QAGvBI,EAAKkK,eAAL,UAAA9R,OAA8BuF,GAAWkD,GAAzC,qBAGJ8E,UAAY,SAACzK,EAAK2O,GAEd,GADAhR,QAAQ+B,IAAI,YAAaM,EAAK2O,GACzB7J,EAAKN,MAAME,OAAhB,CAIA,IAAIuG,EAAM3I,GAAWwC,EAAKN,MAAME,QAC3BuG,GAILnG,EAAKqF,SAAS,CAACqE,MAAM,EAAMC,YAAa,oBAAqBI,cAAe,EAAGF,kBAC/E1D,EAAIR,UAAUnT,EAAiB0I,IAJ3BrC,QAAQC,KAAR,gBAAAV,OAA6B4H,EAAKN,MAAME,OAAxC,oBALA/G,QAAQC,KAAK,4CAYrB+S,YAAc,SAAC1G,GAAa,IAAAhD,GAAA,EAAAC,GAAA,EAAAC,OAAAlS,EAAA,IACxB,QAAAmS,EAAAC,EAAc4C,EAAd1D,OAAAC,cAAAS,GAAAG,EAAAC,EAAAZ,QAAAC,MAAAO,GAAA,EAAwB,KAAf/F,EAAekG,EAAAnQ,MACpB6N,EAAK2F,UAAUvJ,EAAG,IAFE,MAAA4F,GAAAI,GAAA,EAAAC,EAAAL,EAAA,YAAAG,GAAA,MAAAI,EAAAN,QAAAM,EAAAN,SAAA,WAAAG,EAAA,MAAAC,wHAvLZwI,+FACNmB,QAAQC,IAAIpB,EAAM3Z,IAAN,eAAAmN,EAAAtL,OAAAmZ,GAAA,EAAAnZ,CAAAoZ,GAAA3c,EAAA4c,KACd,SAAAC,EAAMzB,GAAN,IAAA7Z,EAAA,OAAAob,GAAA3c,EAAA8c,KAAA,SAAAC,GAAA,cAAAA,EAAAlJ,KAAAkJ,EAAA5K,MAAA,YACQiJ,EAAKlE,KA1GH,SAyGV,CAAA6F,EAAA5K,KAAA,QAEQ9I,QAAQC,KAAR,cAAAV,OAA2BwS,EAAKlN,KAAhC,oBAAAtF,OAAuDwS,EAAKlE,OAFpE6F,EAAA5K,KAAA,uBAKQ0E,EAAKhB,SAAS,CAACqE,MAAM,EAAMC,YAAa,oBALhD4C,EAAAC,GAMyBhb,WANzB+a,EAAA5K,KAAA,EAM0C,IAAI8K,SAAS7B,GAAM8B,cAN7D,OAAAH,EAAAI,GAAAJ,EAAAK,KAOYvU,GADEtH,EANd,IAAAwb,EAAAC,GAAAD,EAAAI,MAQYtG,EAAK3F,SACDI,aAAQ,SAAAC,GAEJA,EAAMhQ,KAAOuJ,GAAevJ,GAC5B,IAAI8b,EAAM9Z,OAAO8I,KAAKkF,EAAMhQ,KAAK6B,IAAgB,GACjDmO,EAAM1F,YAAc3J,SAASmb,EAAK,OAG1CxG,EAAK6D,eAAe,qBAEpB7D,EAAK8D,kBAAkB,iBACvBtR,QAAQ+B,IAAI,2BAA4B9J,EAAGC,EAAKkI,MAAM,EAAG,MAE7DoN,EAAKpG,MAAMsF,OAAO,CAACmE,MAAM,IArBjC,yBAAA6C,EAAAQ,SAAAV,EAAAjI,SADc,gBAAA4I,GAAA,OAAA3O,EAAAlG,MAAAiM,KAAAvM,YAAA,yIA6Lb,IAAAoV,EAAA7I,KAAAkC,EAE0DlC,KAAK1E,MAA5DE,EAFH0G,EAEG1G,OAAQvE,EAFXiL,EAEWjL,YAAatK,EAFxBuV,EAEwBvV,KAAMgL,EAF9BuK,EAE8BvK,QAASqP,EAFvC9E,EAEuC8E,eAExC8B,GAAa,EAEbnc,IAEAmc,GAAa,EAEPta,KAAiB7B,IACnB8H,QAAQ+B,IAAR,2BAAwC7J,GACxCmc,GAAa,IAGbA,GAAgB7R,KAAetK,EAAK6B,KAEpCsa,GAAa,IAGbA,GAAgB,SAAUnc,EAAK6B,GAAeyI,KAE9C6R,GAAa,IAIrBA,EAAaA,GAAgF,KAAjEna,OAAO8I,KAAK9K,EAAK6B,GAAeyI,GAApB,MAA0C3K,OAElF,IAAIyc,EAAiB,GACrB,GAAID,EAAY,CACZC,EAAiBzQ,GAAkCrB,EAAatK,GAChE,IAAIN,EAAI+L,GAAqBnB,EAAatK,GACtCN,GACA0c,EAAelb,KAAKxB,GAiB5B,OAEIlB,EAAAC,EAAAC,cAAC2d,GAAA,EAAD,CACIC,cAAY,EACZC,MAAO,CAACC,SAAU,YAElBjC,OAAQlH,KAAKkH,OACbH,YAAa/G,KAAK+G,YAClBE,YAAajH,KAAKiH,aAErBD,GACD7b,EAAAC,EAAAC,cAAA,OAAK6d,MAxBY,CACjBC,SAAU,WACVC,IAAK,EACLC,MAAO,EACPC,OAAQ,EACRC,KAAM,EACNC,WAAY,OACZC,WAAY,kBACZC,UAAW,SACXC,MAAO,OACPC,SAAU,SAcV,sBAIAze,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAEXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAACoX,GAAD,CAAMnE,KpBlYG,KoBkYkBvB,YpB7XX,UoB8XVmD,cAAe,SAACK,EAAcC,GAAf,OAAgCrV,EAAAC,EAAAC,cAACqX,GAAD,CAAWnC,aAAcA,EAAcC,aAAcA,KACpG1E,iBAAkBkE,KAAKwB,qBACvBvF,kBAAmB+D,KAAK/D,kBACxBG,qBAAsB4D,KAAK5D,qBAC3BG,mBAAoByD,KAAKzD,mBACzBM,sBAAuBmD,KAAKnD,sBAC5BvR,UAAU,IACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,iDAIRH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAEXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,+EACgFH,EAAAC,EAAAC,cAAA,WADhF,4EAE6EF,EAAAC,EAAAC,cAAA,WAF7E,iEAMAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACXH,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAACwe,GAAD,CAAgBld,KAAMA,EAAMkW,cAAe5L,EAAamL,QAASpC,KAAKmH,eACtEhc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACVkQ,GAAUrQ,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAc8W,QAAS,kBAAMyG,EAAKtH,UAAU1K,KnBxYnE,QmBwYK,+BACX1L,EAAAC,EAAAC,cAAA,SAAOye,IAAK9J,KAAK4G,iBAAkBnJ,KAAK,OAAOyL,MAAO,CAACa,QAAQ,QAAUrJ,SAAUV,KAAKuG,eACxFpb,EAAAC,EAAAC,cAAA,UAAQ+W,QAASpC,KAAK2G,aAAtB,8BAOPha,GAAQA,EAAK6B,GAAeyI,IAAgB9L,EAAAC,EAAAC,cAAC2e,GAAD,CAAkB1Q,KAAM3M,EAAK6B,GAAeyI,GAApB,KAA0CyN,SAAU,SAACpL,GAAD,OAAUuP,EAAKrB,iBAAiBlO,QAIhKwP,GACD3d,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAC4U,EAAA,SAAD,KACI9U,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACXH,EAAAC,EAAAC,cAACokB,GAAD,CAAoBlX,SAAU5L,EAAK6B,GAAeyI,GAApB,KACVyN,SAAU,SAAC2K,EAAc7K,EAAUC,EAAW1W,GAApC,OAA8C8a,EAAK2G,mBAAmBH,EAAc7K,EAAUC,EAAW1W,SAMlJ4J,GACDxM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAC4U,EAAA,SAAD,KACI9U,EAAAC,EAAAC,cAAA,mDACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAAS8W,QAAS,kBAAMyG,EAAKpB,YAAYsB,KAA3D,oBAOf/I,KAAKnE,MAAMuO,OAAStB,GACrB3d,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,8CACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACVyd,EAAejc,IAAI,SAACkL,EAAG3K,GAAJ,OAAUlC,EAAAC,EAAAC,cAAA,OAAKyC,IAAKT,EAAG/B,UAAU,QAAQoB,EAAGsL,mBAlZvEpM,sBCRV8jB,qNA3CXC,YAAc,SAACtO,GAEX5M,QAAQ+B,IAAIoF,EAAKC,MAAMlP,MAEvB,IAAIijB,EAAMC,OAAOC,IAAIC,gBAAgB,IAAIC,KAAK,CAACpU,EAAKC,MAAMlP,MAAO,CAAC8Q,KAAM,8BAEpEwS,EAAWrU,EAAKC,MAAMoU,SAE1B,GAAIrU,EAAKC,MAAMqU,aAAc,CACzB,IAAIC,EAAM,IAAIC,KAQdH,GAAY,KANRE,EAAIE,iBAAmB,KACtB,KAAOF,EAAIG,cAAgB,IAAIzb,OAAO,GAAK,KAC3C,IAAMsb,EAAII,cAAc1b,OAAO,GAAK,KACpC,IAAMsb,EAAIK,eAAe3b,OAAO,IAChC,IAAMsb,EAAIM,iBAAiB5b,OAAO,IAClC,IAAMsb,EAAIO,iBAAiB7b,OAAO,IAI3C,IAAI8b,EAAaC,SAASvlB,cAAc,KACxCslB,EAAWE,SAAWZ,EAAW,OACjCU,EAAWzH,MAAMa,QAAU,OAC3B4G,EAAWplB,KAAOqkB,EAElBgB,SAASE,KAAKC,YAAYJ,GAC1BA,EAAW7J,QACX8J,SAASE,KAAKE,YAAYL,GAE1BzP,WAAW,WACP,OAAO2O,OAAOC,IAAImB,gBAAgBrB,IACnC,8EAKH,OACIzkB,EAAAC,EAAAC,cAAA,UAAQ+W,QAASpC,KAAK2P,YAAarkB,UAAW0U,KAAKnE,MAAMvQ,WAAY0U,KAAKnE,MAAMqV,cAvCrEtlB,cC8BvB,IAqTeulB,eA/SX,SAAAA,EAAYtV,GAAO,IAAAD,EAAA,OAAAjN,OAAAsW,EAAA,EAAAtW,CAAAqR,KAAAmR,IACfvV,EAAAjN,OAAAuW,EAAA,EAAAvW,CAAAqR,KAAArR,OAAAwW,EAAA,EAAAxW,CAAAwiB,GAAA/L,KAAApF,KAAMnE,KAcVoF,SAAW,WAAsF,IAAArH,EAAAnG,UAAAnH,OAAA,QAAAP,IAAA0H,UAAA,GAAAA,UAAA,GAAR,GAAQ4R,GAAAzL,EAApF0L,KAAoF1L,EAAtE2L,oBAAsE,IAAAF,EAAxD,KAAwDA,EAAAG,EAAA5L,EAAlD6L,qBAAkD,IAAAD,GAAjC,EAAiCA,EAAAE,EAAA9L,EAA9B+L,qBAA8B,IAAAD,GAAb,EAAaA,EAE7FxE,WAAW,kBAAMtF,EAAKC,MAAMsF,OAAO,CAACmE,MAAM,KAAS,KACnD1J,EAAKC,MAAMsF,OAAO,CAACmE,MAAM,EAAMC,cAAaE,gBAAeE,mBAlB5C/J,EAqBnB4F,qBA/CJ,SAAuBC,EAAUwE,EAAcvE,GAE3C,IACIC,EADAZ,EAAW,GAGf,OAAO,WACHa,aAAaD,GACb,IAAIN,EAAQ5N,UAAU,GACtBsN,EAASlT,KAAKwT,EAAM1U,MAEpBsZ,EAAalF,EAASzU,QACtBqV,EAAUT,WAAW,WAEjBS,EAAU,KACVF,EAASV,GACTA,EAAW,IACZW,IA+BgBG,CACnB,SAAAd,GAEI,IAAInL,EAAQmL,EAASrK,OAAO,SAACwP,EAAaC,GAAd,OAA0BD,EAAcC,EAAQ7Z,QAAQ,GAEpFsP,EAAKU,SACDI,aACI,SAAAC,GAEIA,EAAM/G,MAAQ,IAAIxI,WAAWwI,GAC7B,IAAIyQ,EAAY,EAHXrJ,GAAA,EAAAC,GAAA,EAAAC,OAAAnR,EAAA,IAKL,QAAAoR,EAAAC,EAAc2D,EAAd1D,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAwB,KAAfhF,EAAemF,EAAApP,MAEpB4O,EAAM/G,MAAM0Q,IAAItO,EAAGqO,GACnBA,GAAarO,EAAE1L,OAEX2H,GAAY+D,GACZ2E,EAAMhQ,KAAO4G,GAAUoJ,EAAMhQ,MAAQ,GAAIuJ,GAAe8B,IAExDvD,QAAQ+B,IAAI,wCAbf,MAAAoH,GAAAX,GAAA,EAAAC,EAAAU,EAAA,YAAAZ,GAAA,MAAAI,EAAAS,QAAAT,EAAAS,SAAA,WAAAZ,EAAA,MAAAC,OAsBjBtB,EAAKC,MAAMsF,OAAO,CAACmE,MAAM,KAE7B,SAACjZ,GAEGuP,EAAKC,MAAMsF,OAAO,CAACmE,MAAM,EAAMK,cAAetZ,KAElD,KAxDeuP,EA4FnB2K,aAAe,SAACvR,GACZP,QAAQ+B,IAAI,eAAgBxB,GAC5B,IAAIwR,EAAOxR,EAAExJ,OAAOib,MAAM,GAC1BhS,QAAQ+B,IAAIgQ,GACZ5K,EAAK8K,UAAU,CAACF,KAhGD5K,EAmGnB+K,YAAc,SAAC3R,GACXP,QAAQ+B,IAAI,cAAexB,GAC3B4G,EAAKgL,iBAAiBC,QAAQC,SArGflL,EAwGnBmL,YAAc,WACVnL,EAAKU,SAAS,CACV0K,gBAAgB,KA1GLpL,EA8GnBqL,YAAa,WACTrL,EAAKU,SAAS,CACV0K,gBAAgB,KAhHLpL,EAwHnBsL,OAAS,SAACT,GAEN7K,EAAKU,SACD,CACI3P,KAAM,KACNgL,SAAS,EACTqP,gBAAgB,GAEpB,WAAOpL,EAAK8K,UAAUD,MAhIX7K,EAoInBW,mBAAqB,SAACE,GAClBb,EAAKU,SACDI,aAAQ,SAAAC,GACJA,EAAMnB,OAASiB,MAvIRb,EA4InBiB,sBAAwB,SAACJ,GACrBb,EAAKU,SACDI,aAAQ,SAAAC,GACJA,EAAMnB,OAAS,SA/IRI,EAoJnB2F,UAAY,SAACzK,EAAK2O,GAEd,GADAhR,QAAQ+B,IAAI,YAAaM,EAAK2O,GACzB7J,EAAKN,MAAME,OAAhB,CAIA,IAAIuG,EAAM3I,GAAWwC,EAAKN,MAAME,QAC3BuG,GAILnG,EAAKqF,SAAS,CAACqE,MAAM,EAAMC,YAAa,oBAAqBI,cAAe,EAAGF,kBAC/E7J,EAAKU,SACD,CAAC3P,KAAM,MACP,kBAAMoV,EAAIR,UAAUnT,EAAiB0I,MANrCrC,QAAQC,KAAR,gBAAAV,OAA6B4H,EAAKN,MAAME,OAAxC,oBALA/G,QAAQC,KAAK,0CAvJFkH,EAsKnBoG,YAAc,SAAClL,GACX8E,EAAK2F,UAAUzK,IAvKA8E,EA2KnB6L,YAAc,SAAC1G,KAzKXnF,EAAKgL,iBAAmBc,IAAMC,YAC9B/L,EAAKN,MAAQ,CACTE,OAAQ,KACR7O,KAAM,KACNiJ,MAAO,KAEPoR,gBAAgB,GARLpL,mHAgEH6K,+FACNmB,QAAQC,IAAIpB,EAAM3Z,IAAN,eAAAmN,EAAAtL,OAAAmZ,GAAA,EAAAnZ,CAAAoZ,GAAA3c,EAAA4c,KACd,SAAAC,EAAMzB,GAAN,IAAA7Z,EAAA,OAAAob,GAAA3c,EAAA8c,KAAA,SAAAC,GAAA,cAAAA,EAAAlJ,KAAAkJ,EAAA5K,MAAA,YACQiJ,EAAKlE,KAzEH,SAwEV,CAAA6F,EAAA5K,KAAA,QAEQ9I,QAAQC,KAAR,GAAAV,OAAgBwS,EAAKlN,KAArB,oBAAAtF,OAA4CwS,EAAKlE,OAFzD6F,EAAA5K,KAAA,uBAIQ0E,EAAKhB,SAAS,CAACqE,MAAM,EAAMC,YAAa,oBAJhD4C,EAAAC,GAKyBhb,WALzB+a,EAAA5K,KAAA,EAK0C,IAAI8K,SAAS7B,GAAM8B,cAL7D,OAAAH,EAAAI,GAAAJ,EAAAK,KAMYvU,GADEtH,EALd,IAAAwb,EAAAC,GAAAD,EAAAI,MAOYtG,EAAK3F,SACDI,aAAQ,SAAAC,GACJA,EAAM/G,MAAQjJ,EACdgQ,EAAMhQ,KAAO4G,GAAUoJ,EAAMhQ,MAAQ,GAAIuJ,GAAevJ,IACxDsV,EAAKpG,MAAMsF,OAAO,CAACmE,MAAM,OAOrCrD,EAAKpG,MAAMsF,OAAO,CAACmE,MAAM,IAlBjC,yBAAA6C,EAAAQ,SAAAV,EAAAjI,SADc,gBAAA4I,GAAA,OAAA3O,EAAAlG,MAAAiM,KAAAvM,YAAA,yIAqHb,IAAAoV,EAAA7I,KAAAkC,EAEoClC,KAAK1E,MAAtC3O,EAFHuV,EAEGvV,KAAM6O,EAFT0G,EAES1G,OAAQwL,EAFjB9E,EAEiB8E,eAetB,OAEI7b,EAAAC,EAAAC,cAAC2d,GAAA,EAAD,CACIC,cAAY,EACZC,MAAO,CAACC,SAAU,YAElBjC,OAAQlH,KAAKkH,OACbH,YAAa/G,KAAK+G,YAClBE,YAAajH,KAAKiH,aACjBD,GACD7b,EAAAC,EAAAC,cAAA,OAAK6d,MAvBQ,CACjBC,SAAU,WACVC,IAAK,EACLC,MAAO,EACPC,OAAQ,EACRC,KAAM,EACNC,WAAY,OACZC,WAAY,kBACZC,UAAW,SACXC,MAAO,OACPC,SAAU,SAaN,sBAIAze,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAEXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAACoX,GAAD,CAAMnE,KtB5PD,KsB4PsBvB,YtBvPf,UsBwPNmD,cAAe,SAACK,EAAcC,GAAf,OAAgCrV,EAAAC,EAAAC,cAACqX,GAAD,CAAWnC,aAAcA,EAAcC,aAAcA,KACpG1E,iBAAkBkE,KAAKwB,qBACvBjF,mBAAoByD,KAAKzD,mBACzBM,sBAAuBmD,KAAKnD,sBAC5BvR,UAAU,IACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,iDAIRH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAEXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,wCAIAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BAEXH,EAAAC,EAAAC,cAAA,wBAEAF,EAAAC,EAAAC,cAAA,WACKmQ,GAAUrQ,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAc8W,QAAS,kBAAMyG,EAAKtH,UAAU1K,KrB7P/D,QqB6PC,0BAGf1L,EAAAC,EAAAC,cAAA,WACKsB,GAAQxB,EAAAC,EAAAC,cAAC+lB,GAAD,CAAUzkB,KAAMA,EAAMsjB,SAAQ,eAAkBC,cAAc,EAAM5kB,UAAU,QAAQ4lB,MAAM,qBAK7G/lB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BAEXH,EAAAC,EAAAC,cAAA,sBAEAF,EAAAC,EAAAC,cAAA,WAEIF,EAAAC,EAAAC,cAAA,SAAOye,IAAK9J,KAAK4G,iBAAkBnJ,KAAK,OAAOyL,MAAO,CAACa,QAAQ,QAASrJ,SAAUV,KAAKuG,eACvFpb,EAAAC,EAAAC,cAAA,UAAQ+W,QAASpC,KAAK2G,aAAtB,yBAGJxb,EAAAC,EAAAC,cAAA,WACKsB,GAAQxB,EAAAC,EAAAC,cAAA,UAAQ+W,QAAS,kBAAMyG,EAAKpB,gBAA5B,yBAKjBtc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAGXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,8FAKAH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAEXsB,MAAMC,KAAKD,MAAM,IAAM6K,QAAQ3K,IAC/B,SAAAmI,GACI,IAAI4D,EAAKW,GAAgBvE,GACrBoc,EAAO1kB,GAAQA,EAAK6B,IAAkB7B,EAAK6B,GAAeyG,GAC1DqE,EAAO+X,EAAO1kB,EAAK6B,GAAeyG,GAApB,KAAqC,GAEvD,OAAc,IAAVA,EAAoB,KAGpB9J,EAAAC,EAAAC,cAAA,OAAKyC,IAAKmH,GAEN9J,EAAAC,EAAAC,cAAA,WAAMwN,GACLwY,EAAOlmB,EAAAC,EAAAC,cAAA,WAAMiO,GAAcnO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,0BAjSpDM,aCnBd0lB,GAAW,SAAA1X,GAAA,IAAGsX,EAAHtX,EAAGsX,MAAOK,EAAV3X,EAAU2X,GAAIC,EAAd5X,EAAc4X,oBAAd,OACbrmB,EAAAC,EAAAC,cAAComB,EAAA,EAAD,CACIC,KAAMH,EACNI,MAAOH,EACPrR,SAAU,SAAAlG,GAAA,IAAGyD,EAAHzD,EAAGyD,MAAH,OACNvS,EAAAC,EAAAC,cAAA,OAAKC,UAAWoS,EAAQ,qBAAuB,eAC3CvS,EAAAC,EAAAC,cAACumB,EAAA,EAAD,CAAML,GAAIA,GAAKL,QAMzBW,GAAU,kBACZ1mB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,iBA4LOwmB,8MApLXxW,MAAQ,CACJgK,MAAM,EACNC,YAAa,cACbE,eAAgB,EAEhBsM,UAAW,KAcf5Q,OAAS,WAAqF,IAAA/G,EAAA3G,UAAAnH,OAAA,QAAAP,IAAA0H,UAAA,GAAAA,UAAA,GAAP,GAAOue,EAAA5X,EAAnFkL,YAAmF,IAAA0M,KAAAC,EAAA7X,EAArEmL,mBAAqE,IAAA0M,EAAvD,KAAuDA,EAAAC,EAAA9X,EAAjDqL,qBAAiD,IAAAyM,GAAhC,EAAgCA,EAAAC,EAAA/X,EAA7BuL,qBAA6B,IAAAwM,GAAZ,EAAYA,EAItFd,EAAO/L,IAAS1J,EAAKN,MAAMgK,KAE/B+L,GADAA,EAAOA,GAAyB,OAAhB9L,GAAwBA,IAAgB3J,EAAKN,MAAMiK,cACpDE,EAAgB7J,EAAKN,MAAMmK,cAE1C,IAAIsM,EAAW,EACXpM,EAAgB,IAChBoM,EAA4E,EAAjEtY,KAAK2Y,MAAMzM,EAAgB/J,EAAKN,MAAMmK,cAAgB,IAAM,GAEvE4L,EAAOA,GAAUU,GAAY,GAAOA,IAAanW,EAAKN,MAAMyW,UAK5DV,GAEAzV,EAAKU,SACDI,aAAQ,SAAAC,GACAA,EAAM2I,OAASA,IAAM3I,EAAM2I,KAAOA,GAElB,OAAhBC,IAAsB5I,EAAM4I,YAAcA,IAEjC,IAATD,GACA3I,EAAM8I,eAAiB,EACvBsM,GAAY,IAKRtM,EAAgB,IAAG9I,EAAM8I,cAAgBA,GAIzC9I,EAAMoV,WAAaA,IACnBpV,EAAMoV,SAAWA,gFAuBhC,IAAA9P,EAAAjC,KAAAkC,EACmClC,KAAK1E,MAArCgK,EADHpD,EACGoD,KAAMC,EADTrD,EACSqD,YAAawM,EADtB7P,EACsB6P,SAErBM,EAAKC,SAAkBzC,OAAO0C,SAASC,QACvCpI,IAAQiI,EAAEjI,OAAoB,MAAZiI,EAAEjI,MAE1B,OACIjf,EAAAC,EAAAC,cAAConB,EAAA,EAAD,KACItnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UACdH,EAAAC,EAAAC,cAACqnB,GAAD,CAAUlB,qBAAqB,EAAMD,GAAG,IAAIL,MAAM,SAClD/lB,EAAAC,EAAAC,cAACqnB,GAAD,CAAUnB,GAAG,UAAUL,MAAM,oBAC7B/lB,EAAAC,EAAAC,cAACqnB,GAAD,CAAUnB,GAAG,cAAcL,MAAM,uBACjC/lB,EAAAC,EAAAC,cAACqnB,GAAD,CAAUnB,GAAG,UAAUL,MAAM,kBAC7B/lB,EAAAC,EAAAC,cAACqnB,GAAD,CAAUnB,GAAG,SAASL,MAAM,UAI5B/lB,EAAAC,EAAAC,cAACqnB,GAAD,CAAUnB,GAAG,WAAWL,MAAM,iBAC9B/lB,EAAAC,EAAAC,cAACqnB,GAAD,CAAUnB,GAAG,eAAeL,MAAM,iBACjC9G,GAASjf,EAAAC,EAAAC,cAACqnB,GAAD,CAAUnB,GAAG,cAAcL,MAAM,WACzC5L,GAAQna,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,KACTga,GAAQna,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQia,EAAawM,GAAY,GAAK5mB,EAAAC,EAAAC,cAAA,WAAM0mB,EAAN,OAC9D5mB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAf,uBAGAH,EAAAC,EAAAC,cAACsnB,EAAA,EAAD,KACIxnB,EAAAC,EAAAC,cAAComB,EAAA,EAAD,CAAOE,OAAO,EAAMD,KAAK,IAAIkB,OACzB,SAAA/W,GAAK,OACD1Q,EAAAC,EAAAC,cAACwnB,EAAD,SAGR1nB,EAAAC,EAAAC,cAAComB,EAAA,EAAD,CAAOC,KAAK,UAAUkB,OAClB,SAAA/W,GAAK,OACD1Q,EAAAC,EAAAC,cAACynB,GAAD,CAAQ3R,OAAQc,EAAKd,OAAQiJ,MAAOA,OAG5Cjf,EAAAC,EAAAC,cAAComB,EAAA,EAAD,CAAOC,KAAK,cAAckB,OACtB,SAAA/W,GAAK,OACD1Q,EAAAC,EAAAC,cAAC0nB,GAAD,CAAY5R,OAAQc,EAAKd,OAAQiJ,MAAOA,OAGhDjf,EAAAC,EAAAC,cAAComB,EAAA,EAAD,CAAOC,KAAK,UAAUkB,OAClB,SAAA/W,GAAK,OACD1Q,EAAAC,EAAAC,cAAC2nB,GAAD,CAAQ7R,OAAQc,EAAKd,OAAQiJ,MAAOA,OAiB5Cjf,EAAAC,EAAAC,cAAComB,EAAA,EAAD,CAAOC,KAAK,SAASkB,OACjB,SAAA/W,GAAK,OACD1Q,EAAAC,EAAAC,cAAC4nB,GAAD,CAAO9R,OAAQc,EAAKd,OAAQiJ,MAAOA,OAQ3Cjf,EAAAC,EAAAC,cAAComB,EAAA,EAAD,CAAOC,KAAK,WAAWkB,OACnB,SAAA/W,GAAK,OACD1Q,EAAAC,EAAAC,cAAC6nB,GAAD,CAAS/R,OAAQc,EAAKd,OAAQiJ,MAAOA,OAG7Cjf,EAAAC,EAAAC,cAAComB,EAAA,EAAD,CAAOC,KAAK,eAAekB,OACvB,SAAA/W,GAAK,OACD1Q,EAAAC,EAAAC,cAAC8nB,GAAD,CAAahS,OAAQc,EAAKd,OAAQiJ,MAAOA,OAGhDA,GACDjf,EAAAC,EAAAC,cAAComB,EAAA,EAAD,CAAOC,KAAK,cAAckB,OACtB,SAAA/W,GAAK,OACD1Q,EAAAC,EAAAC,cAAC+nB,GAAD,CAAYjS,OAAQc,EAAKd,OAAQiJ,MAAOA,OAIhDjf,EAAAC,EAAAC,cAAComB,EAAA,EAAD,CAAO4B,UAAWxB,MAG1B1mB,EAAAC,EAAAC,cAACioB,GAAD,eA7KF1nB,aCvBE2nB,QACW,cAA7B1D,OAAO0C,SAASiB,UAEe,UAA7B3D,OAAO0C,SAASiB,UAEhB3D,OAAO0C,SAASiB,SAAS9V,MACvB,2DCZN,SAAS+V,MAELhf,QAAQ+B,IAAMid,GACdhf,QAAQC,KAAO+e,GACfhf,QAAQif,MAAQD,GAGpBE,IAASf,OAAOznB,EAAAC,EAAAC,cAACuoB,GAAD,MAAShD,SAASiD,eAAe,SDgH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c57d7c96.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport \"./Home.css\";\n\nclass Home extends Component {\n\n    render() {\n\n        return (\n            <div className=\"content\">\n\n                <h1>Requirements</h1>\n\n                <div className=\"doc\">\n                    <p>This application requires a browser that support\n                        the <a href=\"http://webaudio.github.io/web-midi-api/\" target=\"_blank\" rel=\"noopener noreferrer\">Web MIDI API</a>.</p>\n\n                    <p>Currently, only <span className=\"strong\">Chrome</span> and <span className=\"strong\">Opera</span> support this standard.\n                        This application will therefore <span className=\"italic\">not</span> work in Firefox, Safari, IE or Edge.</p>\n                </div>\n\n                <h1>Limitations</h1>\n\n                <div className=\"doc\">\n                    <p>The current version of this editor isn't able to edit the Global configuration of the Pacer.</p>\n                    <p>This editor does not offer patches management either.</p>\n                </div>\n\n                <h1>Usage</h1>\n                <div className=\"doc\">\n                    <p>Make sure your Pacer is connected to your computer and switched-on.</p>\n                    <p>On the upper right corner of the editor, check the MIDI settings.</p>\n                    <p>You need to enable the following input and output ports:</p>\n                    <p>- under <span className=\"bold\" >OS X</span>:</p>\n                    <img src=\"help-ports-osx-no-retina.png\" alt=\"\" />\n                    <p>- under <span className=\"bold\" >Windows</span>:</p>\n                    <img src=\"help-ports-windows.png\" alt=\"\" />\n\n                    <p className=\"strong\">Editing presets</p>\n                    <p>The preset #0 is the <span className=\"italic\">current</span> preset.\n                        When you edit preset #0 your changes are immediately applied.</p>\n                    <p>When you edit any other presets, your changes will only be applied when you load this preset.</p>\n\n                    <p className=\"strong\">In case of problem</p>\n                    <ol>\n                        <li>Restart your Pacer</li>\n                        <li>Reload the editor</li>\n                    </ol>\n                </div>\n\n                <h1>MIDI in your browser</h1>\n\n                <div className=\"doc\">\n                    <div>\n                        <p>You need to allow your browser to use your MIDI device:</p>\n                        <img src=\"help-01.png\" alt=\"\" />\n                    </div>\n                    <div>\n                        <p>In case you didn't allow the use of MIDI device and want to change that, you can right-click on the URL icon and change the setting:</p>\n                        <img src=\"help-02.png\" alt=\"\" />\n                    </div>\n                </div>\n\n                <h1>FAQ</h1>\n\n                <div className=\"doc\">\n                    <p><i>To be completed...</i></p>\n                </div>\n\n                <h1>Contribute</h1>\n\n                <div className=\"doc\">\n                    <p>This editor is an Open Source project. You are welcome to contribute.</p>\n                    <p>The source-code is hosted\n                    by GitHub: <a href=\"https://github.com/francoisgeorgy/pacer-editor\" target=\"_blank\" rel=\"noopener noreferrer\">pacer-editor</a></p>\n                    <p>To contribute your bug fixes, new features, etc.: 1) fork the project, 2) create a pull-request.</p>\n                </div>\n\n                <h1>Thanks</h1>\n\n                <div className=\"doc\">\n                    Thank you to the Nektar support service for having provided precious informations regarding the SysEx data format of the Pacer.\n                    This editor would not have been possible without their support.\n                </div>\n\n            </div>\n        );\n    }\n\n}\n\nexport default Home;\n","\n/*\nString.prototype.padZero = function (len, c) {\n    var s = '', c = c || '0', len = (len || 2) - this.length;\n    while (s.length < len) s += c;\n    return s + this;\n};\n*/\n\nexport const padZero = (str, len, char) => {\n    let s = '';\n    let c = char || '0';\n    let n = (len || 2) - str.length;\n    while (s.length < n) s += c;\n    return s + str;\n};\n\nexport const h = v => {\n    return (v === null || v === undefined) ? \"\" : padZero(v.toString(16).toUpperCase(), 2);\n};\n\nexport const hs = data => (data === null || data === undefined) ? \"\" : (Array.from(data).map(n => h(n))).join(\" \");    // Array.from() is necessary to get a non-typed array\n\n\n/**\n *\n * @param string\n * @param sep\n * @returns {*}\n */\nexport const fromHexString = function(string, sep) {\n    let s = sep ? string.replace(sep, '') : string;\n    if ((s.length % 2) > 0) {\n        return null;\n    }\n    if (s.length === 0) return null;\n    let a = new Uint8Array(s.length / 2);\n    for (let i=0; i < (s.length / 2); i++) {\n        a[i] = parseInt(s.substr(i * 2, 2), 16);\n    }\n    return a;\n};\n","export function sortObject(obj) {\n    let arr = [];\n    for (let prop in obj) {\n        if (obj.hasOwnProperty(prop)) {\n            arr.push({\n                'key': prop,\n                'value': obj[prop]\n            });\n        }\n    }\n    arr.sort((a, b) => a.value.localeCompare(b.value));\n    return arr;\n}\n","import {sortObject} from \"../utils/misc\";\n\nexport const ANY_MIDI_PORT = \".*\";\n\n// export const PACER_MIDI_PORT_NAME = \"vmpk.*\";            // DEBUG\n// export const PACER_MIDI_INPUT_PORT_NAME = \"vmpk.*\";      // DEBUG\n// export const PACER_MIDI_OUTPUT_PORT_NAME = \"vmpk.*\";     // DEBUG\nexport const PACER_MIDI_PORT_NAME = \"Pacer.*\";          // can be a regex\nexport const PACER_MIDI_INPUT_PORT_NAME = \"Pacer.*\";\nexport const PACER_MIDI_OUTPUT_PORT_NAME = \"Pacer.*\";\n\nexport const SYSEX_SIGNATURE = [0x00, 0x01, 0x77];\nexport const SYSEX_HEADER = [0x7F];\n\nexport const COMMAND_SET = 0x01;\nexport const COMMAND_GET = 0x02;\n\nexport const TARGET_PRESET = 0x01;\nexport const TARGET_GLOBAL = 0x05;\nexport const TARGET_BACKUP = 0x07;\n\nexport const TARGETS = {\n    [TARGET_PRESET]: \"preset\",\n    [TARGET_GLOBAL]: \"global\",\n    [TARGET_BACKUP]: \"full backup\"\n};\n\nexport const CONTROL_NAME = 0x01;\nexport const CONTROL_STOMPSWITCH_1 = 0x0D;\nexport const CONTROL_STOMPSWITCH_2 = 0x0E;\nexport const CONTROL_STOMPSWITCH_3 = 0x0F;\nexport const CONTROL_STOMPSWITCH_4 = 0x10;\nexport const CONTROL_STOMPSWITCH_5 = 0x11;\nexport const CONTROL_STOMPSWITCH_6 = 0x12;\nexport const CONTROL_RESERVED = 0x13;\nexport const CONTROL_STOMPSWITCH_A = 0x14;\nexport const CONTROL_STOMPSWITCH_B = 0x15;\nexport const CONTROL_STOMPSWITCH_C = 0x16;\nexport const CONTROL_STOMPSWITCH_D = 0x17;\nexport const CONTROL_FOOTSWITCH_1 = 0x18;\nexport const CONTROL_FOOTSWITCH_2 = 0x19;\nexport const CONTROL_FOOTSWITCH_3 = 0x1A;\nexport const CONTROL_FOOTSWITCH_4 = 0x1B;\nexport const CONTROL_EXPRESSION_PEDAL_1 = 0x36;\nexport const CONTROL_EXPRESSION_PEDAL_2 = 0x37;\nexport const CONTROL_MIDI = 0x7E;\nexport const CONTROL_ALL = 0x7F;\n\n// objects:\nexport const CONTROLS = {\n    [CONTROL_NAME]: \"name\",\n    [CONTROL_STOMPSWITCH_1]: \"1\",\n    [CONTROL_STOMPSWITCH_2]: \"2\",\n    [CONTROL_STOMPSWITCH_3]: \"3\",\n    [CONTROL_STOMPSWITCH_4]: \"4\",\n    [CONTROL_STOMPSWITCH_5]: \"5\",\n    [CONTROL_STOMPSWITCH_6]: \"6\",\n    [CONTROL_RESERVED]: \"RESERVED\",\n    [CONTROL_STOMPSWITCH_A]: \"A\",\n    [CONTROL_STOMPSWITCH_B]: \"B\",\n    [CONTROL_STOMPSWITCH_C]: \"C\",\n    [CONTROL_STOMPSWITCH_D]: \"D\",\n    [CONTROL_FOOTSWITCH_1]: \"FS 1\",\n    [CONTROL_FOOTSWITCH_2]: \"FS 2\",\n    [CONTROL_FOOTSWITCH_3]: \"FS 3\",\n    [CONTROL_FOOTSWITCH_4]: \"FS 4\",\n    [CONTROL_EXPRESSION_PEDAL_1]: \"EXP 1\",\n    [CONTROL_EXPRESSION_PEDAL_2]: \"EXP 2\",\n    [CONTROL_MIDI]: \"MIDI configuration\",\n    [CONTROL_ALL]: \"ALL\"\n};\n\nexport const CONTROLS_FULLNAME = {\n    0x01: \"Preset Name\",\n    0x0D: \"Stompswitch 1\",\n    0x0E: \"Stompswitch 2\",\n    0x0F: \"Stompswitch 3\",\n    0x10: \"Stompswitch 4\",\n    0x11: \"Stompswitch 5\",\n    0x12: \"Stompswitch 6\",\n    0x13: \"RESERVED\",\n    0x14: \"Stompswitch A\",\n    0x15: \"Stompswitch B\",\n    0x16: \"Stompswitch C\",\n    0x17: \"Stompswitch D\",\n    0x18: \"Footswitch 1\",\n    0x19: \"Footswitch  2\",\n    0x1A: \"Footswitch  3\",\n    0x1B: \"Footswitch  4\",\n    0x36: \"Expression Pedal 1\",\n    0x37: \"Expression Pedal 2\",\n    0x7E: \"MIDI configuration\",\n    0x7F: \"ALL\"\n};\n\n// subsets of CONTROLS keys:\nexport const STOMPSWITCHES = [0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x14, 0x15, 0x16, 0x17];\nexport const STOMPSWITCHES_TOP = [0x14, 0x15, 0x16, 0x17];\nexport const STOMPSWITCHES_BOTTOM = [0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12];\nexport const FOOTSWITCHES = [0x18, 0x19, 0x1A, 0x1B];\nexport const EXPPEDALS = [0x36, 0x37];\n\n// message types:\nexport const MSG_AD_MIDICC = 0x00;\nexport const MSG_AD_NRPNC = 0x03;\nexport const MSG_AD_NRPNF = 0x04;\nexport const MSG_AD_PITCH = 0x01;\nexport const MSG_AD_ATCHAN = 0x02;\nexport const MSG_DAWFUNC = 0x7E;\nexport const MSG_CTRL_OFF = 0x61;\n\nexport const MSG_SW_MIDI_CC_TGGLE = 0x47;\nexport const MSG_SW_MIDI_CC = 0x40;\nexport const MSG_SW_MIDI_CC_STEP = 0x48;\nexport const MSG_SW_NOTE = 0x43;\nexport const MSG_SW_NOTE_TGGLE = 0x44;\nexport const MSG_SW_PRG_BANK = 0x45;\nexport const MSG_SW_PRG_STEP = 0x46;\nexport const MSG_SW_NRPN_COARSE = 0x57;\nexport const MSG_SW_NRPN_FINE = 0x58;\nexport const MSG_SW_MMC = 0x55;\nexport const MSG_SW_RELAY = 0x59;\nexport const MSG_SW_PRESET_SELECT = 0x62;\nexport const MSG_SW_PRESET_INC_DEC = 0x56;\nexport const MSG_SW_STEP_SELECT = 0x63;\nexport const MSG_SW_STEP_INC_DEC = 0x64;\n\nexport const MSG_ENC_CC = 0x12;\nexport const MSG_ENC_MIDICC_REL = 0x11;\nexport const MSG_ENC_NRPNC = 0x15;\nexport const MSG_ENC_NRPNF = 0x16;\nexport const MSG_ENC_PITCH = 0x13;\nexport const MSG_ENC_ATCHAN = 0x14;\nexport const MSG_ENC_PROGRAM = 0x10;\nexport const MSG_ENC_PRESETSELECT = 0x17;\nexport const MSG_ENC_STEPSELECT = 0x18;\n\nexport const MSG_LOAD_CC = 0x65;\n\nexport const MSG_TYPES = {\n\n    [MSG_AD_MIDICC]: \"CC\",\n    [MSG_AD_NRPNC]: \"NRPN C\",\n    [MSG_AD_NRPNF]: \"NRPN F\",\n    [MSG_AD_PITCH]: \"PITCH\",\n    [MSG_AD_ATCHAN]: \"AT CHAN\",\n    [MSG_DAWFUNC]: \"DAW FUNC\",\n    [MSG_CTRL_OFF]: \"CTRL_OFF\",\n\n    [MSG_SW_MIDI_CC_TGGLE]: \"CC TOGGLE\",\n    [MSG_SW_MIDI_CC]: \"CC\",\n    [MSG_SW_MIDI_CC_STEP]: \"CC STEP\",\n    [MSG_SW_NOTE]: \"NOTE\",\n    [MSG_SW_NOTE_TGGLE]: \"NOTE TOGGLE\",\n    [MSG_SW_PRG_BANK]: \"PRG BANK\",\n    [MSG_SW_PRG_STEP]: \"PRG STEP\",\n    [MSG_SW_NRPN_COARSE]: \"NRPN COARSE\",\n    [MSG_SW_NRPN_FINE]: \"NRPN FINE\",\n    [MSG_SW_MMC]: \"MMC\",\n    [MSG_SW_RELAY]: \"RELAY\",\n    [MSG_SW_PRESET_SELECT]: \"PRESET SELECT\",\n    [MSG_SW_PRESET_INC_DEC]: \"PRESET INC DEC\",\n    [MSG_SW_STEP_SELECT]: \"STEP SELECT\",\n    [MSG_SW_STEP_INC_DEC]: \"STEP INC DEC\",\n\n    [MSG_ENC_CC]: \"CC\",\n    [MSG_ENC_MIDICC_REL]: \"CC REL\",\n    [MSG_ENC_NRPNC]: \"NRPN C\",\n    [MSG_ENC_NRPNF]: \"NRPN F\",\n    [MSG_ENC_PITCH]: \"PITCH\",\n    [MSG_ENC_ATCHAN]: \"AT CHAN\",\n    [MSG_ENC_PROGRAM]: \"PRG\",\n    [MSG_ENC_PRESETSELECT]: \"PRESET SEL\",\n    [MSG_ENC_STEPSELECT]: \"STEP SEL\",\n\n    [MSG_LOAD_CC]: \"CC\"\n};\n\n// Message types for stompswitches\nexport const MSG_TYPES_FULLNAME_SW = {\n    [MSG_CTRL_OFF]: \"OFF\",\n    [MSG_SW_MIDI_CC_TGGLE]: \"CC Toggle\",\n    [MSG_SW_MIDI_CC]: \"CC Trigger\",\n    [MSG_SW_MIDI_CC_STEP]: \"CC Step\",\n    [MSG_SW_NOTE]: \"Note\",\n    [MSG_SW_NOTE_TGGLE]: \"Note Toggle\",\n    [MSG_SW_PRG_BANK]: \"Program & Bank\",\n    [MSG_SW_PRG_STEP]: \"Program Step\",\n    [MSG_SW_NRPN_COARSE]: \"NRPN Coarse\",\n    [MSG_SW_NRPN_FINE]: \"NRPN Fine\",\n    [MSG_SW_MMC]: \"MIDI Machine Control\",\n    [MSG_SW_RELAY]: \"Relay Outputs\",\n    [MSG_SW_PRESET_SELECT]: \"Preset Select\",\n    [MSG_SW_PRESET_INC_DEC]: \"Preset Inc/Dec\",\n    [MSG_SW_STEP_SELECT]: \"Step Select\",\n    [MSG_SW_STEP_INC_DEC]: \"Step Inc/Dec\"\n};\n\nexport const MSG_TYPES_FULLNAME_SW_SORTED = sortObject(MSG_TYPES_FULLNAME_SW);\n\n\nexport const MSG_TYPES_FULLNAME_ENC = {\n    [MSG_ENC_CC]: \"CC\",\n    [MSG_ENC_MIDICC_REL]: \"CC REL\",\n    [MSG_ENC_NRPNC]: \"NRPN Coarse\",\n    [MSG_ENC_NRPNF]: \"NRPN Fine\",\n    [MSG_ENC_PITCH]: \"Pitch Bend\",\n    [MSG_ENC_ATCHAN]: \"AT Chan.\",\n    [MSG_ENC_PROGRAM]: \"Program\",\n    [MSG_ENC_PRESETSELECT]: \"Preset Sel\",\n    [MSG_ENC_STEPSELECT]: \"Step Sel\"\n};\n\n\n// Preset Midi Settings\nexport const MSG_TYPES_FULLNAME_MIDI = {\n    [MSG_LOAD_CC]: \"Load CC\",\n    [MSG_SW_NOTE]: \"MIDI Note\",\n    [MSG_SW_PRG_BANK]: \"Program & Bank\",\n    [MSG_SW_NRPN_COARSE]: \"NRPN Coarse\",\n    [MSG_SW_NRPN_FINE]: \"NRPN Fine\",\n    [MSG_SW_MMC]: \"MIDI Machine Control\",\n    [MSG_SW_RELAY]: \"Relay Outputs\",\n    [MSG_DAWFUNC]: \"DAW Func.\",\n    [MSG_CTRL_OFF]: \"OFF\"\n};\n\nexport const MSG_TYPES_FULLNAME_MIDI_SORTED = sortObject(MSG_TYPES_FULLNAME_MIDI);\n\nexport const MSG_TYPES_DATA_HELP = {\n\n    [MSG_AD_MIDICC]: [\"\", \"\", \"\"],\n    [MSG_AD_NRPNC]: [\"\", \"\", \"\"],\n    [MSG_AD_NRPNF]: [\"\", \"\", \"\"],\n    [MSG_AD_PITCH]: [\"\", \"\", \"\"],\n    [MSG_AD_ATCHAN]: [\"\", \"\", \"\"],\n    [MSG_DAWFUNC]: [\"function\", \"not used\", \"not used\"],\n    [MSG_CTRL_OFF]: [\"\", \"\", \"\"],\n\n    [MSG_SW_MIDI_CC_TGGLE]: [\"controller\", \"value 1\", \"value 2\"],\n    [MSG_SW_MIDI_CC]: [\"controller\", \"down\", \"up\"],\n    [MSG_SW_MIDI_CC_STEP]: [\"controller\", \"start\", \"end\"],\n    [MSG_SW_NOTE]: [\"note\", \"velocity\", \"not used\"],\n    [MSG_SW_NOTE_TGGLE]: [\"note\", \"velocity\", \"not used\"],\n    [MSG_SW_PRG_BANK]: [\"program\", \"bank LSB\", \"bank MSB\"],\n    [MSG_SW_PRG_STEP]: [\"not used\", \"start\", \"end\"],\n    [MSG_SW_NRPN_COARSE]: [\"value\", \"NRPN LSB\", \"NRPN MSB\"],\n    [MSG_SW_NRPN_FINE]: [\"value\", \"NRPN LSB\", \"NRPN MSB\"],\n    [MSG_SW_MMC]: [\"device\", \"command\", \"not used\"],\n    [MSG_SW_RELAY]: [\"mode\", \"relay #\", \"not used\"],\n    [MSG_SW_PRESET_SELECT]: [\"preset\", \"not used\", \"not used\"],\n    [MSG_SW_PRESET_INC_DEC]: [\"inc/dec\", \"not used\", \"not used\"],\n    [MSG_SW_STEP_SELECT]: [\"target\", \"step\", \"not used\"],\n    [MSG_SW_STEP_INC_DEC]: [\"target\", \"inc/dec\", \"not used\"],\n\n    [MSG_ENC_CC]: [\"\", \"\", \"\"],\n    [MSG_ENC_MIDICC_REL]: [\"\", \"\", \"\"],\n    [MSG_ENC_NRPNC]: [\"\", \"\", \"\"],\n    [MSG_ENC_NRPNF]: [\"\", \"\", \"\"],\n    [MSG_ENC_PITCH]: [\"\", \"\", \"\"],\n    [MSG_ENC_ATCHAN]: [\"\", \"\", \"\"],\n    [MSG_ENC_PROGRAM]: [\"\", \"\", \"\"],\n    [MSG_ENC_PRESETSELECT]: [\"\", \"\", \"\"],\n    [MSG_ENC_STEPSELECT]: [\"\", \"\", \"\"],\n\n    [MSG_LOAD_CC]: [\"controller\", \"value\", \"not used\"]\n};\n\n/*\nexport const CONTROL_ELEMENT = {\n    // 0x00: \"\",\n    0x01: \"step 1: channel\",\n    0x02: \"step 1: message type\",\n    0x03: \"step 1: data 1\",\n    0x04: \"step 1: data 2\",\n    0x05: \"step 1: data 3\",\n    0x06: \"step 1: step active\",\n\n    0x07: \"step 2: channel\",\n    0x08: \"step 2: message type\",\n    0x09: \"step 2: data 1\",\n    0x0A: \"step 2: data 2\",\n    0x0B: \"step 2: data 3\",\n    0x0C: \"step 2: step active\",\n\n    0x0D: \"step 3: channel\",\n    0x0E: \"step 3: message type\",\n    0x0F: \"step 3: data 1\",\n    0x10: \"step 3: data 2\",\n    0x11: \"step 3: data 3\",\n    0x12: \"step 3: step active\",\n\n    0x13: \"step 4: channel\",\n    0x14: \"step 4: message type\",\n    0x15: \"step 4: data 1\",\n    0x16: \"step 4: data 2\",\n    0x17: \"step 4: data 3\",\n    0x18: \"step 4: step active\",\n\n    0x19: \"step 5: channel\",\n    0x1A: \"step 5: message type\",\n    0x1B: \"step 5: data 1\",\n    0x1C: \"step 5: data 2\",\n    0x1D: \"step 5: data 3\",\n    0x1E: \"step 5: step active\",\n\n    0x1F: \"step 6: channel\",\n    0x20: \"step 6: message type\",\n    0x21: \"step 6: data 1\",\n    0x22: \"step 6: data 2\",\n    0x23: \"step 6: data 3\",\n    0x24: \"step 6: step active\",\n\n    // 0x25: \"\",\n    // 0x26: \"\",\n    // 0x27: \"\",\n    // 0x28: \"\",\n    // 0x29: \"\",\n    // 0x2A: \"\",\n    // 0x2B: \"\",\n    // 0x2C: \"\",\n    // 0x2D: \"\",\n    // 0x2E: \"\",\n    // 0x2F: \"\",\n    // 0x30: \"\",\n    // 0x31: \"\",\n    // 0x32: \"\",\n    // 0x33: \"\",\n    // 0x34: \"\",\n    // 0x35: \"\",\n    // 0x36: \"\",\n    // 0x37: \"\",\n    // 0x38: \"\",\n    // 0x39: \"\",\n    // 0x3A: \"\",\n    // 0x3B: \"\",\n    // 0x3C: \"\",\n    // 0x3D: \"\",\n    // 0x3E: \"\",\n    // 0x3F: \"\",\n    // 0x40: \"\",\n    // 0x41: \"\",\n    // 0x42: \"\",\n    // 0x43: \"\",\n\n    0x40: \"control mode\",\n    0x41: \"LED MIDI Ctrl\",\n    0x42: \"LED On Color\",\n    0x43: \"LED Off Color\",\n\n    // 0x44: \"\",\n    // 0x45: \"\",\n    // 0x46: \"\",\n    // 0x47: \"\",\n    // 0x48: \"\",\n    // 0x49: \"\",\n    // 0x4A: \"\",\n    // 0x4B: \"\",\n    // 0x4C: \"\",\n    // 0x4D: \"\",\n    // 0x4E: \"\",\n    // 0x4F: \"\",\n    // 0x50: \"\",\n    // 0x51: \"\",\n    // 0x52: \"\",\n    // 0x53: \"\",\n    // 0x54: \"\",\n    // 0x55: \"\",\n    // 0x56: \"\",\n    // 0x57: \"\",\n    // 0x58: \"\",\n    // 0x59: \"\",\n    // 0x5A: \"\",\n    // 0x5B: \"\",\n    // 0x5C: \"\",\n    // 0x5D: \"\",\n    // 0x5E: \"\",\n    // 0x5F: \"\",\n\n    // 0x60: \"control mode\",\n    // 0x61: \"LED MIDI Ctrl\",\n    // 0x62: \"LED On Color\",\n    // 0x63: \"LED Off Color\",\n\n    // 0x64: \"\",\n    // 0x65: \"\",\n    // 0x66: \"\",\n    // 0x67: \"\",\n    // 0x68: \"\",\n    // 0x69: \"\",\n    // 0x6A: \"\",\n    // 0x6B: \"\",\n    // 0x6C: \"\",\n    // 0x6D: \"\",\n    // 0x6E: \"\",\n    // 0x6F: \"\",\n    // 0x70: \"\",\n    // 0x71: \"\",\n    // 0x72: \"\",\n    // 0x73: \"\",\n    // 0x74: \"\",\n    // 0x75: \"\",\n    // 0x76: \"\",\n    // 0x77: \"\",\n    // 0x78: \"\",\n    // 0x79: \"\",\n    // 0x7A: \"\",\n    // 0x7B: \"\",\n    // 0x7C: \"\",\n    // 0x7D: \"\",\n    // 0x7E: \"\",\n\n    0x7F: \"ALL\"\n};\n*/\n\nexport const MIDI_ELEMENT = {\n    // 0x00: \"\",\n    0x01: \"setting 1: channel\",\n    0x02: \"setting 1: message type\",\n    0x03: \"setting 1: data 1\",\n    0x04: \"setting 1: data 2\",\n    0x05: \"setting 1: data 3\",\n    // 0x06: \"\",\n\n    0x07: \"setting 2: channel\",\n    0x08: \"setting 2: message type\",\n    0x09: \"setting 2: data 1\",\n    0x0A: \"setting 2: data 2\",\n    0x0B: \"setting 2: data 3\",\n    // 0x0C: \"\",\n\n    0x0D: \"setting 3: channel\",\n    0x0E: \"setting 3: message type\",\n    0x0F: \"setting 3: data 1\",\n    0x10: \"setting 3: data 2\",\n    0x11: \"setting 3: data 3\",\n    // 0x12: \"\",\n\n    0x13: \"setting 4: channel\",\n    0x14: \"setting 4: message type\",\n    0x15: \"setting 4: data 1\",\n    0x16: \"setting 4: data 2\",\n    0x17: \"setting 4: data 3\",\n    // 0x18: \"\",\n\n    0x19: \"setting 5: channel\",\n    0x1A: \"setting 5: message type\",\n    0x1B: \"setting 5: data 1\",\n    0x1C: \"setting 5: data 2\",\n    0x1D: \"setting 5: data 3\",\n    // 0x1E: \"\",\n\n    0x1F: \"setting 6: channel\",\n    0x20: \"setting 6: message type\",\n    0x21: \"setting 6: data 1\",\n    0x22: \"setting 6: data 2\",\n    0x23: \"setting 6: data 3\",\n    // 0x24: \"\",\n\n    0x25: \"setting 7: channel\",\n    0x26: \"setting 7: message type\",\n    0x27: \"setting 7: data 1\",\n    0x28: \"setting 7: data 2\",\n    0x29: \"setting 7: data 3\",\n    // 0x2A: \"\",\n\n    0x2B: \"setting 8: channel\",\n    0x2C: \"setting 8: message type\",\n    0x2D: \"setting 8: data 1\",\n    0x2E: \"setting 8: data 2\",\n    0x2F: \"setting 8: data 3\",\n    0x30: \"\",\n\n    0x31: \"setting 9: channel\",\n    0x32: \"setting 9: message type\",\n    0x33: \"setting 9: data 1\",\n    0x34: \"setting 9: data 2\",\n    0x35: \"setting 9: data 3\",\n    // 0x36: \"\",\n\n    0x37: \"setting 10: channel\",\n    0x38: \"setting 10: message type\",\n    0x39: \"setting 10: data 1\",\n    0x3A: \"setting 10: data 2\",\n    0x3B: \"setting 10: data 3\",\n    // 0x3C: \"\",\n\n    0x3D: \"setting 11: channel\",\n    0x3E: \"setting 11: message type\",\n    0x3F: \"setting 11: data 1\",\n    0x40: \"setting 11: data 2\",\n    0x41: \"setting 11: data 3\",\n    // 0x42: \"\",\n\n    0x43: \"setting 12: channel\",\n    0x44: \"setting 12: message type\",\n    0x45: \"setting 12: data 1\",\n    0x46: \"setting 12: data 2\",\n    0x47: \"setting 12: data 3\",\n    // 0x48: \"\",\n\n    0x49: \"setting 13: channel\",\n    0x4A: \"setting 13: message type\",\n    0x4B: \"setting 13: data 1\",\n    0x4C: \"setting 13: data 2\",\n    0x4D: \"setting 13: data 3\",\n    // 0x4E: \"\",\n\n    0x4F: \"setting 14: channel\",\n    0x50: \"setting 14: message type\",\n    0x51: \"setting 14: data 1\",\n    0x52: \"setting 14: data 2\",\n    0x53: \"setting 14: data 3\",\n    // 0x54: \"\",\n\n    0x55: \"setting 15: channel\",\n    0x56: \"setting 15: message type\",\n    0x57: \"setting 15: data 1\",\n    0x58: \"setting 15: data 2\",\n    0x59: \"setting 15: data 3\",\n    // 0x5A: \"\",\n\n    0x5B: \"setting 16: channel\",\n    0x5C: \"setting 16: message type\",\n    0x5D: \"setting 16: data 1\",\n    0x5E: \"setting 16: data 2\",\n    0x5F: \"setting 16: data 3\",\n    // 0x60: \"\",\n\n    // 0x61: \"\",\n    // 0x62: \"\",\n    // 0x63: \"\",\n    // 0x64: \"\",\n    // 0x65: \"\",\n    // 0x66: \"\",\n    // 0x67: \"\",\n    // 0x68: \"\",\n    // 0x69: \"\",\n    // 0x6A: \"\",\n    // 0x6B: \"\",\n    // 0x6C: \"\",\n    // 0x6D: \"\",\n    // 0x6E: \"\",\n    // 0x6F: \"\",\n    // 0x70: \"\",\n    // 0x71: \"\",\n    // 0x72: \"\",\n    // 0x73: \"\",\n    // 0x74: \"\",\n    // 0x75: \"\",\n    // 0x76: \"\",\n    // 0x77: \"\",\n    // 0x78: \"\",\n    // 0x79: \"\",\n    // 0x7A: \"\",\n    // 0x7B: \"\",\n    // 0x7C: \"\",\n    // 0x7D: \"\",\n    // 0x7E: \"\",\n\n    0x7F: \"ALL\"\n};\n\nexport const COLORS = {\n    0x00 : \"Off\",\n    0x01 : \"1A Pink\",\n    0x02 : \"1B Dim Pink\",\n    0x03 : \"2A Red\",\n    0x04 : \"2B Dim Red\",\n    0x05 : \"3A Orange\",\n    0x06 : \"3B Dim Orange\",\n    0x07 : \"4A Amber\",\n    0x08 : \"4B Dim Amber\",\n    0x09 : \"5A Yellow\",\n    0x0A : \"5B Dim Yellow\",\n    0x0B : \"6A Lime\",\n    0x0C : \"6B Dim Lime\",\n    0x0D : \"7A Green\",\n    0x0E : \"7B Dim Green\",\n    0x0F : \"8A Teal\",\n    0x10 : \"8B Dim Teal\",\n    0x11 : \"9A Blue\",\n    0x12 : \"9B Dim Blue\",\n    0x13 : \"10A Lavender\",\n    0x14 : \"10B Dim Lavender\",\n    0x15 : \"11A Purple\",\n    0x16 : \"11B Dim Purple\",\n    0x17 : \"12A White\",\n    0x18 : \"12B Dim White\",\n};\n\nexport const CONTROL_MODE_ELEMENT = 0x60;\n\nexport const CONTROL_MODE_ALL = 0x00;\nexport const CONTROL_MODE_EXT_STEP = 0x01;\nexport const CONTROL_MODE_SEQUENCE = 0x02;\n\nexport const CONTROL_MODES = {\n    [CONTROL_MODE_ALL]: \"All\",\n    [CONTROL_MODE_EXT_STEP]: \"External Step Select\",\n    [CONTROL_MODE_SEQUENCE]: \"Sequence\",\n};\n","import {NEKTAR_TECHNOLOGY_INC} from \"midi-manufacturers\";\nimport {h, hs} from \"../utils/hexstring\";\nimport {\n    COMMAND_GET,\n    COMMAND_SET,\n    CONTROL_ALL,\n    CONTROL_EXPRESSION_PEDAL_1,\n    CONTROL_EXPRESSION_PEDAL_2,\n    CONTROL_FOOTSWITCH_4,\n    CONTROL_MIDI,\n    CONTROL_MODE_ELEMENT,\n    CONTROL_NAME,\n    CONTROL_STOMPSWITCH_1,\n    CONTROL_STOMPSWITCH_6,\n    CONTROL_STOMPSWITCH_A,\n    CONTROLS,\n    SYSEX_HEADER,\n    TARGET_PRESET,\n    TARGETS\n} from \"./constants\";\n\nexport const SINGLE_PRESET_EXPECTED_BYTES = 189;    // FIXME: unit is not bytes but messages\nexport const ALL_PRESETS_EXPECTED_BYTES = 4536;     // FIXME: unit is not bytes but messages\n\nexport const SYSEX_START = 0xF0;\nexport const SYSEX_END = 0xF7;\n\n// offsets from start of sysex data, right after SYSEX_START\nconst CMD = 4;\nconst TGT = 5;\nconst IDX = 6;\nconst OBJ = 7;\nconst ELM = 8;\n\n/**\n * https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge/34749873#34749873\n * Simple object check.\n * @param item\n * @returns {boolean}\n */\nfunction isObject(item) {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\n/**\n * https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge/34749873#34749873\n * Deep merge two objects.\n * @param target\n * @param ...sources\n */\nexport function mergeDeep(target, ...sources) {\n\n    if (!sources.length) return target;\n\n    const source = sources.shift();\n\n    if (isObject(target) && isObject(source)) {\n        for (const key in source) {\n            if (isObject(source[key])) {\n                if (!target[key]) Object.assign(target, { [key]: {} });\n                mergeDeep(target[key], source[key]);\n            } else {\n                Object.assign(target, { [key]: source[key] });\n            }\n        }\n    }\n\n    return mergeDeep(target, ...sources);\n}\n\n/**\n *\n * @param data Uint8Array\n */\nfunction isSysexData(data) {\n    if (data[0] !== SYSEX_START) return false;\n    if (data[data.byteLength - 1] !== SYSEX_END) return false;\n    return true;\n}\n\n/*\nfunction getManufacturerName(id) {\n    return id in midi_name ? midi_name[id] : \"manufacturer unknown\";\n}\n*/\n\nfunction getControlStep(data) {\n\n    // console.log(\"getControlStep\", hs(data));\n\n    // 01 01 0F 00      midi channel\n    // 02 01 47 00      message type\n    // 03 01 44 00      data 1\n    // 04 01 55 00      data 2\n    // 05 01 66 00      data 3\n    // 06 01 01         active\n\n    // the second byte is the length of the data that follows\n\n    //FIXME: use length\n\n    return {\n        index: (data[0] - 1) / 6 + 1,\n        config: {\n            channel: data[2],\n            msg_type: data[6],\n            data: [data[10], data[14], data[18]],\n            active: data[22]\n        }\n    };\n}\n\n\nfunction getControlMode(data) {\n    return {\n        control_mode: data[1]\n    };\n}\n\n\nfunction getControlLED(data) {\n\n    // console.log(\"getControlLED\", hs(data));\n\n    // 0x40\t<data>-MIDICtrl\tStep 1: LED MIDI Ctrl\n    // 0x41\t<data>-Color\tStep 1: LED Active Color\n    // 0x42\t<data>-Color\tStep 1: LED Inactive Color\n    // 0x43\t<data>-LEDNum\tStep 1: LED num\n\n    let cfg = {steps:{}};\n\n    let data_len;\n    let bytes;\n    let step;\n\n    let i = 0;\n    while (i<data.length) {\n        let d = data[i];\n        if (i===0) {\n            step = \"\" + ((d - 0x40) / 4 + 1);\n        }\n        if (!(step in cfg.steps)) cfg.steps[step] = {};\n        switch (d) {\n            case 0x40:\n            case 0x44:\n            case 0x48:\n            case 0x4C:\n            case 0x50:\n            case 0x54:\n                i++;\n                data_len = data[i];\n                i++;\n                if (data_len === 1) {\n                    bytes = data[i];\n                } else {\n                    bytes = Array.from(data.slice(i, i + data_len));\n                }\n                i += data_len;\n                cfg.steps[step][\"led_midi_ctrl\"] = bytes;\n                break;\n            case 0x41:\n            case 0x45:\n            case 0x49:\n            case 0x4D:\n            case 0x51:\n            case 0x55:\n                i++;\n                data_len = data[i];\n                i++;\n                if (data_len === 1) {\n                    bytes = data[i];\n                } else {\n                    bytes = Array.from(data.slice(i, i + data_len));\n                }\n                i += data_len;\n                cfg.steps[step][\"led_active_color\"] = bytes;\n                break;\n            case 0x42:\n            case 0x46:\n            case 0x4A:\n            case 0x4E:\n            case 0x52:\n            case 0x56:\n                i++;\n                data_len = data[i];\n                i++;\n                if (data_len === 1) {\n                    bytes = data[i];\n                } else {\n                    bytes = Array.from(data.slice(i, i + data_len));\n                }\n                i += data_len;\n                cfg.steps[step][\"led_inactive_color\"] = bytes;\n                break;\n            case 0x43:\n            case 0x47:\n            case 0x4B:\n            case 0x4F:\n            case 0x53:\n            case 0x57:\n                i++;\n                data_len = data[i];\n                i++;\n                if (data_len === 1) {\n                    bytes = data[i];\n                } else {\n                    bytes = Array.from(data.slice(i, i + data_len));\n                }\n                i += data_len;\n                cfg.steps[step][\"led_num\"] = bytes;\n                break;\n            case 0x7F:\n                i = data.length;\n                break;\n            default:\n                // console.log(`getControlLED: ignore byte ${h(d)}`);\n                i++;\n                break;\n        }\n    }\n\n    return cfg;\n}\n\n\nfunction getMidiSetting(data) {\n\n    // console.log(\"getMidiSetting\", hs(data));\n\n    return {\n        index: (data[0] - 1) / 6 + 1,       // e.g.: 7 --> 1, ..., 0x2B 43 --> 8\n        config: {\n            channel: data[2],\n            msg_type: data[6],\n            data: [data[10], data[14], data[18]]\n        }\n    };\n}\n\n\nfunction getPresetName(data) {\n    const len = data[1];\n    return String.fromCharCode.apply(null, data.slice(2, 2 + len));\n}\n\n\n/**\n * Parse a single sysex message\n * @param data\n * @returns {*}\n */\nfunction parseSysexMessage(data) {\n\n    // console.log(\"parseSysex\", hs(data));\n\n    //TODO: verify checksum\n\n    const message = {};\n\n    let cmd = data[CMD];\n    let tgt = data[TGT];\n    let idx = data[IDX];\n    let obj = data[OBJ];\n\n    switch (cmd) {\n        case COMMAND_SET:\n            break;\n        case COMMAND_GET:\n            break;\n        default:\n            console.warn(`parseSysexMessage: invalid command (${h(cmd)})`);\n            return null;\n    }\n\n    if (!(tgt in TARGETS)) {\n        console.warn(\"parseSysexMessage: invalid target\", h(tgt), tgt, TARGETS);\n        return null;\n    }\n\n    message[tgt] = {};\n\n    if (idx >= 0x19 && idx <= 0x7E) {\n        // console.warn(\"parseSysexMessage: invalid/ignored idx\", idx);\n    }\n\n    // console.log(\"parseSysexMessage: bytes\", data);\n    // console.log(\"parseSysexMessage: bytes\", Array.from(data));\n\n    message[tgt][idx] = {\n        // bytes: data      // FIXME: consolidate data per preset\n    };\n\n    if (!(obj in CONTROLS)) {\n        // console.warn(\"parseSysexMessage: invalid/ignored object\", h(obj));\n        return null;\n    }\n\n    let obj_type;\n    if (obj === CONTROL_NAME) {\n        obj_type = \"name\";\n    } else if ((obj >= CONTROL_STOMPSWITCH_1 && obj <= CONTROL_STOMPSWITCH_6) ||\n        (obj >= CONTROL_STOMPSWITCH_A && obj <= CONTROL_FOOTSWITCH_4) ||\n        (obj >= CONTROL_EXPRESSION_PEDAL_1 && obj <= CONTROL_EXPRESSION_PEDAL_2)) {\n        obj_type = \"control\";\n    } else if (obj === CONTROL_MIDI) {\n        obj_type = \"midi\";\n    } else {\n        console.warn('parseSysexMessage: invalid obj', obj);\n        return null;\n    }\n\n    // console.log(`target=${TARGET[tgt]} (${h(tgt)}), idx=${h(idx)}, object=${OBJECT[obj]} (${h(obj)}), type=${obj_type}`);\n    // console.log(`${TARGETS[tgt]} ${h(idx)} : ${CONTROLS[obj]} ${obj_type}`);\n\n    if (obj_type === \"name\") {\n\n        // NAME\n        message[tgt][idx][\"name\"] = getPresetName(data.slice(ELM));\n\n    }\n\n    if (obj_type === \"control\") {\n\n        message[tgt][idx][\"controls\"] = {\n            [obj]: {\n                steps: {}\n            }\n        };\n\n        // which element?\n        let e = data[ELM];\n\n        // console.log(h(e));\n\n        if (e >= 0x01 && e <= 0x24) {\n\n            // STEPS\n            if (data.length > ELM+22) {\n                let s = getControlStep(data.slice(ELM, ELM + 23));\n                message[tgt][idx][\"controls\"][obj][\"steps\"][s.index] = s.config;\n            } else {\n                console.warn(`parseSysexMessage: data does not contains steps. data.length=${data.length}`, hs(data));\n            }\n\n        } else if (e === CONTROL_MODE_ELEMENT) {\n\n            // CONTROL MODE\n            // console.log('parseSysexMessage: CONTROL MODE');\n\n            let mode_cfg = getControlMode(data.slice(ELM, data.length-1));\n            message[tgt][idx][\"controls\"][obj] = mergeDeep(message[tgt][idx][\"controls\"][obj], mode_cfg);\n\n        } else if (e >= 0x40 && e <= 0x57) {\n\n            // LED\n            // console.log('parseSysexMessage: LED');\n\n            let led_cfg = getControlLED(data.slice(ELM, data.length-1));\n            message[tgt][idx][\"controls\"][obj] = mergeDeep(message[tgt][idx][\"controls\"][obj], led_cfg);\n\n        } else if (e === 0x7F) {\n\n            // ALL\n            // console.log('parseSysexMessage: ALL');\n\n        } else {\n            console.warn(`parseSysexMessage: unknown element: ${h(e)}`);\n            return null;\n        }\n\n    }\n\n    if (obj_type === \"midi\") {\n\n        message[tgt][idx][\"midi\"] = {};\n\n        // which element?\n        let e = data[ELM];\n\n        if (e >= 0x01 && e <= 0x60) {\n\n            // SETTINGS\n            if (data.length > ELM+19) {\n                let s = getMidiSetting(data.slice(ELM, ELM + 20));\n                message[tgt][idx][\"midi\"][s.index] = s.config;\n            } else {\n                console.warn(`parseSysexMessage: data does not contains steps. data.length=${data.length}`, hs(data));\n            }\n\n        } else {\n            console.warn(`parseSysexMessage: unknown element: ${h(e)}`);\n            return null;\n        }\n\n    }\n\n    // console.log('MESSAGE', message);\n    return message;\n\n} // parseSysex()\n\n\n/**\n * Parse a sysex dump. A dump can contains multiple sysex messages.\n * Return a array of presets.\n * @param data ArrayBuffer\n */\nfunction parseSysexDump(data) {\n\n    // console.log(\"parseSysexDump\", hs(data));\n\n    if (data === null) return null;\n\n    let presets = {};   // Collection of presets. The key is the preset's index. The value is the preset.\n    // let global = {};    // global conf\n\n    let i = 0;\n    let cont = true;\n    while (cont) {\n\n        i = data.indexOf(SYSEX_START, i);\n        if (i < 0) break;\n\n        i++;\n\n        let k = data.indexOf(SYSEX_END, i);\n\n        let manufacturer_id = (Array.from(data.slice(i, i+3)).map(n => h(n))).join(\" \");    // Array.from() is necessary to get a non-typed array\n        if (manufacturer_id !== NEKTAR_TECHNOLOGY_INC) {\n            console.log(\"parseSysexDump: file does not contain a Nektar Pacer patch\", i, k, manufacturer_id, \"-\", hs(data));\n            return null;\n        }\n\n        if (data[i+3] !== 0x7F) {\n            console.warn(`parseSysexDump: invalid byte after manufacturer id: ${data[i+1 +3]}`);\n            return null;\n        }\n\n        let config = parseSysexMessage(data.slice(i, k));  // data.slice(i, k) are the data between SYSEX_START and SYSEX_END\n\n        if (config) {\n            mergeDeep(presets, config);\n        }\n\n    } // while\n\n    // console.log(\"parseSysexDump\", JSON.stringify(presets));\n\n    return presets;\n}\n\n\n/**\n * Split a sysex dump into individual presets\n *\n * input: binay data\n * output: collection (key-value obj) of binary data\n */\n/*\nfunction splitDump(data) {\n\n    if (data === null) return {};\n\n    let presets = [];   // Collection of presets. The key is the preset's index. The value is the preset.\n    // let global = {};    // global conf\n\n    let i = 0;\n    let cont = true;\n    while (cont) {\n\n        i = data.indexOf(SYSEX_START, i);\n        if (i < 0) break;\n\n        i++;\n\n        let k = data.indexOf(SYSEX_END, i);\n\n        let manufacturer_id = (Array.from(data.slice(i, i+3)).map(n => h(n))).join(\" \");    // Array.from() is necessary to get a non-typed array\n        if (manufacturer_id !== NEKTAR_TECHNOLOGY_INC) {\n            console.log(\"parseSysexDump: file does not contain a Nektar Pacer patch\", i, k, manufacturer_id, \"-\", hs(data));\n            return {};\n        }\n\n        if (data[i+3] !== 0x7F) {\n            console.warn(`parseSysexDump: invalid byte after manufacturer id: ${data[i+1 +3]}`);\n            return {};\n        }\n\n        let d = data.slice(i, k);\n\n        // let config = parseSysexMessage(data.slice(i, k));  // data.slice(i, k) are the data between SYSEX_START and SYSEX_END\n\n        // if (config) {\n        //     mergeDeep(presets, config);\n        // }\n\n    } // while\n\n    // console.log(\"parseSysexDump\", JSON.stringify(presets));\n\n    return presets;\n}\n*/\n\n\nexport function checksum(bytes) {\n    if (bytes === null || bytes === undefined || bytes.length === 0) return 128;\n    let sum = Uint8Array.from(bytes).reduce((previousValue, currentValue) => previousValue + currentValue);\n    return 128 - (sum % 128);\n}\n\n/**\n *\n */\nexport function requestAllPresets() {\n    let msg = [\n        COMMAND_GET,\n        TARGET_PRESET,\n        CONTROL_ALL\n    ];\n    let cs = checksum(msg);\n    msg.push(cs);\n    return SYSEX_HEADER.concat(msg);\n}\n\n/**\n * return the sysex message to send to the Pacer to request some data\n */\nexport function requestPreset(presetIndex) {\n    let msg = [\n        COMMAND_GET,\n        TARGET_PRESET,\n        presetIndex,\n        CONTROL_ALL\n    ];\n    let cs = checksum(msg);\n    msg.push(cs);\n    return SYSEX_HEADER.concat(msg);\n}\n\n/**\n * return the sysex message to send to the Pacer to request some data\n */\nexport function requestPresetObj(presetIndex, controlId) {\n\n    // To get the LED data, we need to request the complete preset config instead of just the specific control's config.\n    // return requestPreset(presetIndex);\n    let msg = [\n        COMMAND_GET,\n        TARGET_PRESET,\n        presetIndex,      // preset #\n        controlId         // (control)\n    ];\n    let cs = checksum(msg);\n    msg.push(cs);\n    return SYSEX_HEADER.concat(msg);\n}\n\n/**\n * Return an array of sysex messages to update a control's steps.\n * @param presetIndex\n * @param controlId\n * @param steps\n * @returns {*}\n */\nfunction buildControlStepSysex(presetIndex, controlId, steps) {\n\n    console.log(`buildControlStepSysex(${presetIndex}, ${controlId}, ...)`);\n\n    let msgs = [];\n\n    for (let i of Object.keys(steps)) {\n\n        let step = steps[i];\n\n        if (!step.changed) continue;\n\n        // start with command and target:\n        let msg = [\n            COMMAND_SET,\n            TARGET_PRESET,\n            presetIndex,\n            controlId];\n\n        // add data:\n        msg.push((i-1)*6 + 1, 1, step.channel, 0x00);\n        msg.push((i-1)*6 + 2, 1, step.msg_type, 0x00);\n        msg.push((i-1)*6 + 3, 1, step.data[0], 0x00);\n        msg.push((i-1)*6 + 4, 1, step.data[1], 0x00);\n        msg.push((i-1)*6 + 5, 1, step.data[2], 0x00);\n        msg.push((i-1)*6 + 6, 1, step.active);\n\n        // LED\n        msg.push((i-1)*4 + 0x40, 1, step.led_midi_ctrl, 0x00);\n        msg.push((i-1)*4 + 0x41, 1, step.led_active_color, 0x00);\n        msg.push((i-1)*4 + 0x42, 1, step.led_inactive_color, 0x00);\n        msg.push((i-1)*4 + 0x43, 1, step.led_num, 0x00);\n\n        // add checksum:\n        msg.push(checksum(msg));\n\n        // inject header and add to list of messages:\n        msgs.push(SYSEX_HEADER.concat(msg));\n    }\n\n    // console.log(\"buildControlStepSysex\", msgs);\n    msgs.map(m => console.log(\"buildControlStepSysex\", hs(m)));\n\n    return msgs;\n}\n\nfunction buildControlModeSysex(presetIndex, controlId, mode) {\n\n    // console.log(`buildControlStepMode(${presetIndex}, ${controlId}, ...)`);\n\n    // start with command and target:\n    let msg = [\n        COMMAND_SET,\n        TARGET_PRESET,\n        presetIndex,\n        controlId,\n        CONTROL_MODE_ELEMENT,\n        0x01,   // 1 byte of data\n        mode\n    ];\n\n    // add checksum:\n    msg.push(checksum(msg));\n\n    // console.log(\"buildControlModeSysex\", msg);\n\n    // inject header and return the result:\n    return SYSEX_HEADER.concat(msg);\n}\n\n\nfunction getControlUpdateSysexMessages(presetIndex, controlId, data) {\n\n    console.log(`getControlUpdateSysexMessages(${presetIndex}, ${controlId}, ${JSON.stringify(data)})`);\n\n    let msgs = buildControlStepSysex(presetIndex, controlId, data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"steps\"]);\n    if (data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"changed\"]) {\n        msgs.push(buildControlModeSysex(presetIndex, controlId, data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"control_mode\"]));\n    }\n    return msgs;\n}\n\n\n\nfunction buildMidiSettingsSysex(presetIndex, settings) {\n\n    // console.log(`buildMidiSettingStepSysex(${presetIndex}, ...)`);\n\n    let msgs = [];\n\n    for (let i of Object.keys(settings)) {\n\n        let setting = settings[i];\n\n        if (!setting.changed) continue;\n\n        // start with command and target:\n        let msg = [\n            COMMAND_SET,\n            TARGET_PRESET,\n            presetIndex,\n            CONTROL_MIDI];\n\n        // add data:\n        msg.push((i-1)*6 + 1, 1, setting.channel, 0x00);\n        msg.push((i-1)*6 + 2, 1, setting.msg_type, 0x00);\n        msg.push((i-1)*6 + 3, 1, setting.data[0], 0x00);\n        msg.push((i-1)*6 + 4, 1, setting.data[1], 0x00);\n        msg.push((i-1)*6 + 5, 1, setting.data[2], 0x00);\n        msg.push((i-1)*6 + 6, 1, setting.active);\n\n        // add checksum:\n        msg.push(checksum(msg));\n\n        // inject header and add to list of messages:\n        msgs.push(SYSEX_HEADER.concat(msg));\n    }\n\n    // console.log(\"buildControlStepSysex\", msgs);\n\n    return msgs;\n}\n\n\nfunction buildPresetNameSysex(presetIndex, data) {\n\n    if (!data[TARGET_PRESET][presetIndex].changed) return null;\n\n    // start with command and target:\n    let msg = [\n        COMMAND_SET,\n        TARGET_PRESET,\n        presetIndex,\n        CONTROL_NAME,\n        0x00            // when setting the name this byte can be anything\n    ];\n\n    const s = data[TARGET_PRESET][presetIndex][\"name\"];\n\n    // add data:\n    msg.push(s.length);\n\n    for (let i=0; i < s.length; i++) {\n        msg.push(s.charCodeAt(i));\n    }\n\n    // add checksum:\n    msg.push(checksum(msg));\n\n    // inject header and return result:\n    return SYSEX_HEADER.concat(msg)\n}\n\n\nfunction getMidiSettingUpdateSysexMessages(presetIndex, data) {\n    return buildMidiSettingsSysex(presetIndex, data[TARGET_PRESET][presetIndex][\"midi\"]);\n}\n\n\nexport {\n    isSysexData,\n    parseSysexDump,\n    getControlUpdateSysexMessages,\n    getMidiSettingUpdateSysexMessages,\n    buildPresetNameSysex\n};\n\n","import WebMidi from \"webmidi\";\n\nfunction portById(id) {\n    let p = WebMidi.inputs.find(item => item.id === id);\n    if (p) {\n        return p;\n    } else {\n        return WebMidi.outputs.find(item => item.id === id);\n    }\n}\n\nfunction inputById(id) {\n    return WebMidi.inputs.find(item => item.id === id);\n}\n\nfunction outputById(id) {\n    return WebMidi.outputs.find(item => item.id === id);\n}\n\n/**\n * Return webmidi input name from input id\n * @param id\n */\nfunction inputName(id) {\n    let i = inputById(id);\n    return i ? i.name : null;\n}\n\nfunction outputName(id) {\n    let i = outputById(id);\n    return i ? i.name : null;\n}\n\n\nexport {\n    portById,\n    inputById,\n    inputName,\n    outputName,\n    outputById\n}\n","/**\n * Example: 23 => \"D5\"\n * @param index\n * @returns {string}\n */\nexport const presetIndexToXY = index => {\n    if (index === 0) return \"CUR\";\n    //TODO: check valid range\n    let b = Math.floor((index - 1) / 6);\n    let i = (index - 1) % 6 + 1;\n    return String.fromCharCode(b + 65) + i.toString();\n};\n/**\n * Exampe: \"D5\" => 23\n * @param xy\n * @returns {number}\n */\nexport const presetXYToIndex = xy => {\n    // if (xy === \"CUR\") return 0;\n    //TODO: check valid range\n    let bank = xy.charCodeAt(0) - 65;\n    let num = parseInt(xy[1], 10);\n    return bank * 6 + num;\n};\n","import React from \"react\";\nimport \"./DumpSysex.css\";\nimport {\n    MSG_SW_NOTE,\n    TARGET_PRESET,\n    MSG_TYPES, COLORS, CONTROLS_FULLNAME\n} from \"../pacer/constants\";\nimport {h, hs} from \"../utils/hexstring\";\nimport \"./DumpSysex.css\";\nimport * as Note from \"tonal-note\";\nimport {presetIndexToXY} from \"../pacer/utils\";\n\n/*\nconst PresetName = ({ name }) => {\n    return (\n        <div className=\"dump-preset-name\">Preset name: {name}</div>\n    );\n};\n*/\n\nconst MidiTable = ({ settings }) => {\n    if (settings === null || settings === undefined) return null;\n    return (\n        <div className=\"dump-control\">\n            <table>\n                <tbody>\n                <tr>\n                    <td colSpan={6} className=\"name\">MIDI settings</td>\n                </tr>\n                {Object.keys(settings).map(i => {\n                    let t = MSG_TYPES[settings[i][\"msg_type\"]];\n                    if (settings[i][\"msg_type\"] === MSG_SW_NOTE) {\n                        t = t + ' ' + Note.fromMidi(settings[i][\"data\"][0], true) + ' vel. ' + settings[i][\"data\"][1];\n                    }\n                    return (\n                        <tr key={i}>\n                            <td>settings {i}</td>\n                            <td>ch. {h(settings[i][\"channel\"])}</td>\n                            <td>msg {h(settings[i][\"msg_type\"])}</td>\n                            <td>{t}</td>\n                            <td>{hs(settings[i][\"data\"])}</td>\n                            {/*<td>{settings[i][\"msg_type\"] === MSG_SW_NOTE ? Note.fromMidi(settings[i][\"data\"][0], true) : \"  \"}</td>*/}\n                            <td>{settings[i][\"active\"] ? \"active\" : \"OFF\"}</td>\n                        </tr>\n                    )}\n                )}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nconst MidiSettings = ({ settings }) => {\n    if (settings === null) return null;\n    return (\n        <div>\n            <MidiTable settings={settings} />\n        </div>\n    );\n};\n\nconst ControlTable = ({ obj, config }) => {\n    if (config === null || config === undefined) return null;\n    return (\n        <div className=\"dump-control\">\n            <table>\n                <tbody>\n                    <tr>\n                        <td colSpan={10} className=\"name\">{CONTROLS_FULLNAME[obj]}</td>\n                    </tr>\n                    <tr>\n                        <th>step</th>\n                        <th>ch.</th>\n                        <th>type</th>\n                        <th>data</th>\n                        <th>decoded</th>\n                        <th>active</th>\n                        <th>LED num</th>\n                        <th>LED On</th>\n                        <th>LED Off</th>\n                        <th>LED midi</th>\n                    </tr>\n                    {Object.keys(config[\"steps\"]).map(i => {\n                        let t = MSG_TYPES[config[\"steps\"][i][\"msg_type\"]];\n                        if (config[\"steps\"][i][\"msg_type\"] === MSG_SW_NOTE) {\n                            t = t + ' ' + Note.fromMidi(config[\"steps\"][i][\"data\"][0], true) + ' vel. ' + config[\"steps\"][i][\"data\"][1];\n                        }\n                        const c0 = config[\"steps\"][i][\"led_inactive_color\"];\n                        const c1 = config[\"steps\"][i][\"led_active_color\"];\n                        return (\n                            <tr key={`${obj}.${i}`}>\n                                <td>{i}</td>\n                                <td>{h(config[\"steps\"][i][\"channel\"])}</td>\n                                <td>{h(config[\"steps\"][i][\"msg_type\"])}</td>\n                                <td>{hs(config[\"steps\"][i][\"data\"])}</td>\n                                <td>{t}</td>\n                                <td>{config[\"steps\"][i][\"active\"] ? \"active\" : \"OFF\"}</td>\n                                <td>{h(config[\"steps\"][i][\"led_num\"])}</td>\n                                <td>{c1 in COLORS ? COLORS[c1] : h(c1)}</td>\n                                <td>{c0 in COLORS ? COLORS[c0] : h(c0)}</td>\n                                <td>{h(config[\"steps\"][i][\"led_midi_ctrl\"])}</td>\n                            </tr>\n                        )}\n                    )}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nconst Controls = ({ controls }) => {\n    if (controls === null || controls === undefined) return null;\n    return (\n        <div className=\"dump-controls\">\n            {Object.keys(controls).map(obj => <ControlTable key={obj} obj={obj} config={controls[obj]} />)}\n        </div>\n    );\n};\n\nconst Preset = ({ index, data }) => {\n    if (data === null || data === undefined) return null;\n    return (\n        <div>\n            <h3>Preset {presetIndexToXY(parseInt(index, 10))} (#{index}): {data[\"name\"]}</h3>\n            {/*<PresetName name= />*/}\n            <Controls controls={data[\"controls\"]} />\n            <MidiSettings settings={data[\"midi\"]} />\n        </div>\n    );\n};\n\nconst Presets = ({ presets }) => {\n    if (presets === null || presets === undefined) return null;\n    return (\n        <div>\n            {Object.keys(presets).map(idx => <Preset key={idx} index={idx} data={presets[idx]} />)}\n        </div>\n    );\n};\n\nconst DumpSysex = ({ data }) => {\n    return (\n        <div className=\"dump code\">\n            {\n                data && <Presets presets={data[TARGET_PRESET]} />\n            }\n{/*\n            {\n                JSON.stringify(data, null, 4)\n            }\n*/}\n        </div>\n    );\n};\n\n\nexport default DumpSysex;\n","import React, {Component, Fragment} from 'react';\nimport PropTypes from 'prop-types';\nimport * as WebMidi from \"webmidi\";\nimport {inputById, portById} from \"../utils/ports\";\nimport {PACER_MIDI_INPUT_PORT_NAME} from \"../pacer/constants\";\nimport {produce} from \"immer\";\n\nconst propTypes = {\n    classname: PropTypes.string,\n    only: PropTypes.string,                 // regex applied to port.name\n    autoConnect: PropTypes.string,          // regex applied to port.name\n    portsRenderer: PropTypes.func,\n    // inputRenderer: PropTypes.func,\n    // outputRenderer: PropTypes.func,\n    onMidiInputEvent: PropTypes.func,\n    onMidiOutputEvent: PropTypes.func,\n    onInputConnection: PropTypes.func,      // callback with port.id as parameter\n    onOutputConnection: PropTypes.func,     // callback with port.id as parameter\n    onInputDisconnection: PropTypes.func,   // callback with port.id as parameter\n    onOutputDisconnection: PropTypes.func,  // callback with port.id as parameter\n    setOutput: PropTypes.func,              // callback with port.id as parameter\n    children: PropTypes.node\n};\n\nconst defaultProps = {\n    classname: '',\n    only: \".*\"\n};\n\n/**\n *\n * @param props\n * @constructor\n */\nexport default class Midi extends Component {\n\n    //TODO: allow specification of channel and message types to listen to\n\n    state = {\n        inputs: [],         // array of MIDI inputs (filtered from WebMidi object)\n        outputs: [],        // array of MIDI outputs (filtered from WebMidi object)\n        input: null,        // MIDI output port enabled\n        output: null,       // MIDI output port enabled,\n        pacerPresent: false\n        // pacerInputConnected: false,\n        // pacerOutputConnected: false\n    };\n\n    connectInput = port => {\n        if (this.props.onMidiInputEvent) {\n            if (port) {\n                if (port.hasListener('midimessage', 'all', this.props.onMidiInputEvent)) {\n                    console.warn(`Midi.connectInput: sysex messages on all channels listener already connected`);\n                } else {\n                    console.log(`Midi.connectInput: add listener for sysex messages on all channels`);\n                    port.addListener('midimessage', 'all', this.props.onMidiInputEvent);\n                    if (this.props.onInputConnection) {\n                        this.props.onInputConnection(port.id);\n                    }\n                    console.log(\"connectInput: \", port.name);\n                    // if (port.name.match(new RegExp(PACER_MIDI_INPUT_PORT_NAME, 'i'))) {\n                    //     // console.log(\"connectInput: matched \", port.name);\n                    //     this.setState({ pacerInputConnected: true })\n                    // }\n                }\n            }\n        }\n    };\n\n    disconnectInput = port => {\n        if (port) {\n            if (port.removeListener) port.removeListener();\n            console.log(`disconnectInput: input ${port.id} disconnected`);\n            if (this.props.onInputDisconnection) {\n                this.props.onInputDisconnection(port.id);\n            }\n            // pacerPresent: WebMidi.inputs.findIndex(port => port.name.match(r2) != null) >= 0,\n            // if (port.name.match(new RegExp(PACER_MIDI_INPUT_PORT_NAME, 'i'))) {\n            //     this.setState({ pacerInputConnected: false })\n            // }\n        }\n    };\n\n    connectOutput = port => {\n        if (port) {\n            this.setState({output: port.id});\n            console.log(`connectOutput: output ${port.id} connected`);\n            if (this.props.onOutputConnection) {\n                this.props.onOutputConnection(port.id);\n            }\n            // if (port.name.match(new RegExp(PACER_MIDI_OUTPUT_PORT_NAME, 'i'))) {\n            //     this.setState({ pacerOutputConnected: true })\n            // }\n        }\n    };\n\n    disconnectOutput = () => {\n        if (this.state.output) {\n            let port_id = this.state.output;\n            this.setState(\n                produce(draft => {\n                    draft.pacerOutputConnected = false; // Since we only manage one connected output, if we disconnect it then the Pacer is necessarily disconnected too.\n                    draft.output = null;\n                })\n            );\n            console.log(`disconnectOutput: output ${port_id} disconnected`);\n            if (this.props.onOutputDisconnection) {\n                this.props.onOutputDisconnection(port_id);\n            }\n        }\n    };\n\n    autoConnectInput = () => {\n\n        if (this.props.autoConnect) {\n\n            console.log(`Midi.autoConnectInput: autoConnect ${this.props.autoConnect}`, this.state.inputs);\n\n            if (this.state.input === null) {\n\n                for (let port of this.state.inputs) {      //WebMidi.inputs) {\n\n                    console.log(`Midi.autoConnectInput: port ${port.name} ${port.id}`);\n\n                    if (port.type === 'input' && (port.name.match(new RegExp(this.props.autoConnect, 'i')) != null)) {\n\n                        console.log(`Midi.autoConnectInput: connect ${port.name}`);\n\n                        this.setState({input: port.id});\n\n                        this.connectInput(port);\n\n                        // if (port.hasListener('noteon', 'all', this.props.onMidiInputEvent)) {\n                        //     console.warn(`Midi.autoConnectInput: autoConnect: listener already connected`);\n                        // } else {\n                        //     console.log(`Midi.autoConnectInput: autoConnect: add listener`);\n                        //     port.addListener('noteon', 'all', this.props.onMidiInputEvent);\n                        // }\n                        break;\n                    }\n                }\n\n            } else {\n                console.log(`Midi.autoConnectInput: autoConnect skipped, already connected`);\n            }\n        }\n    };\n\n    autoConnectOutput = () => {\n\n        if (this.props.autoConnect) {\n\n            console.log(`Midi.autoConnectOutput: autoConnect ${this.props.autoConnect}`);\n\n            if (this.state.output === null) {\n\n                for (let port of this.state.outputs) {\n\n                    console.log(`Midi.autoConnectOutput: port ${port.name} ${port.id}`);\n\n                    if (port.type === 'output' && (port.name.match(new RegExp(this.props.autoConnect, 'i')) != null)) {\n\n                        console.log(`Midi.autoConnectOutput: autoConnect: auto-connect ${port.name}`);\n\n                        // this.setState({output: port.id});\n                        this.connectOutput(port);\n\n                        break;\n                    }\n                }\n\n            } else {\n                console.log(`Midi.autoConnectOutput: autoConnect skipped, already connected`);\n            }\n        }\n    };\n\n    registerInputs = () => {\n        const r = new RegExp(this.props.only, 'i');\n        const r2 = new RegExp(PACER_MIDI_INPUT_PORT_NAME, 'i');\n        // console.log(`Midi.registerInputs matching /${this.props.only}/i`, WebMidi.inputs, WebMidi.inputs.filter(port => port.name.match(r)));\n        // console.log(\"Midi.registerInputs index \", WebMidi.inputs.findIndex(\n        //     port => {\n        //         console.log(\"array.findIndex\", port.name, port.name.match(r2));\n        //         return port.name.match(r2) != null\n        //     }));\n        this.setState({\n                inputs: WebMidi.inputs.filter(port => port.name.match(r) != null),\n                pacerPresent: WebMidi.inputs.findIndex(port => port.name.match(r2) != null) >= 0,\n            },\n            () => this.autoConnectInput()\n        );\n    };\n\n    registerOutputs = () => {\n        const r = new RegExp(this.props.only, 'i');\n        // console.log(`Midi.registerOutputs matching /${this.props.only}/i`, WebMidi.outputs, WebMidi.outputs.filter(port => port.name.match(r) != null));\n        this.setState({\n                outputs: WebMidi.outputs.filter(port => port.name.match(r) != null)\n            },\n            () => this.autoConnectOutput()\n        );\n    };\n\n    unRegisterInputs = () => {\n        console.log(\"Midi.unRegisterInputs\");\n        this.disconnectInput(portById(this.state.input));\n        this.setState({\n            inputs: [],\n            input: null,\n            pacerPresent: false\n        });\n    };\n\n    unRegisterOutputs = () => {\n        console.log(\"Midi.unRegisterOutputs\");\n        this.disconnectOutput();\n        this.setState({ outputs: [], output: null });\n    };\n\n    handleMidiConnectEvent = e => {\n\n        console.group(`Midi: handleMidiConnectEvent: ${e.port.type} ${e.type}: ${e.port.name}`, e);\n\n        // TODO: is disconnect event, remove the existing input listeners\n        if (e.type === \"disconnected\") {\n            // console.log(`must disconnect ${e.port} ${e.port.id}`);\n            this.disconnectInput(e.port.id);\n            this.disconnectOutput();\n        }\n\n        if (e.port.name.match(new RegExp(this.props.only, 'i'))) {\n\n            if (e.port.type === 'input') {\n                // console.log(`ignore MIDI input connect event`);\n                console.log(\"Midi.handleMidiConnectEvent: call registerInputs\");\n                this.registerInputs();\n            }\n\n            if (e.port.type === 'output') {\n                console.log(\"Midi.handleMidiConnectEvent: call registerOutputs\");\n                this.registerOutputs();\n            }\n\n        } else {\n\n            console.log(`Midi.handleMidiConnectEvent: port ignored: ${e.port.name}`);\n\n        }\n\n        // Note: if we don't display the events, than the UI will not be updated if we don't update the state.\n\n        console.groupEnd();\n\n    };\n\n    /**\n     *\n     * @param port_id\n     */\n    togglePort = (port_id) => {\n        let p = portById(port_id);\n        if (p.type === 'input') {\n            console.log(\"toggle input\", port_id);\n            let prev = this.state.input;\n            if (this.state.input) {\n                this.disconnectInput(portById(this.state.input));\n                // this.setState({ input: null });\n            }\n            if (port_id !== prev) {\n                this.connectInput(inputById(port_id));\n                // this.setState({ input: port_id });\n            }\n            this.setState({ input: port_id === prev ? null : port_id });\n        } else {\n            console.log(\"toggle output\", port_id);\n            let prev = this.state.output;\n            // There is nothing to \"connect\" for an output port since this type of port does not generate any event.\n            // if (this.state.output) this.disconnectOutput(this.state.output);\n            if (this.state.output) {\n                this.disconnectOutput();\n            }\n            if (port_id !== prev) {\n                this.connectOutput(portById(port_id));\n            }\n            // this.setState({ output: port_id === this.state.output ? null : port_id });\n        }\n    };\n\n    midiOn = err => {\n        if (err) {\n            console.warn(\"Midi.midiOn: WebMidi could not be enabled.\", err);\n        } else {\n            console.log(\"Midi.midiOn: WebMidi enabled\");\n            WebMidi.addListener(\"connected\", this.handleMidiConnectEvent);\n            WebMidi.addListener(\"disconnected\", this.handleMidiConnectEvent);\n\n            /*\n            if (WebMidi.hasListener(\"connected\", this.handleMidiConnectEvent)) {\n                console.log(\"MidiPorts.componentDidMount: handleMidiConnectEvent already set on 'connected' event\");\n            } else {\n                WebMidi.addListener(\"connected\", this.handleMidiConnectEvent);\n            }\n            if (WebMidi.hasListener(\"disconnected\", this.handleMidiConnectEvent)) {\n                console.log(\"MidiPorts.componentDidMount: handleMidiConnectEvent already set on 'disconnected' event\");\n            } else {\n                WebMidi.addListener(\"disconnected\", this.handleMidiConnectEvent);\n            }\n            */\n        }\n    };\n\n    componentDidMount() {\n        console.log(`Midi: component did mount: WebMidi.enabled=${WebMidi.enabled}`);\n        if (WebMidi.enabled) {\n            console.log(`Midi: component did mount: already enabled, register ports`);\n            this.registerInputs();\n            this.registerOutputs();\n        } else {\n            console.log(\"Midi: component did mount: Calling WebMidi.enable\");\n            WebMidi.enable(this.midiOn, true);  // true to enable sysex support\n        }\n    }\n\n    componentWillUnmount() {\n        console.log(\"Midi: component will unmount: unregister ports\");\n        this.unRegisterInputs();\n        this.unRegisterOutputs();\n    }\n\n\n    portsGrouped = () => {\n        let g = {};\n        for (let p of WebMidi.inputs) {\n            g[p.name] = {\n                input: {\n                    id: p.id,\n                    selected: p.id === this.state.input\n                },\n                output: null\n            };\n        }\n        for (let p of WebMidi.outputs) {\n            if (!(p.name in g)) {\n                g[p.name] = {\n                    input: null,\n                    output: null\n                };\n            }\n            g[p.name].output = {\n                id: p.id,\n                selected: p.id === this.state.output\n            }\n        }\n        return g;\n    };\n\n\n    render() {\n\n        let {pacerPresent} = this.state;\n\n        // console.log(\"pacerPresent\", pacerPresent);\n\n        // console.log(this.state.inputs, this.state.outputs);\n\n        // if (input === null && output === null) {\n        //     return (\n        //         <div className={this.props.className}>\n        //             {this.props.children}\n        //         </div>\n        //     );\n        // } else {\n            return (\n                <Fragment>\n                    {\n                        this.props.portsRenderer(this.portsGrouped(), this.togglePort)\n                    }\n                    {!pacerPresent &&\n                    <Fragment>\n                        {this.props.children}\n                    </Fragment>}\n                </Fragment>\n            );\n        // }\n    }\n\n}\n\nMidi.propTypes = propTypes;\nMidi.defaultProps = defaultProps;\n","import React, {Fragment} from 'react';\nimport Switch from \"react-switch\";\n\nconst PortsGrid = ({ groupedPorts, clickHandler }) => {\n\n    // console.log(\"PortsGrid\", groupedPorts);\n\n    return (\n        <div className=\"ports-grid\">\n            {/*<div className=\"grid-header\">MIDI port</div>*/}\n            {/*<div className=\"grid-header\">IN</div>*/}\n            {/*<div className=\"grid-header\">OUT</div>*/}\n            {Object.keys(groupedPorts).map((name, index) =>\n                <div className=\"port\" key={index}>\n                    <div className=\"port-name\">{name}</div>\n                    {groupedPorts[name].input &&\n                    <div className=\"port-switch\">\n                        <Fragment>\n                            in&nbsp;<Switch\n                                onChange={() => clickHandler(groupedPorts[name].input.id)}\n                                checked={groupedPorts[name].input.selected}\n                                className=\"react-switch\"\n                                id={`switch-${groupedPorts[name].input.id}`}\n                                height={16} width={36}\n                            />\n                        </Fragment>\n                    </div>}\n                    {groupedPorts[name].output &&\n                    <div className=\"port-switch\">\n                        <Fragment>\n                            out&nbsp;<Switch\n                                onChange={() => clickHandler(groupedPorts[name].output.id)}\n                                checked={groupedPorts[name].output.selected}\n                                className=\"react-switch\"\n                                id={`switch-${groupedPorts[name].output.id}`}\n                                height={16} width={36}\n                            />\n                        </Fragment>\n                    </div>}\n                </div>\n            )}\n        </div>\n    );\n\n};\n\nexport default PortsGrid;\n","import React, {Component} from 'react';\nimport {\n    checksum,\n    isSysexData,\n    mergeDeep,\n    parseSysexDump,\n    requestAllPresets,\n    requestPreset,\n    requestPresetObj\n} from \"../pacer/sysex\";\nimport {ANY_MIDI_PORT, SYSEX_SIGNATURE} from \"../pacer/constants\";\nimport {outputById} from \"../utils/ports\";\nimport {fromHexString, h, hs} from \"../utils/hexstring\";\nimport \"./TestSender.css\";\nimport {produce} from \"immer\";\nimport DumpSysex from \"../components/DumpSysex\";\nimport {PACER_MIDI_PORT_NAME, SYSEX_HEADER} from \"../pacer/constants\";\nimport Midi from \"../components/Midi\";\nimport PortsGrid from \"../components/PortsGrid\";\n\n\nfunction batchMessages(callback, wait) {\n\n    let messages = [];  // batch of received messages\n    let timeout;\n\n    return function() {\n        clearTimeout(timeout);\n        let event = arguments[0];\n        messages.push(event.data);\n        timeout = setTimeout(() => {\n            // console.log(\"timeout elapsed\");\n            timeout = null;\n            callback(messages);\n            messages = [];\n        }, wait);\n    };\n}\n\nclass TestSender extends Component {\n\n    state = {\n        output: null,           // MIDI output port used for output\n        data: null,\n        messages: [{\n            name: \"read current preset\",\n            message: requestPreset(0)\n        }, {\n            name: \"read preset A1\",\n            message: requestPreset(1)\n        }, {\n            name: \"read stompswitch #1 of preset #5\",\n            message: requestPresetObj(5, 0x0D)\n        }, {\n            name: \"read all presets (takes some time)\",\n            message: requestAllPresets()\n        }],\n        customMessage: \"\"\n    };\n\n    /**\n     * Ad-hoc method to show the busy flag and set a timeout to make sure the busy flag is hidden after a timeout.\n     */\n    showBusy = () =>  {\n        setTimeout(() => this.props.onBusy(false), 30000);\n        this.props.onBusy(true);\n    };\n\n    updateCustomMessage = (event) => {\n        let s = (event.target.value.toUpperCase().match(/[0-9A-F ]+/g) || []).join('');\n        this.setState({\n            customMessage: s\n        });\n    };\n\n    sendCustomMessage = () => {\n        if (this.state.customMessage) {\n            let data = Array.from(fromHexString(this.state.customMessage, / /g));\n            if (data && data.length > 0) {\n                data.push(checksum(data));\n                this.sendSysex(SYSEX_HEADER.concat(data));\n            }\n        }\n    };\n\n/*\n    handleMidiInputEvent = (event) => {\n        // console.log(\"TestSender.handleMidiInputEvent\", event, event.data);\n        // if (event instanceof MIDIMessageEvent) {\n        if (isSysexData(event.data)) {\n            this.setState(\n                produce(draft => {\n                    draft.data = mergeDeep(draft.data || {}, parseSysexDump(event.data));\n                    // this.props.onBusy(false);\n                })\n            )\n        } else {\n            console.log(\"MIDI message is not a sysex message\")\n        }\n        // }\n    };\n*/\n\n    handleMidiInputEvent = batchMessages(\n        messages => {\n            this.setState(\n                produce(\n                    draft => {\n                        for (let m of messages) {\n                            if (isSysexData(m)) {\n                                draft.data = mergeDeep(draft.data || {}, parseSysexDump(m));\n                            } else {\n                                console.log(\"MIDI message is not a sysex message\")\n                            }\n                        }\n                    }\n                )\n            );\n            // let bytes = messages.reduce((accumulator, element) => accumulator + element.length, 0);\n            // this.addInfoMessage(`${messages.length} messages received (${bytes} bytes)`);\n            this.props.onBusy(false);\n        },\n        1000\n    );\n\n\n    setOutput = (port_id) => {\n        this.setState({output: port_id});\n    };\n\n    sendSysex = msg => {\n        console.log(\"sendSysex\", msg);\n        if (!this.state.output) return;\n        let out = outputById(this.state.output);\n        if (!out) {\n            console.warn(`send: output ${this.state.output} not found`);\n            return;\n        }\n        this.showBusy();\n        this.setState(\n            {data: null},\n            () => out.sendSysex(SYSEX_SIGNATURE, msg)\n        );\n    };\n\n    sendMessage = (msg) => {\n        this.sendSysex(msg);\n    };\n\n    /**\n     * @returns {*}\n     */\n    render() {\n\n        const { data, messages, customMessage } = this.state;\n\n        const cs = checksum(fromHexString(customMessage, / /g));\n\n/*\n        let hex_msg = '';\n        if (customMessage.length % 2) {\n            hex_msg = hs(customMessage);\n        } else {\n            hex_msg = hs(customMessage.substring(0, customMessage.length - 1)) + ' ' + customMessage.substr(-1, 1);\n        }\n*/\n        let hex_msg = '';\n        for (let i=0; i < customMessage.length; i++) {\n            if ((i > 0) && (i % 2 === 0)) hex_msg += ' ';\n            hex_msg += customMessage[i];\n        }\n\n        return (\n            <div className=\"wrapper\">\n                <div className=\"content\">\n\n                    <div className=\"content-row-content\">\n                        <h2>Test messages:</h2>\n                        <div className=\"content-row-content-content\">\n                        {messages.map((msg, i) =>\n                            <div key={i} className=\"send-message\">\n                                <button onClick={() => this.sendMessage(msg.message)}>send</button>\n                                <span className=\"code light\">{ hs(SYSEX_SIGNATURE.concat(msg.message.slice(0, 1))) } </span>\n                                <span className=\"code\">{ hs(msg.message.slice(1, -1)) } </span>\n                                <span className=\"code light\"> {hs(msg.message.slice(-1))}</span>\n                                <span className=\"message-name\"> {msg.name}</span>\n                            </div>\n                        )}\n                        </div>\n                    </div>\n\n                    <div className=\"content-row-content\">\n                        <h2>Custom message:</h2>\n                        <div className=\"content-row-content-content\">\n                            <div className=\"send-message\">\n                                <button onClick={this.sendCustomMessage} disabled={(customMessage.length % 2) !== 0}>send</button>\n                                <span className=\"code light\">{hs(SYSEX_SIGNATURE)} {hs(SYSEX_HEADER)} </span>\n                                <input type=\"text\" className=\"code\" size=\"30\" value={customMessage}\n                                       placeholder={\"hex digits only\"} onChange={this.updateCustomMessage} />\n                                <span className=\"code light\"> {h(cs)}</span>\n                            </div>\n                            <div className=\"custom-message code\">\n                                {hs(SYSEX_SIGNATURE)} {hs(SYSEX_HEADER)} {hex_msg} {h(cs)}\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"content-row-content\">\n                        <h2>Response:</h2>\n                        <div className=\"content-row-content-content\">\n                            <div className=\"message code\">\n                                <DumpSysex data={data} />\n                            </div>\n\n                        </div>\n                    </div>\n\n{/*\n                    <div className=\"content-row-content no-grad\">\n                        {data &&\n                        <div className=\"debug\">\n                            <h4>[Debug] sysex data:</h4>\n                            <pre>{JSON.stringify(data, null, 4)}</pre>\n                        </div>\n                        }\n                    </div>\n*/}\n\n                </div>\n\n                <div className=\"right-column\">\n                    <Midi only={ANY_MIDI_PORT} autoConnect={PACER_MIDI_PORT_NAME}\n                          portsRenderer={(groupedPorts, clickHandler) => <PortsGrid groupedPorts={groupedPorts} clickHandler={clickHandler} />}\n                          onMidiInputEvent={this.handleMidiInputEvent}\n                          onOutputConnection={this.setOutput}\n                          className=\"\" >\n                        <div className=\"no-midi\">Please connect your Pacer to your computer.</div>\n                    </Midi>\n                </div>\n\n            </div>\n\n        );\n    }\n}\n\nexport default TestSender;\n","import React, {Fragment} from \"react\";\nimport \"./PresetSelector.css\";\nimport \"./selector.css\";\nimport {presetXYToIndex} from \"../pacer/utils\";\nimport {TARGET_PRESET} from \"../pacer/constants\";\n\nconst Selector = ({ id, index, name, selected, onClick }) =>\n    <div className={selected ? \"selector selected\" : \"selector\"} onClick={() => onClick(index)}>\n        <span className=\"preset-id\">{id}</span> <span className=\"preset-name\">{name}</span>\n    </div>;\n\nconst PresetSelector = ({ data, currentPreset, onClick }) =>\n    <Fragment>\n        <div className=\"preset-selectors\">\n            <Selector id={\"CUR\"} index={0} name={\"\"} selected={0 === currentPreset} onClick={onClick} key={0} />\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n        {\n            ['A', 'B', 'C', 'D'].map(\n            letter =>\n                <Fragment key={letter}>\n{/*\n                {\n                    (letter !== 'A') && <div></div>\n                }\n*/}\n                {\n                    Array.from(Array(6).keys()).map(\n                    digit => {\n                        let id = letter + (digit + 1);\n                        let index = presetXYToIndex(id);\n\n                        let show = data && data[TARGET_PRESET] && data[TARGET_PRESET][index];\n                        let name = show ? data[TARGET_PRESET][index][\"name\"] : \"\";\n\n                        return <Selector id={id} index={index} name={name} selected={index === currentPreset} onClick={onClick} key={index} />\n                    })\n                }\n                </Fragment>\n            )\n        }\n        </div>\n    </Fragment>;\n\nexport default PresetSelector;\n","import React from \"react\";\nimport {FOOTSWITCHES, STOMPSWITCHES_TOP, STOMPSWITCHES_BOTTOM, EXPPEDALS, CONTROLS} from \"../pacer/constants\";\nimport \"./ControlSelector.css\";\n\nconst Control = ({ name, id, selected, onClick }) =>\n    <div className={selected ? \"selector selected\" : \"selector\"} onClick={() => onClick(id)}>\n        <div className=\"name\">{name}</div>\n    </div>;\n\n\nconst ControlSelector = ({ currentControl, onClick }) =>\n    <div className=\"controls\">\n        {\n            FOOTSWITCHES.map(\n                key => <Control key={key} name={CONTROLS[key]} id={key} selected={key === currentControl} onClick={onClick} />\n            )\n        }\n        {\n            EXPPEDALS.map(\n                key => <Control key={key} name={CONTROLS[key]} id={key} selected={key === currentControl} onClick={onClick} />\n            )\n        }\n        <div className=\"no-control\">&nbsp;</div>\n        {\n            STOMPSWITCHES_TOP.map(\n                key => <Control key={key} name={CONTROLS[key]} id={key} selected={key === currentControl} onClick={onClick} />\n            )\n        }\n        <div className=\"no-control\">&nbsp;</div>\n        {\n            STOMPSWITCHES_BOTTOM.map(\n                key => <Control key={key} name={CONTROLS[key]} id={key} selected={key === currentControl} onClick={onClick} />\n            )\n        }\n    </div>;\n\n\nexport default ControlSelector;\n","import React, {Component, Fragment} from 'react';\nimport {\n    COLORS,\n    MSG_CTRL_OFF,\n    MSG_SW_NOTE,\n    MSG_SW_NOTE_TGGLE, MSG_TYPES_DATA_HELP,\n    MSG_TYPES_FULLNAME_SW,\n    MSG_TYPES_FULLNAME_SW_SORTED\n} from \"../pacer/constants\";\nimport * as Note from \"tonal-note\";\nimport \"./ControlStepsEditor.css\";\n\nconst LEDMidi = ({ current_value, onChange }) => {\n    return (\n        <select value={current_value} onChange={(event) => onChange(event.target.value)}>\n            <option value=\"0\">0</option>\n            <option value=\"1\">1</option>\n        </select>\n    );\n};\n\nconst LEDColor = ({ current_value, onChange }) => {\n    return (\n        <select value={current_value} onChange={(event) => onChange(event.target.value)}>\n            {\n                Object.keys(COLORS).map(\n                    key => {\n                        return <option key={key} value={key}>{COLORS[key]}</option>\n                    })\n            }\n        </select>\n    );\n};\n\nconst LEDNum = ({ current_value, onChange }) => {\n    return (\n        <select value={current_value} onChange={(event) => onChange(event.target.value)}>\n            <option value=\"0\">default</option>\n            <option value=\"3\">top</option>\n            <option value=\"2\">middle</option>\n            <option value=\"1\">bottom</option>\n        </select>\n    );\n};\n\nconst MidiNote = ({ note, onChange }) => {\n    return (\n        <select value={note} onChange={(event) => onChange(event.target.value)}>\n            {\n                Array.from(Array(127).keys()).map(\n                    i => {\n                        let n = Note.fromMidi(i, true);\n                        return <option key={i} value={i}>{n}</option>\n                    })\n            }\n        </select>\n    );\n};\n\nconst Step = ({ index, config, updateCallback }) => {\n\n    let inactive = config.msg_type === MSG_CTRL_OFF;\n\n    if (inactive) {\n        return (\n            <Fragment>\n                <div className=\"step-row-header\">Step {index}:</div>\n                <div>\n                    <select value={config.msg_type} onChange={(event) => updateCallback(\"msg_type\", null, event.target.value)}>\n                        {\n                            Object.keys(MSG_TYPES_FULLNAME_SW).map(\n                                key => {\n                                    return <option key={key} value={key}>{MSG_TYPES_FULLNAME_SW[key]}</option>\n                                })\n                        }\n                    </select>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n            </Fragment>\n        );\n    }\n\n    let d0, d1, d2;\n    if ((config.msg_type === MSG_SW_NOTE) || (config.msg_type === MSG_SW_NOTE_TGGLE)) {\n        d0 = <MidiNote note={config.data[0]} onChange={(value) => updateCallback(\"data\", 0, value)} />;\n        d1 = <input type=\"text\" value={config.data[1]} onChange={(event) => updateCallback(\"data\", 1, event.target.value)} />;\n        d2 = '';\n    } else {\n        d0 = <input type=\"text\" value={config.data[0]} onChange={(event) => updateCallback(\"data\", 0, event.target.value)} />;\n        d1 = <input type=\"text\" value={config.data[1]} onChange={(event) => updateCallback(\"data\", 1, event.target.value)} />;\n        d2 = <input type=\"text\" value={config.data[2]} onChange={(event) => updateCallback(\"data\", 2, event.target.value)} />;\n    }\n\n    return (\n        <Fragment>\n            <div className=\"step-row-header\">Step {index}:</div>\n            <div>\n                <select value={config.msg_type} onChange={(event) => updateCallback(\"msg_type\", null, event.target.value)}>\n                {\n                    MSG_TYPES_FULLNAME_SW_SORTED.map(\n                        v => {\n                            return <option key={v.key} value={v.key}>{v.value}</option>\n                        })\n                }\n                </select>\n            </div>\n            <div>{d0}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][0]}</div></div>\n            <div>{d1}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][1]}</div></div>\n            <div>{d2}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][2]}</div></div>\n            <div>\n                <LEDColor current_value={config.led_inactive_color} onChange={(value) => updateCallback(\"led_inactive_color\", null, value)} />\n            </div>\n            <div>\n                <LEDColor current_value={config.led_active_color} onChange={(value) => updateCallback(\"led_active_color\", null, value)} />\n            </div>\n            <div>\n                <LEDNum current_value={config.led_num} onChange={(value) => updateCallback(\"led_num\", null, value)} />\n            </div>\n            <div>\n                <LEDMidi current_value={config.led_midi_ctrl} onChange={(value) => updateCallback(\"led_midi_ctrl\", null, value)} />\n            </div>\n            <div>\n                <select value={config.channel} onChange={(event) => updateCallback(\"channel\", null, event.target.value)}>\n                    {\n                        Array.from(Array(16).keys()).map(i => <option key={i} value={i}>{i}</option>)\n                    }\n                </select>\n            </div>\n        </Fragment>\n    );\n};\n\nclass ControlStepsEditor extends Component {\n\n    onStepUpdate = (stepIndex, dataType, dataIndex, value) => {\n        this.props.onUpdate(stepIndex, dataType, dataIndex, value);    // stepIndex, dataIndex, value\n    };\n\n    render() {\n\n        const steps = this.props.steps;\n\n        return (\n            <div className=\"steps\">\n                <div></div>\n                <div className=\"step-col-header\">Type</div>\n                <div className=\"step-col-header\">Data 1</div>\n                <div className=\"step-col-header\">Data 2</div>\n                <div className=\"step-col-header\">Data 3</div>\n                <div className=\"step-col-header\">LED Off</div>\n                <div className=\"step-col-header\">LED On</div>\n                <div className=\"step-col-header\">LED Num</div>\n                <div className=\"step-col-header\">LED MIDI</div>\n                <div className=\"step-col-header\">MIDI Ch.</div>\n                {Object.keys(steps).map(i =>\n                    <Step key={i} index={i} config={steps[i]} updateCallback={(dataType, dataIndex, value) => this.onStepUpdate(i, dataType, dataIndex, value)} />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default ControlStepsEditor;\n","import React, {Component} from \"react\";\nimport {CONTROL_MODES} from \"../pacer/constants\";\nimport\"./ControlModeEditor.css\";\n\nclass ControlModeEditor extends Component {\n\n    render() {\n        return (\n            <div className=\"control-mode\">\n                <span className=\"step-row-header\">Control mode:</span>\n                <select onChange={(event) => this.props.onUpdate(event.target.value)} value={this.props.mode}>\n                    {\n                        Object.keys(CONTROL_MODES).map(\n                            key => {\n                                return <option key={key} value={key}>{CONTROL_MODES[key]}</option>\n                            })\n                    }\n                </select>\n            </div>\n        );\n    }\n\n}\n\nexport default ControlModeEditor;\n","import React, {Component} from 'react';\n\nclass PresetNameEditor extends Component {\n\n    onNameUpdate = (event) => {\n        console.log(`PresetNameEditor.onSettingUpdate`, event.target.value);\n        this.props.onUpdate(event.target.value.length > 5 ? event.target.value.substr(0, 5) : event.target.value);\n    };\n\n    render() {\n        const name = this.props.name;\n        return (\n            <div className=\"preset-name\">\n                <p>The preset name is limited to 5 characters.</p>\n                <span className=\"strong\">Name:</span> <input value={name} onChange={this.onNameUpdate} size={8} />\n            </div>\n        );\n    }\n}\n\nexport default PresetNameEditor;\n","import React, {Component, Fragment} from 'react';\nimport PresetSelector from \"../components/PresetSelector\";\nimport {\n    ALL_PRESETS_EXPECTED_BYTES,\n    buildPresetNameSysex,\n    getControlUpdateSysexMessages,\n    isSysexData,\n    mergeDeep,\n    parseSysexDump, requestAllPresets, requestPreset, SINGLE_PRESET_EXPECTED_BYTES\n} from \"../pacer/sysex\";\nimport ControlSelector from \"../components/ControlSelector\";\nimport {\n    ANY_MIDI_PORT,\n    MSG_CTRL_OFF,\n    PACER_MIDI_PORT_NAME,\n    SYSEX_SIGNATURE,\n    TARGET_PRESET\n} from \"../pacer/constants\";\nimport {hs} from \"../utils/hexstring\";\nimport {produce} from \"immer\";\nimport {inputName, outputById, outputName} from \"../utils/ports\";\nimport ControlStepsEditor from \"../components/ControlStepsEditor\";\nimport Midi from \"../components/Midi\";\nimport Dropzone from \"react-dropzone\";\nimport \"./Preset.css\";\nimport ControlModeEditor from \"../components/ControlModeEditor\";\nimport PresetNameEditor from \"../components/PresetNameEditor\";\nimport PortsGrid from \"../components/PortsGrid\";\n\nconst MAX_FILE_SIZE = 5 * 1024*1024;\n\nconst MAX_STATUS_MESSAGES = 40;\n\nfunction isVal(v) {\n    return v !== undefined && v !== null && v !== '';\n}\n\nfunction batchMessages(callback, callbackBusy, wait) {\n\n    let messages = [];  // batch of received messages\n    let timeout;\n\n    return function() {\n        clearTimeout(timeout);\n        let event = arguments[0];\n        messages.push(event.data);\n        // console.log('rec sysex', messages.length);\n        callbackBusy(messages.length);\n        timeout = setTimeout(() => {\n            // console.log(\"timeout elapsed\");\n            timeout = null;\n            callback(messages);\n            messages = [];\n        }, wait);\n    };\n}\n\nclass Preset extends Component {\n\n/*\n    state = {\n        output: null,       // MIDI output port used for output\n        presetIndex: null,\n        controlId: null,\n        changed: false,     // true when the control has been edited\n        data: null,         // json\n        binData: null,      // binary, will be used to download as .syx file\n        statusMessages: [],\n\n        // accept: '',\n        // files: [],\n        dropZoneActive: false\n\n    };\n*/\n\n    constructor(props) {\n        super(props);\n        this.inputOpenFileRef = React.createRef();\n        this.state = {\n            output: null,       // MIDI output port used for output\n            presetIndex: null,\n            controlId: null,\n            changed: false,     // true when the control has been edited\n            data: null,         // json\n            binData: null,      // binary, will be used to download as .syx file\n            statusMessages: [],\n            // accept: '',\n            // files: [],\n            dropZoneActive: false\n        };\n    }\n\n    // initBusy = ({busy = false, busyMessage = null, bytesExpected = -1, bytesReceived = -1} = {}) => {\n    //     setTimeout(() => this.props.onBusy({busy: false}), 20000);\n    //     this.props.onBusy({busy: true});\n    // };\n\n    /**\n     * Ad-hoc method to show the busy flag and set a timeout to make sure the busy flag is hidden after a timeout.\n     */\n    showBusy = ({busy = false, busyMessage = null, bytesExpected = -1, bytesReceived = -1} = {}) =>  {\n        // console.log(\"show busy\", busyMessage);\n        setTimeout(() => this.props.onBusy({busy: false}), 20000);\n        this.props.onBusy({busy: true, busyMessage, bytesExpected, bytesReceived});\n    };\n\n    addStatusMessage = (type, message) => {\n        this.setState(\n            produce(draft => {\n                let m = { type, message };\n                let len = draft.statusMessages.push(m);\n                if (len > MAX_STATUS_MESSAGES) draft.statusMessages.shift();\n            })\n        );\n    };\n\n    addInfoMessage= message => {\n        this.addStatusMessage(\"info\", message);\n    };\n\n    addWarningMessage= message => {\n        this.addStatusMessage(\"warning\", message);\n    };\n\n    addErrorMessage= message => {\n        this.addStatusMessage(\"error\", message);\n    };\n\n    handleMidiInputEvent = batchMessages(\n        messages => {\n\n            let bytes = messages.reduce((accumulator, element) => accumulator + element.length, 0);\n\n            this.setState(\n                produce(\n                    draft => {\n\n                        draft.binData = new Uint8Array(bytes);\n                        let bin_index = 0;\n\n                        for (let m of messages) {\n\n                            draft.binData.set(m, bin_index);\n                            bin_index += m.length;\n\n                            if (isSysexData(m)) {\n                                draft.data = mergeDeep(draft.data || {}, parseSysexDump(m));\n                            } else {\n                                console.log(\"MIDI message is not a sysex message\")\n                            }\n                        }\n\n                        // When requesting a config via MIDI (and not via a file drag&drop), we do not\n                        // update the preset and control ID from the MIDI sysex received.\n                        // This is important because to get the LED data we need to request the complete\n                        // preset data instead of just the selected control's config.\n\n                        // let pId = Object.keys(draft.data[TARGET_PRESET])[0];\n                        // draft.presetIndex = parseInt(pId, 10);\n                        // draft.controlId = parseInt(Object.keys(draft.data[TARGET_PRESET][pId][\"controls\"])[0], 10);\n                    }\n                )\n            );\n\n            // this.addInfoMessage(`${messages.length} messages received (${bytes} bytes)`);\n            this.props.onBusy({busy: false});\n        },\n        (n) => {\n            // console.log(n);\n            this.props.onBusy({busy: true, bytesReceived: n});\n        },\n        1000\n    );\n\n    /**\n     *\n     * @param files\n     * @returns {Promise<void>}\n     */\n    async readFiles(files) {\n        await Promise.all(files.map(\n            async file => {\n                if (file.size > MAX_FILE_SIZE) {\n                    console.warn(`readFiles: ${file.name}: file too big, ${file.size}`);\n                    this.addWarningMessage(\"file too big\");\n                } else {\n                    this.showBusy({busy: true, busyMessage: \"loading file...\"});\n                    const data = new Uint8Array(await new Response(file).arrayBuffer());\n                    if (isSysexData(data)) {\n                        this.setState(\n                            produce(draft => {\n                                // draft.data = mergeDeep(draft.data || {}, parseSysexDump(data));\n                                draft.data = parseSysexDump(data);\n                                let pId = Object.keys(draft.data[TARGET_PRESET])[0];\n                                let cId = Object.keys(draft.data[TARGET_PRESET][pId][\"controls\"])[0];\n                                draft.presetIndex = parseInt(pId, 10);\n                                draft.controlId = parseInt(cId, 10);\n                            })\n                        );\n                        this.addInfoMessage(\"sysfile decoded\");\n                    } else {\n                        this.addWarningMessage(\"not a sysfile\");\n                        console.log(\"readFiles: not a sysfile\", hs(data.slice(0, 5)));\n                    }\n                    this.props.onBusy({busy: false});\n                    // non sysex files are ignored\n                }\n                // too big files are ignored\n            }\n        ));\n    }\n\n    onChangeFile = (e) => {\n        console.log(\"onChangeFile\", e);\n        var file = e.target.files[0];\n        console.log(file);\n        this.readFiles([file]);\n    };\n\n    onInputFile = (e) => {\n        console.log(\"onInputFile\", e);\n        this.inputOpenFileRef.current.click()\n    };\n\n    onDragEnter = () => {\n        this.setState({\n            dropZoneActive: true\n        });\n    };\n\n    onDragLeave= () => {\n        this.setState({\n            dropZoneActive: false\n        });\n    };\n\n    /**\n     * Drop Zone handler\n     * @param files\n     */\n    onDrop = (files) => {\n        console.log('drop', files);\n        this.setState(\n            {\n                data: null,\n                changed: false,\n                dropZoneActive: false\n            },\n            () => {this.readFiles(files)}   // returned promise from readFiles() is ignored, this is normal.\n        );\n    };\n\n    selectPreset = (index) => {\n        // if the user selects another preset or control, then clear the data in the state\n        const { data } = this.state;\n        if (data && data[TARGET_PRESET] && data[TARGET_PRESET][index]) {\n            this.setState(\n                produce(draft => {\n                    draft.presetIndex = index;\n                })\n            );\n        } else {\n            this.setState(\n                produce(draft => {\n                    draft.presetIndex = index;\n                    if (index !== this.state.presetIndex) {\n                        draft.data = null;\n                        draft.changed = false;\n                    }\n                })\n            );\n            if (isVal(index)) {   // && this.state.controlId) {\n                // To get the LED data, we need to request the complete preset config instead of just the specific control's config.\n                this.readPacer(requestPreset(index), SINGLE_PRESET_EXPECTED_BYTES);\n            }\n        }\n    };\n\n    selectControl = (controlId) => {\n\n        //TODO: no need to read the preset data again. Just select the control from the data we must already have.\n\n        // console.log(`selectControl ${controlId}`);\n\n        if (isVal(this.state.presetIndex) && controlId) {\n\n            // console.log(`selectControl setState ${controlId}`);\n\n            this.setState({ controlId });\n        }\n\n        /*\n        // if the user selects another preset or control, then clear the data in the state\n        this.setState(\n            produce(draft => {\n                draft.controlId = controlId;\n                if (controlId !== this.state.controlId) {\n                    draft.data = null;\n                    draft.changed = false;\n                }\n            })\n        );\n        if (isVal(this.state.presetIndex) && controlId) {\n            // To get the LED data, we need to request the complete preset config instead of just the specific control's config.\n            this.readPacer(requestPreset(this.state.presetIndex));\n        }\n        */\n    };\n\n    /**\n     * dataIndex is only used when dataType == \"data\"\n     */\n    updateControlStep = (controlId, stepIndex, dataType, dataIndex, value) => {\n        console.log(\"Presets.updateControlStep\", controlId, stepIndex, dataType, dataIndex, value);\n        let v = parseInt(value, 10);\n        this.setState(\n            produce(draft => {\n                if (dataType === \"data\") {\n                    draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"steps\"][stepIndex][\"data\"][dataIndex] = v;\n                } else {\n                    draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"steps\"][stepIndex][dataType] = v;\n                }\n                if (dataType === \"msg_type\") {\n                    if (v === MSG_CTRL_OFF) {\n                        draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"steps\"][stepIndex][\"active\"] = 0;\n                    } else {\n                        draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"steps\"][stepIndex][\"active\"] = 1;\n                    }\n                }\n                draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"steps\"][stepIndex][\"changed\"] = true;\n                draft.changed = true;\n            })\n        );\n    };\n\n    /**\n     * dataIndex is only used when dataType == \"data\"\n     */\n    updateControlMode = (controlId, value) => {\n        // console.log(\"Presets.updateControlMode\", controlId, value);\n        let v = parseInt(value, 10);\n        this.setState(\n            produce(draft => {\n                draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"control_mode\"] = v;\n                draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"changed\"] = true;\n                draft.changed = true;\n            })\n        );\n    };\n\n    updatePresetName = (name) => {\n        // console.log(\"Presets.updateName\", name);\n        if (name === undefined || name === null) return;\n        if (name.length > 5) {\n            console.warn(`Presets.updateName: name too long: ${name}`);\n            return;\n        }\n        this.setState(\n            produce(draft => {\n                draft.data[TARGET_PRESET][draft.presetIndex][\"name\"] = name;    // TODO : buld update message\n                draft.data[TARGET_PRESET][draft.presetIndex][\"changed\"] = true;\n                draft.changed = true;\n            })\n        );\n    };\n\n    onInputConnection = (port_id) => {\n        this.addInfoMessage(`input ${inputName(port_id)} connected`);\n    };\n\n    onInputDisconnection = (port_id) => {\n        this.addInfoMessage(`input ${inputName(port_id)} disconnected`);\n    };\n\n    onOutputConnection = (port_id) => {\n        console.log(\"onOutputConnection\");\n        this.setState(\n            produce(draft => {\n                draft.output = port_id;\n            })\n        );\n        this.addInfoMessage(`output ${outputName(port_id)} connected`);\n    };\n\n    onOutputDisconnection = (port_id) => {\n        console.log(\"onOutputDisconnection\");\n        this.setState(\n            produce(draft => {\n                draft.output = null;        // we manage only one output connection at a time\n            })\n        );\n        this.addInfoMessage(`output ${outputName(port_id)} disconnected`);\n    };\n\n    sendSysex = (msg, bytesExpected) => {\n        console.log(\"sendSysex\", hs(msg), bytesExpected);\n        if (!this.state.output) {\n            console.warn(\"no output enabled to send the message\");\n            return;\n        }\n        let out = outputById(this.state.output);\n        if (!out) {\n            console.warn(`send: output ${this.state.output} not found`);\n            return;\n        }\n        out.sendSysex(SYSEX_SIGNATURE, msg);\n    };\n\n    readPacer = (msg, bytesExpected) => {\n        this.showBusy({busy: true, busyMessage: \"receiving data...\", bytesReceived: 0, bytesExpected});\n        this.sendSysex(msg, bytesExpected);\n    };\n\n    updatePacer = (messages) => {\n        for (let m of messages) {\n            this.sendSysex(m, 0);\n        }\n        // this.addInfoMessage(`update${messages.length > 1 ? 's' : ''} sent to Pacer`);\n    };\n\n    render() {\n\n        const { output, presetIndex, controlId, data, changed, dropZoneActive } = this.state;\n\n        let showEditor = false;\n\n        if (data) {\n\n            showEditor = true;\n\n            if (!(TARGET_PRESET in data)) {\n                console.log(`Presets: invalid data`, data);\n                showEditor = false;\n            }\n\n            if (showEditor && !(presetIndex in data[TARGET_PRESET])) {\n                // console.log(`Presets: preset ${presetIndex} not found in data`);\n                showEditor = false;\n            }\n\n            if (showEditor && !(\"controls\" in data[TARGET_PRESET][presetIndex])) {\n                // console.log(`Presets: controls not found in data`);\n                showEditor = false;\n            }\n\n            if (showEditor && !(controlId in data[TARGET_PRESET][presetIndex][\"controls\"])) {\n                // console.log(`Presets: control ${controlId} not found in data`);\n                showEditor = false;\n            }\n\n            if (showEditor && !(\"steps\" in data[TARGET_PRESET][presetIndex][\"controls\"][controlId])) {\n                // console.log(`Presets: steps not found in data`);\n                showEditor = false;\n            }\n\n        }\n\n        showEditor = showEditor && (Object.keys(data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"steps\"]).length === 6);\n\n        let updateMessages = [];\n        if (showEditor) {\n            updateMessages = getControlUpdateSysexMessages(presetIndex, controlId, data);\n            let n = buildPresetNameSysex(presetIndex, data);\n            if (n) {\n                updateMessages.push(n);\n            }\n        }\n\n        const overlayStyle = {\n            position: 'absolute',\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0,\n            paddingTop: '4rem',\n            background: 'rgba(0,0,0,0.4)',\n            textAlign: 'center',\n            color: '#fff',\n            fontSize: '4rem'\n        };\n\n        // console.log(\"Presets.render\", showEditor, presetIndex, controlId);\n\n        // const inputOpenFileRef = React.createRef();\n\n        return (\n\n            <Dropzone\n                disableClick\n                style={{position: \"relative\"}}\n                // accept={accept}\n                onDrop={this.onDrop}\n                onDragEnter={this.onDragEnter}\n                onDragLeave={this.onDragLeave}\n            >\n\n                {dropZoneActive &&\n                <div style={overlayStyle}>\n                    Drop sysex file...\n                </div>}\n\n                <div className=\"wrapper\">\n\n                    <div className=\"subheader\">\n                        <Midi only={ANY_MIDI_PORT} autoConnect={PACER_MIDI_PORT_NAME}\n                              portsRenderer={(groupedPorts, clickHandler) => <PortsGrid groupedPorts={groupedPorts} clickHandler={clickHandler} />}\n                              onMidiInputEvent={this.handleMidiInputEvent}\n                              onInputConnection={this.onInputConnection}\n                              onInputDisconnection={this.onInputDisconnection}\n                              onOutputConnection={this.onOutputConnection}\n                              onOutputDisconnection={this.onOutputDisconnection}\n                              className=\"\" >\n                            <div className=\"no-midi\">Please connect your Pacer to your computer.</div>\n                        </Midi>\n                    </div>\n\n                    <div className=\"content\">\n\n                        <div className=\"instructions\">\n                            You can click on a preset to only load this specific preset from the Pacer. <br />\n                            Or you can use the ad-hoc button to read ALL the presets from the Pacer. <br />\n                            You can also load a patch file or send a dump from the Pacer.\n                        </div>\n\n                        <div className=\"content-row-content first\">\n                            <h2>Preset:</h2>\n                            <div className=\"content-row-content-content\">\n                                <div className=\"selectors\">\n                                    <PresetSelector data={data} currentPreset={presetIndex} onClick={this.selectPreset} />\n                                    <div className=\"preset-buttons\">\n                                        {output && <button className=\"space-right\" onClick={() => this.readPacer(requestAllPresets(), ALL_PRESETS_EXPECTED_BYTES)}>Read all presets from Pacer</button>}\n                                        <input ref={this.inputOpenFileRef} type=\"file\" style={{display:\"none\"}}  onChange={this.onChangeFile} />\n                                        <button onClick={this.onInputFile}>Load preset(s) from file</button>\n                                        {/* data &&\n                                        <Download data={this.state.binData} filename={`pacer-preset-${presetIndexToXY(presetIndex)}`} addTimestamp={true}\n                                                  label=\"Download preset\" />\n                                        */}\n                                    </div>\n                                </div>\n                                {data && data[TARGET_PRESET][presetIndex] && <PresetNameEditor name={data[TARGET_PRESET][presetIndex][\"name\"]} onUpdate={(name) => this.updatePresetName(name)} />}\n                            </div>\n                        </div>\n\n\n                        <div className=\"content-row-content\">\n                            <Fragment>\n                                {/*<h2>{CONTROLS_FULLNAME[controlId]}:</h2>*/}\n                                <h2>Controls</h2>\n                                {isVal(presetIndex) && <ControlSelector currentControl={controlId} onClick={this.selectControl} />}\n                                {showEditor &&\n                                <div className=\"content-row-content-content\">\n                                    <ControlStepsEditor\n                                        controlId={controlId}\n                                        steps={data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"steps\"]}\n                                        onUpdate={(stepIndex, dataType, dataIndex, value) => this.updateControlStep(controlId, stepIndex, dataType, dataIndex, value)}/>\n                                    <ControlModeEditor\n                                        controlId={controlId}\n                                        mode={data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"control_mode\"]}\n                                        onUpdate={(value) => this.updateControlMode(controlId, value)}/>\n                                </div>\n                                }\n                            </Fragment>\n                        </div>\n\n                        {changed &&\n                        <div className=\"content-row-content\">\n                            <Fragment>\n                                <h2>Send the updated config to the Pacer:</h2>\n                                <div className=\"content-row-content-content\">\n                                    <div className=\"actions\">\n                                        <button className=\"update\" onClick={() => this.updatePacer(updateMessages)}>Update Pacer</button>\n                                    </div>\n                                </div>\n                            </Fragment>\n                        </div>\n                        }\n\n                        {this.props.debug && showEditor &&\n                        <div className=\"content-row-content first\">\n                            <div className=\"debug\">\n                            <h4>[Debug] Update messages to send:</h4>\n                            <div className=\"message-to-send\">\n                                {updateMessages.map((m, i) => <div key={i} className=\"code\">{hs(m)}</div>)}\n                            </div>\n                            </div>\n                        </div>\n                        }\n\n                    </div>\n\n                </div>\n\n            </Dropzone>\n\n        );\n    }\n\n}\n\nexport default Preset;\n","import * as WebMidi from \"webmidi\";\n\nexport const MESSAGE = {\n    0x80: \"Note Off\",\n    0x90: \"Note On\",\n    0xA0: \"AfterTouch\",\n    0xB0: \"Control Change\",\n    0xC0: \"Program Change\",\n    0xD0: \"Channel Pressure\",\n    0xE0: \"Pitch Wheel\"\n};\n\nexport const CONTROLER = {\n    0: \"Bank Select (coarse)\",\n    1: \"Modulation Wheel (coarse)\",\n    2: \"Breath controller (coarse)\",\n    4: \"Foot Pedal (coarse)\",\n    5: \"Portamento Time (coarse)\",\n    6: \"Data Entry (coarse)\",\n    7: \"Volume (coarse)\",\n    8: \"Balance (coarse)\",\n    10: \"Pan position (coarse)\",\n    11: \"Expression (coarse)\",\n    12: \"Effect Control 1 (coarse)\",\n    13: \"Effect Control 2 (coarse)\",\n    16: \"General Purpose Slider 1\",\n    17: \"General Purpose Slider 2\",\n    18: \"General Purpose Slider 3\",\n    19: \"General Purpose Slider 4\",\n    32: \"Bank Select (fine)\",\n    33: \"Modulation Wheel (fine)\",\n    34: \"Breath controller (fine)\",\n    36: \"Foot Pedal (fine)\",\n    37: \"Portamento Time (fine)\",\n    38: \"Data Entry (fine)\",\n    39: \"Volume (fine)\",\n    40: \"Balance (fine)\",\n    42: \"Pan position (fine)\",\n    43: \"Expression (fine)\",\n    44: \"Effect Control 1 (fine)\",\n    45: \"Effect Control 2 (fine)\",\n    64: \"Hold Pedal (on/off)\",\n    65: \"Portamento (on/off)\",\n    66: \"Sustenuto Pedal (on/off)\",\n    67: \"Soft Pedal (on/off)\",\n    68: \"Legato Pedal (on/off)\",\n    69: \"Hold 2 Pedal (on/off)\",\n    70: \"Sound Variation\",\n    71: \"Sound Timbre\",\n    72: \"Sound Release Time\",\n    73: \"Sound Attack Time\",\n    74: \"Sound Brightness\",\n    75: \"Sound Control 6\",\n    76: \"Sound Control 7\",\n    77: \"Sound Control 8\",\n    78: \"Sound Control 9\",\n    79: \"Sound Control 10\",\n    80: \"General Purpose Button 1 (on/off)\",\n    81: \"General Purpose Button 2 (on/off)\",\n    82: \"General Purpose Button 3 (on/off)\",\n    83: \"General Purpose Button 4 (on/off)\",\n    91: \"Effects Level\",\n    92: \"Tremulo Level\",\n    93: \"Chorus Level\",\n    94: \"Celeste Level\",\n    95: \"Phaser Level\",\n    96: \"Data Button increment\",\n    97: \"Data Button decrement\",\n    98: \"Non-registered Parameter (fine)\",\n    99: \"Non-registered Parameter (coarse)\",\n    100: \"Registered Parameter (fine)\",\n    101: \"Registered Parameter (coarse)\",\n    120: \"All Sound Off\",\n    121: \"All Controllers Off\",\n    122: \"Local Keyboard (on/off)\",\n    123: \"All Notes Off\",\n    124: \"Omni Mode Off\",\n    125: \"Omni Mode On\",\n    126: \"Mono Operation\",\n    127: \"Poly Operation\"\n};\n\n\nexport const groupPortsByName = () => {\n    let g = {};\n    for (let p of WebMidi.inputs) {\n        g[p.name] = {\n            input: p.id,\n            output: null\n        };\n    }\n    for (let p of WebMidi.outputs) {\n        if (!(p.name in g)) {\n            g[p.name] = {input: null, output: null};\n        }\n        g[p.name].output = p.id\n    }\n    return g;\n};\n","import React, {Component} from 'react';\nimport Midi from \"../components/Midi\";\nimport {produce} from \"immer\";\nimport parseMidi from 'parse-midi';\nimport {hs} from \"../utils/hexstring\";\nimport {CONTROLER, MESSAGE} from \"../utils/midi\";\nimport * as Note from \"tonal-note\";\nimport \"./Monitor.css\";\nimport PortsGrid from \"../components/PortsGrid\";\nimport {ANY_MIDI_PORT} from \"../pacer/constants\";\n\nconst MAX_MESSAGES = 40;\n\nclass Monitor extends Component {\n\n    state = {\n        messages: []\n    };\n\n    handleMidiInputEvent = (event) => {\n        // if (event instanceof MIDIMessageEvent) {\n        this.setState(\n            produce(draft => {\n                let len = draft.messages.unshift(event.data);\n                if (len > MAX_MESSAGES) draft.messages.pop();\n            })\n        )\n        // }\n    };\n\n    render() {\n\n        return (\n\n            <div className=\"wrapper\">\n\n                <div className=\"subheader\">\n                    <Midi only={ANY_MIDI_PORT} autoConnect={ANY_MIDI_PORT}\n                          portsRenderer={(groupedPorts, clickHandler) => <PortsGrid groupedPorts={groupedPorts} clickHandler={clickHandler} />}\n                        // inputRenderer={this.renderPort} outputRenderer={this.renderPort}\n                          onMidiInputEvent={this.handleMidiInputEvent}>\n                        <div className=\"no-midi\">Please connect your Pacer or any other MIDI device to your computer.</div>\n                    </Midi>\n                </div>\n\n                <div className=\"content\">\n                    <div>\n\n                        <div className=\"instructions\">\n                            The messages are displayed in reverse chronological order (the most recent on top). Only the last 40 messages are displayed.\n                        </div>\n\n                        <div className=\"content-row-content first\">\n                            <h2>MIDI messages</h2>\n                            <div className=\"content-row-content-content\">\n                                <div className=\"messages\">\n                                    {this.state.messages.map((msg, i) => {      //TODO: display timestamp\n                                        let m = parseMidi(msg);\n                                        let info2 = '';\n                                        let info3 = '';\n                                        switch (m.messageCode) {\n                                            case 0x80:      // {messageCode: 144, channel: 1, messageType: \"noteon\", key: 70, velocity: 21}\n                                            case 0x90:\n                                                info2 = Note.fromMidi(m.key);\n                                                info3 = `velocity: ${m.velocity}`;\n                                                break;\n                                            case 0xA0:  // \"AfterTouch\",\n                                                break;\n                                            case 0xB0:\n                                                info2 = CONTROLER[m.controlNumber];\n                                                info3 = m.controlValue;\n                                                break;\n                                            case 0xC0:          // {messageCode: 192, channel: 4, messageType: \"programchange\", program: 102} \"C0\"\n                                                info2 = `program: ${m.program}`;\n                                                info3 = '';\n                                                break;\n                                            case 0xD0:  // \"Channel Pressure\\\",\\n\"\n                                                break;\n                                            case 0xE0:          // {messageCode: 224, channel: 1, messageType: \"pitchbendchange\", pitchBend: 8283, pitchBendMultiplier: 0.011109754608716884}\n                                                info2 = `bend: ${m.pitchBend}`;\n                                                info3 = `multiplier: ${m.pitchBendMultiplier}`;\n                                                break;\n                                            default:\n                                                break;\n                                        }\n                                        return (\n                                            <div>\n                                                <span className=\"code\">[{hs(msg)}]</span>\n                                                <span className=\"msg-channel\">Channel {m.channel}</span>\n                                                <span className=\"msg-name\">{MESSAGE[m.messageCode]}</span>\n                                                <span className=\"msg-data\">{info2}</span>\n                                                <span className=\"msg-data\">{info3}</span>\n                                            </div>\n                                        );\n                                    })}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default Monitor;\n","import React from 'react';\nimport \"./Footer.css\";\n\nconst Footer = () => {\n    return (\n        <div className=\"footer\">\n            <div className=\"gh\">\n                <a href=\"https://github.com/francoisgeorgy/pacer-editor\" target=\"_blank\" rel=\"noopener noreferrer\">Source code available on GitHub</a>\n{/*\n                <a aria-label=\"Homepage\" title=\"project on github\" href=\"https://github.com/francoisgeorgy/pacer-editor\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    <svg height=\"24\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"24\" aria-hidden=\"true\">\n                        <path fillRule=\"evenodd\" d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z\"></path>\n                    </svg>\n                </a>\n*/}\n            </div>\n            <div>\n                {/*<p>“Nektar Technology”, the logo and all other Nektar Technology product, technology or service names and*/}\n                    {/*logos are trademarks or registered trademarks of Nektar Technology, Inc.</p>*/}\n                <p>This web site is not endorsed by, directly affiliated with, maintained, or sponsored by Nektar Technology.\n                    This web site is published under <a href=\"https://www.gnu.org/licenses/gpl-3.0.en.html\" target=\"_blank\" rel=\"noopener noreferrer\">GNU General Public License v3</a>.\n                </p>\n            </div>\n        </div>\n    );\n};\n\nexport default Footer;\n","import React, {Component} from 'react';\n\nclass Global extends Component {\n\n    render() {\n\n        return (\n            <div className=\"content\">\n\n                <div className=\"doc\" style={{marginTop: '16px'}}>\n                    Sorry, this feature is not implemented yet.\n                </div>\n\n            </div>\n        );\n    }\n\n}\n\nexport default Global;\n","import React, {Component} from 'react';\nimport Dropzone from \"react-dropzone\";\nimport {produce} from \"immer\";\nimport {isSysexData, mergeDeep, parseSysexDump} from \"../pacer/sysex\";\nimport DumpSysex from \"../components/DumpSysex\";\nimport './DumpDecoder.css';\nimport {hs} from \"../utils/hexstring\";\nimport Midi from \"../components/Midi\";\nimport {ANY_MIDI_PORT, PACER_MIDI_PORT_NAME} from \"../pacer/constants\";\nimport PortsGrid from \"../components/PortsGrid\";\n\nconst MAX_FILE_SIZE = 5 * 1024*1024;\n\nclass DumpDecoder extends Component {\n\n    state = {\n        data: null\n    };\n\n    /**\n     * Ad-hoc method to show the busy flag and set a timeout to make sure the busy flag is hidden after a timeout.\n     */\n    showBusy = ({busy = false, busyMessage = null, bytesExpected = -1, bytesReceived = -1} = {}) =>  {\n        // console.log(\"show busy\", busyMessage);\n        setTimeout(() => this.props.onBusy({busy: false}), 20000);\n        this.props.onBusy({busy: true, busyMessage, bytesExpected, bytesReceived});\n    };\n\n    /**\n     *\n     * @param files\n     * @returns {Promise<void>}\n     */\n    async readFiles(files) {\n        await Promise.all(files.map(\n            async file => {\n                if (file.size > MAX_FILE_SIZE) {\n                    console.warn(`${file.name}: file too big, ${file.size}`);\n                } else {\n                    this.showBusy({busy: true, busyMessage: \"loading file...\"});\n                    const data = new Uint8Array(await new Response(file).arrayBuffer());\n                    if (isSysexData(data)) {\n                        this.setState(\n                            produce(draft => {\n                                draft.data = mergeDeep(draft.data || {}, parseSysexDump(data));\n                                this.props.onBusy(false);\n                            })\n                        );\n                        // this.addInfoMessage(\"sysfile decoded\");\n                    } else {\n                        console.log(\"readFiles: not a sysfile\", hs(data.slice(0, 5)));\n                    }\n                    this.props.onBusy({busy: false});\n                    // non sysex files are ignored\n                }\n                // too big files are ignored\n            }\n        ));\n    }\n\n    onDragEnter = () => {\n        this.setState({\n            dropZoneActive: true\n        });\n    };\n\n    onDragLeave= () => {\n        this.setState({\n            dropZoneActive: false\n        });\n    };\n\n    /**\n     * Drop Zone handler\n     * @param files\n     */\n    onDrop = (files) => {\n        // console.log('drop', files);\n        this.setState(\n        {\n                data: null,\n                dropZoneActive: false\n            },\n    () => {this.readFiles(files)});\n    };\n\n    handleMidiInputEvent = (event) => {\n        // console.log(\"DumpDecoder.handleMidiInputEvent\", event, event.data);\n        // if (event instanceof MIDIMessageEvent) {\n        if (isSysexData(event.data)) {\n            // console.log(\"DumpDecoder.handleMidiInputEvent: data is SysEx\");\n            this.setState(\n                produce(draft => {\n                    draft.data = mergeDeep(draft.data || {}, parseSysexDump(event.data));\n                    // this.props.onBusy(false);\n                })\n            )\n        } else {\n            console.log(\"MIDI message is not a sysex message\")\n        }\n        // }\n    };\n\n\n    /**\n     * @returns {*}\n     */\n    render() {\n\n        const { data, dropZoneActive } = this.state;\n\n        const overlayStyle = {\n            position: 'absolute',\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0,\n            paddingTop: '1rem',\n            background: 'rgba(0,0,0,0.4)',\n            textAlign: 'center',\n            color: '#fff',\n            fontSize: '4rem'\n        };\n\n        return (\n\n            <Dropzone\n                disableClick\n                style={{position: \"relative\"}}\n                // accept={accept}\n                onDrop={this.onDrop}\n                onDragEnter={this.onDragEnter}\n                onDragLeave={this.onDragLeave}>\n\n                {dropZoneActive &&\n                <div style={overlayStyle}>\n                    Drop sysex file...\n                </div>}\n\n                <div className=\"wrapper\">\n\n                    <div className=\"subheader\">\n                        <Midi only={ANY_MIDI_PORT} autoConnect={PACER_MIDI_PORT_NAME}\n                              portsRenderer={(groupedPorts, clickHandler) => <PortsGrid groupedPorts={groupedPorts} clickHandler={clickHandler} />}\n                              onMidiInputEvent={this.handleMidiInputEvent}\n                              className=\"sub-header\" >\n                            <div className=\"no-midi\">Please connect your Pacer to your computer.</div>\n                        </Midi>\n                    </div>\n\n                    <div className=\"content\">\n\n                        <div className=\"instructions\">\n                            Send a dump from your Pacer or<br />drag & drop a patch file here.\n                        </div>\n\n                        <div className=\"content-row-content first\">\n                            <div className=\"content-row-content-content\">\n                                <div>\n                                    <DumpSysex data={data} />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n{/*\n                <div className=\"right-column\">\n                    <Dropzone onDrop={this.onDrop} className=\"drop-zone\">\n                        Drop a binary sysex file here<br />or click to open the file dialog\n                    </Dropzone>\n                    <h3>Log:</h3>\n                    <Status messages={this.state.statusMessages} />\n                </div>\n*/}\n\n                </div>\n\n            </Dropzone>\n\n        );\n    }\n}\n\nexport default DumpDecoder;\n","import React, {Component, Fragment} from 'react';\nimport {\n    MSG_CTRL_OFF,\n    MSG_SW_NOTE,\n    MSG_TYPES_FULLNAME_MIDI_SORTED,\n    MSG_TYPES_DATA_HELP\n} from \"../pacer/constants\";\nimport * as Note from \"tonal-note\";\nimport \"./MidiSettingsEditor.css\";\n\nconst MidiNote = ({ note, onChange }) => {\n    return (\n        <select onChange={(event) => onChange(event.target.value)} value={note}>\n            {\n                Array.from(Array(127).keys()).map(\n                    i => {\n                        let n = Note.fromMidi(i, true);\n                        return <option key={i} value={i}>{n}</option>\n                    })\n            }\n        </select>\n    );\n};\n\nconst Setting = ({ index, config, updateCallback }) => {\n\n    let inactive = config.msg_type === MSG_CTRL_OFF;\n\n    if (inactive) {\n        return (\n            <Fragment>\n                <div className=\"setting-row-header\">setting {index}:</div>\n                <div>\n                    <select onChange={(event) => updateCallback(\"msg_type\", null, event.target.value)} value={config.msg_type}>\n                        {\n                            // Object.keys(MSG_TYPES_FULLNAME_SW).map(\n                            //     key => {\n                            //         return <option key={key} value={key}>{MSG_TYPES_FULLNAME_SW[key]}</option>\n                            //     })\n                            MSG_TYPES_FULLNAME_MIDI_SORTED.map(\n                                v => {\n                                    return <option key={v.key} value={v.key}>{v.value}</option>\n                            })\n                        }\n                    </select>\n                </div>\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n            </Fragment>\n        );\n    }\n\n    let d0, d1, d2;\n    if (config.msg_type === MSG_SW_NOTE) {\n        d0 = <MidiNote note={config.data[0]} onChange={(value) => updateCallback(\"data\", 0, value)} />;\n        d1 = <input type=\"text\" value={config.data[1]} onChange={(event) => updateCallback(\"data\", 1, event.target.value)} />;\n        d2 = '';\n    } else {\n        d0 = <input type=\"text\" value={config.data[0]} onChange={(event) => updateCallback(\"data\", 0, event.target.value)} />;\n        d1 = <input type=\"text\" value={config.data[1]} onChange={(event) => updateCallback(\"data\", 1, event.target.value)} />;\n        d2 = <input type=\"text\" value={config.data[2]} onChange={(event) => updateCallback(\"data\", 2, event.target.value)} />;\n    }\n\n    return (\n        <Fragment>\n            <div className=\"setting-row-header\">Setting {index}:</div>\n            <div>\n                <select onChange={(event) => updateCallback(\"msg_type\", null, event.target.value)} value={config.msg_type}>\n                {\n                    MSG_TYPES_FULLNAME_MIDI_SORTED.map(\n                        v => {\n                            return <option key={v.key} value={v.key}>{v.value}</option>\n                        })\n                }\n                </select>\n            </div>\n            <div>{d0}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][0]}</div></div>\n            <div>{d1}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][1]}</div></div>\n            <div>{d2}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][2]}</div></div>\n            <div>\n                <select onChange={(event) => updateCallback(\"channel\", null, event.target.value)} value={config.channel}>\n                    {\n                        Array.from(Array(16).keys()).map(i => <option key={i} value={i}>{i}</option>)\n                    }\n                </select>\n            </div>\n        </Fragment>\n    );\n};\n\nclass MidiSettingsEditor extends Component {\n\n    onSettingUpdate = (settingIndex, dataType, dataIndex, value) => {\n        this.props.onUpdate(settingIndex, dataType, dataIndex, value);\n    };\n\n    render() {\n\n        const settings = this.props.settings;\n\n        return (\n            <div className=\"settings\">\n                <div></div>\n                <div className=\"setting-col-header\">Type</div>\n                <div className=\"setting-col-header\">Data 1</div>\n                <div className=\"setting-col-header\">Data 2</div>\n                <div className=\"setting-col-header\">Data 3</div>\n                <div className=\"setting-col-header\">MIDI Ch.</div>\n                {Object.keys(settings).map(i =>\n                    <Setting key={i} index={i} config={settings[i]} updateCallback={(dataType, dataIndex, value) => this.onSettingUpdate(i, dataType, dataIndex, value)} />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default MidiSettingsEditor;\n","import React, {Component, Fragment} from 'react';\nimport PresetSelector from \"../components/PresetSelector\";\nimport {\n    ALL_PRESETS_EXPECTED_BYTES,\n    buildPresetNameSysex,\n    getMidiSettingUpdateSysexMessages,\n    isSysexData,\n    mergeDeep,\n    parseSysexDump, requestAllPresets, requestPreset, SINGLE_PRESET_EXPECTED_BYTES\n} from \"../pacer/sysex\";\nimport Midi from \"../components/Midi\";\nimport Dropzone from \"react-dropzone\";\nimport \"./Preset.css\";\nimport {produce} from \"immer\";\nimport {\n    ANY_MIDI_PORT,\n    MSG_CTRL_OFF,\n    PACER_MIDI_PORT_NAME,\n    SYSEX_SIGNATURE,\n    TARGET_PRESET\n} from \"../pacer/constants\";\nimport {hs} from \"../utils/hexstring\";\nimport MidiSettingsEditor from \"../components/MidiSettingsEditor\";\nimport {inputName, outputById, outputName} from \"../utils/ports\";\nimport PresetNameEditor from \"../components/PresetNameEditor\";\nimport PortsGrid from \"../components/PortsGrid\";\n\nconst MAX_FILE_SIZE = 5 * 1024*1024;\n\nconst MAX_STATUS_MESSAGES = 40;\n\nfunction isVal(v) {\n    return v !== undefined && v !== null && v !== '';\n}\n\nfunction batchMessages(callback, callbackBusy, wait) {\n\n    let messages = [];  // batch of received messages\n    let timeout;\n\n    return function() {\n        clearTimeout(timeout);\n        let event = arguments[0];\n        messages.push(event.data);\n        // console.log('rec sysex', messages.length);\n        callbackBusy(messages.length);\n        timeout = setTimeout(() => {\n            // console.log(\"timeout elapsed\");\n            timeout = null;\n            callback(messages);\n            messages = [];\n        }, wait);\n    };\n}\n\nclass PresetMidi extends Component {\n\n    state = {\n        output: null,       // MIDI output port used for output\n        presetIndex: null,  //\n        changed: false,     // true when the control has been edited\n        data: null,\n        statusMessages: []\n    };\n\n    /**\n     * Ad-hoc method to show the busy flag and set a timeout to make sure the busy flag is hidden after a timeout.\n     */\n    showBusy = ({busy = false, busyMessage = null, bytesExpected = -1, bytesReceived = -1} = {}) =>  {\n        // console.log(\"show busy\", busyMessage);\n        setTimeout(() => this.props.onBusy({busy: false}), 20000);\n        this.props.onBusy({busy: true, busyMessage, bytesExpected, bytesReceived});\n    };\n\n    addStatusMessage = (type, message) => {\n        this.setState(\n            produce(draft => {\n                let m = { type, message };\n                let len = draft.statusMessages.push(m);\n                if (len > MAX_STATUS_MESSAGES) draft.statusMessages.shift();\n            })\n        );\n    };\n\n    addInfoMessage = message => {\n        this.addStatusMessage(\"info\", message);\n    };\n\n    addWarningMessage = message => {\n        this.addStatusMessage(\"warning\", message);\n    };\n\n    addErrorMessage = message => {\n        this.addStatusMessage(\"error\", message);\n    };\n\n    handleMidiInputEvent = batchMessages(\n        messages => {\n            this.setState(\n                produce(\n                    draft => {\n                        for (let m of messages) {\n                            if (isSysexData(m)) {\n                                draft.data = mergeDeep(draft.data || {}, parseSysexDump(m));\n                            } else {\n                                console.log(\"MIDI message is not a sysex message\")\n                            }\n                        }\n                        let pId = Object.keys(draft.data[TARGET_PRESET])[0];\n                        draft.presetIndex = parseInt(pId, 10);\n                    }\n                )\n            );\n            // let bytes = messages.reduce((accumulator, element) => accumulator + element.length, 0);\n            // this.addInfoMessage(`${messages.length} messages received (${bytes} bytes)`);\n            // this.props.onBusy(false);\n            this.props.onBusy({busy: false});\n        },\n        (n) => {\n            // console.log(n);\n            this.props.onBusy({busy: true, bytesReceived: n});\n        },\n        1000\n    );\n\n    /**\n     *\n     * @param files\n     * @returns {Promise<void>}\n     */\n    async readFiles(files) {\n        await Promise.all(files.map(\n            async file => {\n                if (file.size > MAX_FILE_SIZE) {\n                    console.warn(`readFiles: ${file.name}: file too big, ${file.size}`);\n                    // this.addWarningMessage(\"file too big\");\n                } else {\n                    this.showBusy({busy: true, busyMessage: \"loading file...\"});\n                    const data = new Uint8Array(await new Response(file).arrayBuffer());\n                    if (isSysexData(data)) {\n                        this.setState(\n                            produce(draft => {\n                                // draft.data = mergeDeep(draft.data || {}, parseSysexDump(data));\n                                draft.data = parseSysexDump(data);\n                                let pId = Object.keys(draft.data[TARGET_PRESET])[0];\n                                draft.presetIndex = parseInt(pId, 10);\n                            })\n                        );\n                        this.addInfoMessage(\"sysfile decoded\");\n                    } else {\n                        this.addWarningMessage(\"not a sysfile\");\n                        console.log(\"readFiles: not a sysfile\", hs(data.slice(0, 5)));\n                    }\n                    this.props.onBusy({busy: false});\n                    // non sysex files are ignored\n                }\n                // too big files are ignored\n            }\n        ));\n    }\n\n    onChangeFile = (e) => {\n        console.log(\"onChangeFile\", e);\n        var file = e.target.files[0];\n        console.log(file);\n        this.readFiles([file]);\n    };\n\n    onInputFile = (e) => {\n        console.log(\"onInputFile\", e);\n        this.inputOpenFileRef.current.click()\n    };\n\n    onDragEnter = () => {\n        this.setState({\n            dropZoneActive: true\n        });\n    };\n\n    onDragLeave= () => {\n        this.setState({\n            dropZoneActive: false\n        });\n    };\n\n    /**\n     * Drop Zone handler\n     * @param files\n     */\n    onDrop = (files) => {\n        // console.log('drop', files);\n        this.setState(\n            {\n                data: null,\n                changed: false,\n                dropZoneActive: false\n            },\n            () => {this.readFiles(files)}   // returned promise from readFiles() is ignored, this is normal.\n        );\n    };\n\n    selectPreset = (index) => {\n        // if the user selects another preset or control, then clear the data in the state\n        const { data } = this.state;\n        if (data && data[TARGET_PRESET] && data[TARGET_PRESET][index]) {\n            this.setState(\n                produce(draft => {\n                    draft.presetIndex = index;\n                })\n            );\n        } else {\n            this.setState(\n                produce(draft => {\n                    draft.presetIndex = index;\n                    if (index !== this.state.presetIndex) {\n                        draft.data = null;\n                        draft.changed = false;\n                    }\n                })\n            );\n            if (isVal(index)) {   // && this.state.controlId) {\n                // this.sendSysex(requestPresetObj(id, this.state.controlId));\n                // To get the LED data, we need to request the complete preset config instead of just the specific control's config.\n                this.sendSysex(requestPreset(index), SINGLE_PRESET_EXPECTED_BYTES);\n            }\n        }\n    };\n\n    /**\n     * dataIndex is only used when dataType == \"data\"\n     */\n    updateMidiSettings = (settingIndex, dataType, dataIndex, value) => {\n        // console.log(\"PresetMidi.updateMidiSettings\", settingIndex, dataIndex, value);\n        let v = parseInt(value, 10);\n        this.setState(\n            produce(draft => {\n                if (dataType === \"data\") {\n                    draft.data[TARGET_PRESET][draft.presetIndex][\"midi\"][settingIndex][\"data\"][dataIndex] = v;\n                } else {\n                    draft.data[TARGET_PRESET][draft.presetIndex][\"midi\"][settingIndex][dataType] = v;\n                }\n                if (dataType === \"msg_type\") {\n                    if (v === MSG_CTRL_OFF) {\n                        draft.data[TARGET_PRESET][draft.presetIndex][\"midi\"][settingIndex][\"active\"] = 0;\n                    } else {\n                        draft.data[TARGET_PRESET][draft.presetIndex][\"midi\"][settingIndex][\"active\"] = 1;\n                    }\n                }\n                draft.data[TARGET_PRESET][draft.presetIndex][\"midi\"][settingIndex][\"changed\"] = true;\n                draft.changed = true;\n            })\n        );\n    };\n\n    updatePresetName = (name) => {\n        // console.log(\"PresetMidi.updateName\", name);\n        if (name === undefined || name === null) return;\n        if (name.length > 5) {\n            console.warn(`PresetMidi.updateName: name too long: ${name}`);\n            return;\n        }\n        this.setState(\n            produce(draft => {\n                draft.data[TARGET_PRESET][draft.presetIndex][\"name\"] = name;    // TODO : buld update message\n                draft.data[TARGET_PRESET][draft.presetIndex][\"changed\"] = true;\n                draft.changed = true;\n            })\n        );\n    };\n\n    onInputConnection = (port_id) => {\n        this.addInfoMessage(`input ${inputName(port_id)} connected`);\n    };\n\n    onInputDisconnection = (port_id) => {\n        this.addInfoMessage(`input ${inputName(port_id)} disconnected`);\n    };\n\n    onOutputConnection = (port_id) => {\n        console.log(\"onOutputConnection\");\n        this.setState(\n            produce(draft => {\n                draft.output = port_id;\n            })\n        );\n        // this.addInfoMessage(`output ${outputName(port_id)} connected`);\n    };\n\n    onOutputDisconnection = (port_id) => {\n        console.log(\"onOutputDisconnection\");\n        this.setState(\n            produce(draft => {\n                draft.output = null;        // we manage only one output connection at a time\n            })\n        );\n        this.addInfoMessage(`output ${outputName(port_id)} disconnected`);\n    };\n\n    sendSysex = (msg, bytesExpected) => {\n        console.log(\"sendSysex\", msg, bytesExpected);\n        if (!this.state.output) {\n            console.warn(\"no output enabled to send the message\");\n            return;\n        }\n        let out = outputById(this.state.output);\n        if (!out) {\n            console.warn(`send: output ${this.state.output} not found`);\n            return;\n        }\n        this.showBusy({busy: true, busyMessage: \"receiving data...\", bytesReceived: 0, bytesExpected});\n        out.sendSysex(SYSEX_SIGNATURE, msg);\n    };\n\n    updatePacer = (messages) => {\n        for (let m of messages) {\n            this.sendSysex(m, 0);\n        }\n        // this.addInfoMessage(`update${messages.length > 1 ? 's' : ''} sent to Pacer`);\n    };\n\n    render() {\n\n        const { output, presetIndex, data, changed, dropZoneActive } = this.state;\n\n        let showEditor = false;\n\n        if (data) {\n\n            showEditor = true;\n\n            if (!(TARGET_PRESET in data)) {\n                console.log(`PresetMidi: invalid data`, data);\n                showEditor = false;\n            }\n\n            if (showEditor && !(presetIndex in data[TARGET_PRESET])) {\n                // console.log(`PresetMid: preset ${presetIndex} not found in data`);\n                showEditor = false;\n            }\n\n            if (showEditor && !(\"midi\" in data[TARGET_PRESET][presetIndex])) {\n                // console.log(`PresetMidi: midi not found in data`);\n                showEditor = false;\n            }\n        }\n\n        showEditor = showEditor && (Object.keys(data[TARGET_PRESET][presetIndex][\"midi\"]).length === 16);\n\n        let updateMessages = [];\n        if (showEditor) {\n            updateMessages = getMidiSettingUpdateSysexMessages(presetIndex, data);\n            let n = buildPresetNameSysex(presetIndex, data);\n            if (n) {\n                updateMessages.push(n);\n            }\n        }\n\n        const overlayStyle = {\n            position: 'absolute',\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0,\n            paddingTop: '4rem',\n            background: 'rgba(0,0,0,0.4)',\n            textAlign: 'center',\n            color: '#fff',\n            fontSize: '4rem'\n        };\n\n        return (\n\n            <Dropzone\n                disableClick\n                style={{position: \"relative\"}}\n                // accept={accept}\n                onDrop={this.onDrop}\n                onDragEnter={this.onDragEnter}\n                onDragLeave={this.onDragLeave}\n            >\n            {dropZoneActive &&\n            <div style={overlayStyle}>\n                Drop sysex file...\n            </div>}\n\n            <div className=\"wrapper\">\n\n                <div className=\"subheader\">\n                    <Midi only={ANY_MIDI_PORT} autoConnect={PACER_MIDI_PORT_NAME}\n                          portsRenderer={(groupedPorts, clickHandler) => <PortsGrid groupedPorts={groupedPorts} clickHandler={clickHandler} />}\n                          onMidiInputEvent={this.handleMidiInputEvent}\n                          onInputConnection={this.onInputConnection}\n                          onInputDisconnection={this.onInputDisconnection}\n                          onOutputConnection={this.onOutputConnection}\n                          onOutputDisconnection={this.onOutputDisconnection}\n                          className=\"\" >\n                        <div className=\"no-midi\">Please connect your Pacer to your computer.</div>\n                    </Midi>\n                </div>\n\n                <div className=\"content\">\n\n                    <div className=\"instructions\">\n                        You can click on a preset to only load this specific preset from the Pacer. <br />\n                        Or you can use the ad-hoc button to read ALL the presets from the Pacer. <br />\n                        You can also load a patch file or send a dump from the Pacer.\n                    </div>\n\n                    <div className=\"content-row-content first\">\n                        <h2>Preset:</h2>\n                        <div className=\"content-row-content-content\">\n                            <div className=\"selectors\">\n                                <PresetSelector data={data} currentPreset={presetIndex} onClick={this.selectPreset} />\n                                <div className=\"preset-buttons\">\n                                    {output && <button className=\"space-right\" onClick={() => this.sendSysex(requestAllPresets(), ALL_PRESETS_EXPECTED_BYTES)}>Read all presets from Pacer</button>}\n                                    <input ref={this.inputOpenFileRef} type=\"file\" style={{display:\"none\"}}  onChange={this.onChangeFile} />\n                                    <button onClick={this.onInputFile}>Load preset(s) from file</button>\n                                    {/*data &&\n                                    <Download data={this.state.binData} filename={`pacer-preset-${presetIndexToXY(presetIndex)}`} addTimestamp={true}\n                                              label=\"Download preset\" />\n                                    */}\n                                </div>\n                            </div>\n                            {data && data[TARGET_PRESET][presetIndex] && <PresetNameEditor name={data[TARGET_PRESET][presetIndex][\"name\"]} onUpdate={(name) => this.updatePresetName(name)} />}\n                        </div>\n                    </div>\n\n                    {showEditor &&\n                    <div className=\"content-row-content\">\n                        <Fragment>\n                            <h2>Preset MIDI settings:</h2>\n                            <div className=\"content-row-content-content\">\n                                <MidiSettingsEditor settings={data[TARGET_PRESET][presetIndex][\"midi\"]}\n                                                    onUpdate={(settingIndex, dataType, dataIndex, value) => this.updateMidiSettings(settingIndex, dataType, dataIndex, value)} />\n                            </div>\n                        </Fragment>\n                    </div>\n                    }\n\n                    {changed &&\n                    <div className=\"content-row-content\">\n                        <Fragment>\n                            <h2>Send the updated config to the Pacer:</h2>\n                            <div className=\"content-row-content-content\">\n                                <div className=\"actions\">\n                                    <button className=\"update\" onClick={() => this.updatePacer(updateMessages)}>Update Pacer</button>\n                                </div>\n                            </div>\n                        </Fragment>\n                    </div>\n                    }\n\n                    {this.props.debug && showEditor &&\n                    <div className=\"content-row-content first\">\n                        <div className=\"debug\">\n                            <h4>[Debug] Update messages to send:</h4>\n                            <div className=\"message-to-send\">\n                                {updateMessages.map((m, i) => <div key={i} className=\"code\">{hs(m)}</div>)}\n                            </div>\n                        </div>\n                    </div>\n                    }\n\n                </div>\n\n            </div>\n\n            </Dropzone>\n\n        );\n    }\n\n}\n\nexport default PresetMidi;\n","import React, {Component} from \"react\";\n\nclass Download extends Component {\n\n    handleClick = (event) => {\n\n        console.log(this.props.data);\n\n        let url = window.URL.createObjectURL(new Blob([this.props.data], {type: \"application/octet-stream\"}));\n\n        let filename = this.props.filename;\n\n        if (this.props.addTimestamp) {\n            let now = new Date();\n            let timestamp =\n                now.getUTCFullYear() + \"-\" +\n                (\"0\" + (now.getUTCMonth() + 1)).slice(-2) + \"-\" +\n                (\"0\" + now.getUTCDate()).slice(-2) + \"-\" +\n                (\"0\" + now.getUTCHours()).slice(-2) + \"\" +\n                (\"0\" + now.getUTCMinutes()).slice(-2) + \"\" +\n                (\"0\" + now.getUTCSeconds()).slice(-2);\n            filename += '.' + timestamp;\n        }\n\n        let shadowlink = document.createElement(\"a\");\n        shadowlink.download = filename + \".syx\";\n        shadowlink.style.display = \"none\";\n        shadowlink.href = url;\n\n        document.body.appendChild(shadowlink);\n        shadowlink.click();\n        document.body.removeChild(shadowlink);\n\n        setTimeout(function() {\n            return window.URL.revokeObjectURL(url);\n        }, 1000);\n\n    };\n\n    render() {\n        return (\n            <button onClick={this.handleClick} className={this.props.className}>{this.props.label}</button>\n        );\n    }\n\n}\n\nexport default Download;\n","import React, {Component} from 'react';\nimport {produce} from \"immer\";\nimport {ALL_PRESETS_EXPECTED_BYTES, isSysexData, mergeDeep, parseSysexDump, requestAllPresets} from \"../pacer/sysex\";\nimport Midi from \"../components/Midi\";\nimport {ANY_MIDI_PORT, PACER_MIDI_PORT_NAME, SYSEX_SIGNATURE, TARGET_PRESET} from \"../pacer/constants\";\nimport PortsGrid from \"../components/PortsGrid\";\nimport {outputById} from \"../utils/ports\";\nimport {presetIndexToXY} from \"../pacer/utils\";\nimport Dropzone from \"react-dropzone\";\nimport \"./Patch.css\";\nimport Download from \"../components/Download\";\n\nfunction batchMessages(callback, callbackBusy, wait) {\n\n    let messages = [];  // batch of received messages\n    let timeout;\n\n    return function() {\n        clearTimeout(timeout);\n        let event = arguments[0];\n        messages.push(event.data);\n        // console.log('rec sysex', messages.length);\n        callbackBusy(messages.length);\n        timeout = setTimeout(() => {\n            // console.log(\"timeout elapsed\");\n            timeout = null;\n            callback(messages);\n            messages = [];\n        }, wait);\n    };\n}\n\nconst MAX_FILE_SIZE = 5 * 1024*1024;\n\nclass Patch extends Component {\n\n    // one data structure per preset\n\n    constructor(props) {\n        super(props);\n        this.inputOpenFileRef = React.createRef();\n        this.state = {\n            output: null,   // MIDI output port used for output\n            data: null,     // json\n            bytes: null,  // binary, will be used to download as .syx file\n            // presets: [],            // array of {data, bytes}, array index is preset index, 0 = current preset\n            dropZoneActive: false\n        };\n    }\n\n    /**\n     * Ad-hoc method to show the busy flag and set a timeout to make sure the busy flag is hidden after a timeout.\n     */\n    showBusy = ({busy = false, busyMessage = null, bytesExpected = -1, bytesReceived = -1} = {}) =>  {\n        // console.log(\"show busy\", busyMessage);\n        setTimeout(() => this.props.onBusy({busy: false}), 20000);\n        this.props.onBusy({busy: true, busyMessage, bytesExpected, bytesReceived});\n    };\n\n    handleMidiInputEvent = batchMessages(\n        messages => {\n\n            let bytes = messages.reduce((accumulator, element) => accumulator + element.length, 0);\n\n            this.setState(\n                produce(\n                    draft => {\n\n                        draft.bytes = new Uint8Array(bytes);\n                        let bin_index = 0;\n\n                        for (let m of messages) {\n\n                            draft.bytes.set(m, bin_index);\n                            bin_index += m.length;\n\n                            if (isSysexData(m)) {\n                                draft.data = mergeDeep(draft.data || {}, parseSysexDump(m));\n                            } else {\n                                console.log(\"MIDI message is not a sysex message\")\n                            }\n                        }\n                    }\n                )\n            );\n\n            // this.addInfoMessage(`${messages.length} messages received (${bytes} bytes)`);\n            // this.props.onBusy(false);\n            this.props.onBusy({busy: false});\n        },\n        (n) => {\n            // console.log(n);\n            this.props.onBusy({busy: true, bytesReceived: n});\n        },\n        1000\n    );\n\n    /**\n     *\n     * @param files\n     * @returns {Promise<void>}\n     */\n    async readFiles(files) {\n        await Promise.all(files.map(\n            async file => {\n                if (file.size > MAX_FILE_SIZE) {\n                    console.warn(`${file.name}: file too big, ${file.size}`);\n                } else {\n                    this.showBusy({busy: true, busyMessage: \"loading file...\"});\n                    const data = new Uint8Array(await new Response(file).arrayBuffer());\n                    if (isSysexData(data)) {\n                        this.setState(\n                            produce(draft => {\n                                draft.bytes = data;\n                                draft.data = mergeDeep(draft.data || {}, parseSysexDump(data));\n                                this.props.onBusy({busy: false});\n                            })\n                        );\n                        // this.addInfoMessage(\"sysfile decoded\");\n                        // } else {\n                        //     console.log(\"readFiles: not a sysfile\", hs(data.slice(0, 5)));\n                    }\n                    this.props.onBusy({busy: false});\n                    // non sysex files are ignored\n                }\n                // too big files are ignored\n            }\n        ));\n    }\n\n    onChangeFile = (e) => {\n        console.log(\"onChangeFile\", e);\n        var file = e.target.files[0];\n        console.log(file);\n        this.readFiles([file]);\n    };\n\n    onInputFile = (e) => {\n        console.log(\"onInputFile\", e);\n        this.inputOpenFileRef.current.click()\n    };\n\n    onDragEnter = () => {\n        this.setState({\n            dropZoneActive: true\n        });\n    };\n\n    onDragLeave= () => {\n        this.setState({\n            dropZoneActive: false\n        });\n    };\n\n    /**\n     * Drop Zone handler\n     * @param files\n     */\n    onDrop = (files) => {\n        // console.log('drop', files);\n        this.setState(\n            {\n                data: null,\n                changed: false,\n                dropZoneActive: false\n            },\n            () => {this.readFiles(files)}   // returned promise from readFiles() is ignored, this is normal.\n        );\n    };\n\n    onOutputConnection = (port_id) => {\n        this.setState(\n            produce(draft => {\n                draft.output = port_id;\n            })\n        );\n    };\n\n    onOutputDisconnection = (port_id) => {\n        this.setState(\n            produce(draft => {\n                draft.output = null;\n            })\n        );\n    };\n\n    sendSysex = (msg, bytesExpected) => {\n        console.log(\"sendSysex\", msg, bytesExpected);\n        if (!this.state.output) {\n            console.warn(\"no output enabled to send the message\");\n            return;\n        }\n        let out = outputById(this.state.output);\n        if (!out) {\n            console.warn(`send: output ${this.state.output} not found`);\n            return;\n        }\n        this.showBusy({busy: true, busyMessage: \"receiving data...\", bytesReceived: 0, bytesExpected});\n        this.setState(\n            {data: null},\n            () => out.sendSysex(SYSEX_SIGNATURE, msg)\n        );\n    };\n\n    sendMessage = (msg) => {\n        this.sendSysex(msg);\n    };\n\n\n    updatePacer = (messages) => {\n        // for (let m of messages) {\n        //     this.sendSysex(m);\n        // }\n        // this.addInfoMessage(`update${messages.length > 1 ? 's' : ''} sent to Pacer`);\n    };\n\n\n    /**\n     * @returns {*}\n     */\n    render() {\n\n        const { data, output, dropZoneActive } = this.state;\n\n        const overlayStyle = {\n            position: 'absolute',\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0,\n            paddingTop: '4rem',\n            background: 'rgba(0,0,0,0.4)',\n            textAlign: 'center',\n            color: '#fff',\n            fontSize: '4rem'\n        };\n\n        return (\n\n            <Dropzone\n                disableClick\n                style={{position: \"relative\"}}\n                // accept={accept}\n                onDrop={this.onDrop}\n                onDragEnter={this.onDragEnter}\n                onDragLeave={this.onDragLeave}>\n                {dropZoneActive &&\n                <div style={overlayStyle}>\n                    Drop sysex file...\n                </div>}\n\n                <div className=\"wrapper\">\n\n                    <div className=\"subheader\">\n                        <Midi only={ANY_MIDI_PORT} autoConnect={PACER_MIDI_PORT_NAME}\n                              portsRenderer={(groupedPorts, clickHandler) => <PortsGrid groupedPorts={groupedPorts} clickHandler={clickHandler} />}\n                              onMidiInputEvent={this.handleMidiInputEvent}\n                              onOutputConnection={this.onOutputConnection}\n                              onOutputDisconnection={this.onOutputDisconnection}\n                              className=\"\" >\n                            <div className=\"no-midi\">Please connect your Pacer to your computer.</div>\n                        </Midi>\n                    </div>\n\n                    <div className=\"content\">\n\n                        <div className=\"instructions\">\n                            A patch is a full dump of the Pacer.\n                        </div>\n\n                        <div className=\"content-row-content first\">\n\n                            <h2>From Pacer</h2>\n\n                            <div>\n                                {output && <button className=\"space-right\" onClick={() => this.sendSysex(requestAllPresets(), ALL_PRESETS_EXPECTED_BYTES)}>Read patch from Pacer</button>}\n                            </div>\n\n                            <div>\n                                {data && <Download data={data} filename={`pacer-preset`} addTimestamp={true} className=\"small\" label=\"Download patch\" />}\n                            </div>\n\n                        </div>\n\n                        <div className=\"content-row-content first\">\n\n                            <h2>To Pacer</h2>\n\n                            <div>\n                                {/*{output && <button className=\"space-right\" onClick={() => this.sendSysex(requestAllPresets())}>Read all presets from Pacer</button>}*/}\n                                <input ref={this.inputOpenFileRef} type=\"file\" style={{display:\"none\"}} onChange={this.onChangeFile} />\n                                <button onClick={this.onInputFile}>Load patch from file</button>\n                            </div>\n\n                            <div>\n                                {data && <button onClick={() => this.updatePacer()}>Send patch to Pacer</button>}\n                            </div>\n\n                        </div>\n\n                        <div className=\"content-row-content\">\n\n\n                            <div className=\"instructions\">\n                                Presets marked \"no data\" are ignored. They will NOT erase the preset config in your Pacer.\n                            </div>\n\n\n                            <h2>Patch content:</h2>\n                            <div className=\"patch-content\">\n                            {\n                                Array.from(Array(24+1).keys()).map(\n                                index => {\n                                    let id = presetIndexToXY(index);\n                                    let show = data && data[TARGET_PRESET] && data[TARGET_PRESET][index];\n                                    let name = show ? data[TARGET_PRESET][index][\"name\"] : \"\";\n\n                                    if (index === 0) return null;\n\n                                    return (\n                                        <div key={index}>\n                                            {/*<div className=\"right-align\">{index}</div>*/}\n                                            <div>{id}</div>\n                                            {show ? <div>{name}</div> : <div className=\"placeholder\">no data</div>}\n                                        </div>\n                                    );\n                                })\n                            }\n                            </div>\n\n                        </div>\n\n                    </div>\n\n                </div>\n\n            </Dropzone>\n        );\n    }\n}\n\nexport default Patch;\n","import React, {Component} from 'react';\nimport './App.css';\nimport { HashRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport TestSender from \"./pages/TestSender\";\nimport Preset from \"./pages/Preset\";\nimport Monitor from \"./pages/Monitor\";\nimport Footer from \"./components/Footer\";\nimport Global from \"./pages/Global\";\nimport DumpDecoder from \"./pages/DumpDecoder\";\nimport PresetMidi from \"./pages/PresetMidi\";\nimport * as QueryString from \"query-string\";\nimport Patch from \"./pages/Patch\";\nimport {produce} from \"immer\";\n\nconst MenuLink = ({ label, to, activeOnlyWhenExact }) => (\n    <Route\n        path={to}\n        exact={activeOnlyWhenExact}\n        children={({ match }) => (\n            <div className={match ? \"header-link active\" : \"header-link\"}>\n                <Link to={to}>{label}</Link>\n            </div>\n        )}\n    />\n);\n\nconst NoMatch = () =>\n    <div className=\"content home full-width\">\n        <div className=\"instructions\">\n            Invalid URL\n        </div>\n    </div>;\n\n\nclass App extends Component {\n\n    state = {\n        busy: false,\n        busyMessage: \"please wait\",\n        bytesExpected: -1,\n        // bytesReceived: -1,\n        progress: -1    // 0..100\n    };\n\n    // initBusy = (busy, busyMessage, bytesExpected, bytesReceived) => {\n    //     this.setState({ busy, busyMessage, bytesExpected, bytesReceived });\n    // };\n\n    /**\n     *\n     * @param busy\n     * @param busyMessage\n     * @param bytesExpected\n     * @param bytesReceived\n     */\n    onBusy = ({busy = false, busyMessage = null, bytesExpected = -1, bytesReceived = -1} = {}) => {\n\n        // console.log(\"app.onBusy\", busy, busyMessage, bytesExpected, bytesReceived);\n\n        let show = busy !== this.state.busy;\n        show = show || (busyMessage !== null && busyMessage !== this.state.busyMessage);\n        show = show || bytesExpected > this.state.bytesExpected;\n        // show = show || bytesReceived > 0;\n        let progress = 0;\n        if (bytesReceived > 0) {\n            progress = Math.round(bytesReceived / this.state.bytesExpected * 100 / 5) * 5;\n            // console.log(\"progress\", draft.bytesExpected, bytesReceived, progress);\n            show = show || ((progress >= 0) && (progress !== this.state.progress));\n        }\n\n        // console.log(\"show\", show, busyMessage);\n\n        if (show) {\n            // console.log(\"busy setstate\", this.state, busy, busyMessage, bytesExpected, bytesReceived, progress);\n            this.setState(\n                produce(draft => {\n                    if (draft.busy !== busy) draft.busy = busy;\n\n                    if (busyMessage !== null) draft.busyMessage = busyMessage;\n\n                    if (busy === false) {\n                        draft.bytesExpected = -1;\n                        progress = -1;\n                    } else {\n\n                        // console.log(\"draft.busyMessage\", draft.busyMessage);\n\n                        if (bytesExpected > 0) draft.bytesExpected = bytesExpected;\n\n                        // if (bytesReceived > 0) {\n                        //     let progress = Math.round(bytesReceived / draft.bytesExpected * 100 / 5) * 5;\n                        if (draft.progress !== progress) {\n                            draft.progress = progress;\n                            // console.log(\"progress\", draft.bytesExpected, bytesReceived, progress);\n                        }\n                        // console.log(\"progress\", draft.bytesExpected, bytesReceived, progress);\n                        // }\n\n                    }\n\n                    // let m = { type, message };\n                    // let len = draft.statusMessages.push(m);\n                    // if (len > MAX_STATUS_MESSAGES) draft.statusMessages.shift();\n                })\n            );\n        }\n\n        // if (busy !== this.state.busy) this.setState({ busy, bytesReceived });\n        // this.setState({ busy, bytesReceived });\n    };\n\n    /**\n     * Main app render\n     * @returns {*}\n     */\n    render() {\n        const { busy, busyMessage, progress } = this.state;\n\n        const q =  QueryString.parse(window.location.search);\n        const debug = q.debug ? q.debug === '1' : false;\n\n        return (\n            <Router>\n                <div className=\"app\">\n\n                    <header className=\"header\">\n                        <MenuLink activeOnlyWhenExact={true} to=\"/\" label=\"Home\" />\n                        <MenuLink to=\"/preset\" label=\"Preset Controls\" />\n                        <MenuLink to=\"/presetmidi\" label=\"Preset Name & MIDI\" />\n                        <MenuLink to=\"/global\" label=\"Global config\" />\n                        <MenuLink to=\"/patch\" label=\"Patch\" />\n                        {/*<MenuLink to=\"/patches\" label=\"Patches\" />*/}\n                        {/*<MenuLink to=\"/files\" label=\"Files\" />*/}\n                        {/*<MenuLink to=\"/chords\" label=\"Chords\" />*/}\n                        <MenuLink to=\"/monitor\" label=\"MIDI monitor\" />\n                        <MenuLink to=\"/dumpdecoder\" label=\"Dump decoder\" />\n                        {debug && <MenuLink to=\"/testsender\" label=\"Debug\" />}\n                        {!busy && <div className=\"spacer\"> </div>}\n                        {busy && <div className=\"busy\">{busyMessage}{progress >= 0 && <div>{progress} %</div>}</div>}\n                        <div className=\"header-app-name\">Pacer editor 0.5.2</div>\n                    </header>\n\n                        <Switch>\n                            <Route exact={true} path=\"/\" render={\n                                props => (\n                                    <Home />\n                                )\n                            }/>\n                            <Route path=\"/preset\" render={\n                                props => (\n                                    <Preset onBusy={this.onBusy} debug={debug} />\n                                )\n                            }/>\n                            <Route path=\"/presetmidi\" render={\n                                props => (\n                                    <PresetMidi onBusy={this.onBusy} debug={debug} />\n                                )\n                            }/>\n                            <Route path=\"/global\" render={\n                                props => (\n                                    <Global onBusy={this.onBusy} debug={debug} />\n                                )\n                            }/>\n{/*\n                            <Route path=\"/chords\" render={\n                                props => (\n                                    <Chords onBusy={this.onBusy} debug={debug} />\n                                )\n                            }/>\n*/}\n{/*\n                            <Route path=\"/patches\" render={\n                                props => (\n                                    <Patches onBusy={this.onBusy} debug={debug} />\n                                )\n                            }/>\n*/}\n                            <Route path=\"/patch\" render={\n                                props => (\n                                    <Patch onBusy={this.onBusy} debug={debug} />\n                                )\n                            }/>\n                            {/*<Route path=\"/files\" render={*/}\n                                {/*props => (*/}\n                                    {/*<Files onBusy={this.onBusy} debug={debug} />*/}\n                                {/*)*/}\n                            {/*}/>*/}\n                            <Route path=\"/monitor\" render={\n                                props => (\n                                    <Monitor onBusy={this.onBusy} debug={debug} />\n                                )\n                            }/>\n                            <Route path=\"/dumpdecoder\" render={\n                                props => (\n                                    <DumpDecoder onBusy={this.onBusy} debug={debug} />\n                                )\n                            }/>\n                            {debug &&\n                            <Route path=\"/testsender\" render={\n                                props => (\n                                    <TestSender onBusy={this.onBusy} debug={debug} />\n                                )\n                            }/>\n                            }\n                            <Route component={NoMatch} />\n                        </Switch>\n\n                    <Footer />\n\n                </div>\n            </Router>\n\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nfunction noop() {}\nif (process.env.NODE_ENV !== 'development') {\n    console.log = noop;\n    console.warn = noop;\n    console.error = noop;\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}