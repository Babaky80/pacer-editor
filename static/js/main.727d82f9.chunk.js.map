{"version":3,"sources":["pages/Home.js","utils/hexstring.js","utils/misc.js","pacer/constants.js","pacer/sysex.js","utils/ports.js","pacer/utils.js","components/DumpSysex.js","components/Midi.js","components/PortsGrid.js","pages/TestSender.js","components/PresetSelector.js","components/ControlSelector.js","components/ControlStepsEditor.js","components/ControlModeEditor.js","components/PresetNameEditor.js","utils/midi.js","pages/Preset.js","pages/Monitor.js","components/Footer.js","pages/Global.js","pages/DumpDecoder.js","components/MidiSettingsEditor.js","pages/PresetMidi.js","components/Download.js","pages/Patch.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","className","href","target","rel","src","alt","Component","h","v","undefined","str","len","char","s","c","n","length","padZero","toString","toUpperCase","hs","data","Array","from","map","join","fromHexString","string","sep","replace","Uint8Array","i","parseInt","substr","sortObject","obj","arr","prop","hasOwnProperty","push","key","value","sort","b","localeCompare","dropOverlayStyle","position","top","right","bottom","left","paddingTop","background","textAlign","color","fontSize","PACER_MIDI_INPUT_PORT_NAME","SYSEX_SIGNATURE","SYSEX_HEADER","COMMAND_SET","COMMAND_GET","TARGET_PRESET","TARGETS","_TARGETS","Object","defineProperty","CONTROL_NAME","CONTROL_STOMPSWITCH_1","CONTROL_STOMPSWITCH_6","CONTROL_STOMPSWITCH_A","CONTROL_FOOTSWITCH_4","CONTROL_EXPRESSION_PEDAL_1","CONTROL_EXPRESSION_PEDAL_2","CONTROL_MIDI","CONTROL_ALL","CONTROLS","_CONTROLS","CONTROLS_FULLNAME","1","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","54","55","126","127","STOMPSWITCHES_TOP","STOMPSWITCHES_BOTTOM","FOOTSWITCHES","EXPPEDALS","MSG_CTRL_OFF","MSG_TYPES","_MSG_TYPES","MSG_TYPES_FULLNAME_SW","_MSG_TYPES_FULLNAME_S","MSG_TYPES_FULLNAME_SW_SORTED","MSG_TYPES_FULLNAME_MIDI_SORTED","_MSG_TYPES_FULLNAME_E","_MSG_TYPES_FULLNAME_M","MSG_TYPES_DATA_HELP","_MSG_TYPES_DATA_HELP","COLORS","0","2","3","4","5","6","7","8","9","10","11","12","CONTROL_MODE_ELEMENT","CONTROL_MODES","_CONTROL_MODES","SINGLE_PRESET_EXPECTED_BYTES","SYSEX_START","SYSEX_END","CMD","TGT","IDX","OBJ","ELM","isObject","item","isArray","mergeDeep","_len","arguments","sources","_key","source","shift","assign","apply","concat","isSysexData","byteLength","parseSysexMessage","obj_type","message","cmd","tgt","idx","console","warn","String","fromCharCode","slice","getPresetName","steps","e","index","config","channel","msg_type","active","getControlStep","log","mode_cfg","control_mode","getControlMode","led_cfg","data_len","bytes","step","cfg","d","getControlLED","getMidiSetting","parseSysexDump","presets","indexOf","k","manufacturer_id","NEKTAR_TECHNOLOGY_INC","checksum","reduce","previousValue","currentValue","requestAllPresets","msg","cs","requestPreset","presetIndex","requestPresetObj","controlId","getControlUpdateSysexMessages","msgs","mode","buildControlModeSysex","_arr","keys","_i","changed","m","buildControlStepSysex","_arr2","_i2","led_changed","led_midi_ctrl","led_active_color","led_inactive_color","led_num","buildControlStepLedSysex","buildPresetNameSysex","charCodeAt","getMidiSettingUpdateSysexMessages","settings","_arr3","_i3","setting","buildMidiSettingsSysex","portById","id","p","WebMidi","inputs","find","outputs","inputById","outputById","presetIndexToXY","Math","floor","MidiTable","_ref","colSpan","t","Note","MidiSettings","_ref2","DumpSysex_MidiTable","ControlTable","_ref3","c0","c1","Controls","_ref4","controls","DumpSysex_ControlTable","Preset","_ref5","DumpSysex_Controls","DumpSysex_MidiSettings","Presets","_ref6","DumpSysex_Preset","DumpSysex","_ref7","DumpSysex_Presets","JSON","stringify","Midi","state","input","output","pacerPresent","connectInput","port","_this","props","onMidiInputEvent","hasListener","addListener","onInputConnection","name","disconnectInput","removeListener","onInputDisconnection","connectOutput","setState","onOutputConnection","disconnectOutput","port_id","produce","draft","pacerOutputConnected","onOutputDisconnection","autoConnectInput","autoConnect","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","type","match","RegExp","err","return","autoConnectOutput","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","registerInputs","r","only","r2","filter","findIndex","registerOutputs","unRegisterInputs","unRegisterOutputs","handleMidiConnectEvent","group","groupEnd","togglePort","prev","midiOn","portsGrouped","g","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","selected","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","this","react","portsRenderer","children","defaultProps","classname","PortsGrid","groupedPorts","clickHandler","react_switch_default","onChange","checked","height","width","replacerDec2Hex","toSysExMessage","toConsumableArray","TestSender","messages","customMessage","showBusy","setTimeout","onBusy","updateCustomMessage","event","getCustomMessageData","sendCustomMessage","sendSysex","handleMidiInputEvent","callback","wait","timeout","clearTimeout","batchMessages","setOutput","out","sendMessage","_this2","_this$state","hex_msg","Midi_Midi","components_PortsGrid","onClick","disabled","size","placeholder","src_components_DumpSysex","Selector","PresetSelector","currentPreset","PresetSelector_Selector","letter","digit","xy","Control","ControlSelector","currentControl","ControlSelector_Control","LEDMidi","current_value","LEDColor","LEDNum","MidiNote","note","Step","d0","d1","d2","updateCallback","ControlStepsEditor_MidiNote","ControlStepsEditor_LEDColor","ControlStepsEditor_LEDNum","ControlStepsEditor_LEDMidi","ControlStepsEditor","onStepUpdate","stepIndex","dataType","dataIndex","onUpdate","ControlStepsEditor_Step","ControlModeEditor","PresetNameEditor","onNameUpdate","MESSAGE","128","144","160","176","192","208","224","CONTROLER","32","33","34","36","37","38","39","40","42","43","44","45","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","91","92","93","94","95","96","97","98","99","100","101","120","121","122","123","124","125","outputIsPacer","portId","callbackBusy","isVal","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_ref$busyMessage","busy","busyMessage","_ref$bytesExpected","bytesExpected","_ref$bytesReceived","bytesReceived","accumulator","element","binData","bin_index","set","onChangeFile","file","files","readFiles","onInputFile","inputOpenFileRef","current","click","onDragEnter","dropZoneActive","onDragLeave","onDrop","selectPreset","readPacer","selectControl","updateControlStep","startsWith","updateMessages","getUpdateMessages","updateControlMode","updatePresetName","updatePacer","React","createRef","Promise","all","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","t0","Response","arrayBuffer","t1","sent","pId","cId","stop","_x2","_this3","showEditor","es","disableClick","style","src_components_PresetSelector","ref","display","components_PresetNameEditor","src_components_ControlSelector","src_components_ControlStepsEditor","src_components_ControlModeEditor","debug","MAX_MESSAGES","Monitor","unshift","pop","parseMidi","info2","info3","messageCode","velocity","controlNumber","controlValue","program","pitchBend","pitchBendMultiplier","Footer","Global","marginTop","DumpDecoder","Setting","MidiSettingsEditor_MidiNote","MidiSettingsEditor","onSettingUpdate","settingIndex","MidiSettingsEditor_Setting","PresetMidi","updateMidiSettings","src_components_MidiSettingsEditor","Download","handleClick","url","window","URL","createObjectURL","Blob","filename","addTimestamp","now","Date","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","shadowlink","document","download","body","appendChild","removeChild","revokeObjectURL","label","Patch","components_Download","show","MenuLink","to","activeOnlyWhenExact","Route","path","exact","Link","NoMatch","App","progress","_ref3$busy","_ref3$busyMessage","_ref3$bytesExpected","_ref3$bytesReceived","round","q","QueryString","location","search","HashRouter","App_MenuLink","Switch","render","src_pages_Home","src_pages_Preset","pages_PresetMidi","pages_Global","src_pages_Patch","src_pages_Monitor","src_pages_DumpDecoder","src_pages_TestSender","component","src_components_Footer","Boolean","hostname","noop","error","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.727d82f9.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport \"./Home.css\";\n\nclass Home extends Component {\n\n    render() {\n\n        return (\n            <div className=\"content\">\n\n                <h1>Requirements</h1>\n\n                <div className=\"doc\">\n                    <p>This application requires a browser that support\n                        the <a href=\"http://webaudio.github.io/web-midi-api/\" target=\"_blank\" rel=\"noopener noreferrer\">Web MIDI API</a>.</p>\n\n                    <p>Currently, only <span className=\"strong\">Chrome</span> and <span className=\"strong\">Opera</span> support this standard.\n                        This application will therefore <span className=\"italic\">not</span> work in Firefox, Safari, IE or Edge.</p>\n                </div>\n\n                <h1>Limitations</h1>\n\n                <div className=\"doc\">\n                    <p>The current version of this editor isn't able to edit the Global configuration of the Pacer.</p>\n                    <p>This editor does not offer patches management either.</p>\n                </div>\n\n                <h1>Usage</h1>\n                <div className=\"doc\">\n                    <p>Make sure your Pacer is connected to your computer and switched-on.</p>\n                    <p>On the upper right corner of the editor, check the MIDI settings.</p>\n                    <p>You need to enable the following input and output ports:</p>\n                    <p>- under <span className=\"bold\" >OS X</span>:</p>\n                    <img src=\"help-ports-osx-no-retina.png\" alt=\"\" />\n                    <p>- under <span className=\"bold\" >Windows</span>:</p>\n                    <img src=\"help-ports-windows.png\" alt=\"\" />\n\n                    <p className=\"strong\">Editing presets</p>\n                    <p>The preset #0 is the <span className=\"italic\">current</span> preset.\n                        When you edit preset #0 your changes are immediately applied.</p>\n                    <p>When you edit any other presets, your changes will only be applied when you load this preset.</p>\n\n                    <p className=\"strong\">In case of problem</p>\n                    <ol>\n                        <li>Restart your Pacer</li>\n                        <li>Reload the editor</li>\n                    </ol>\n                </div>\n\n                <h1>MIDI in your browser</h1>\n\n                <div className=\"doc\">\n                    <div>\n                        <p>You need to allow your browser to use your MIDI device:</p>\n                        <img src=\"help-01.png\" alt=\"\" />\n                    </div>\n                    <div>\n                        <p>In case you didn't allow the use of MIDI device and want to change that, you can right-click on the URL icon and change the setting:</p>\n                        <img src=\"help-02.png\" alt=\"\" />\n                    </div>\n                </div>\n\n                <h1>FAQ</h1>\n\n                <div className=\"doc\">\n                    <p><i>To be completed...</i></p>\n                </div>\n\n                <h1>Contribute</h1>\n\n                <div className=\"doc\">\n                    <p>This editor is an Open Source project. You are welcome to contribute.</p>\n                    <p>The source-code is hosted\n                    by GitHub: <a href=\"https://github.com/francoisgeorgy/pacer-editor\" target=\"_blank\" rel=\"noopener noreferrer\">pacer-editor</a></p>\n                    <p>To contribute your bug fixes, new features, etc.: 1) fork the project, 2) create a pull-request.</p>\n                </div>\n\n                <h1>Thanks</h1>\n\n                <div className=\"doc\">\n                    Thank you to the Nektar support service for having provided precious informations regarding the SysEx data format of the Pacer.\n                    This editor would not have been possible without their support.\n                </div>\n\n            </div>\n        );\n    }\n\n}\n\nexport default Home;\n","\n/*\nString.prototype.padZero = function (len, c) {\n    var s = '', c = c || '0', len = (len || 2) - this.length;\n    while (s.length < len) s += c;\n    return s + this;\n};\n*/\n\nexport const padZero = (str, len, char) => {\n    let s = '';\n    let c = char || '0';\n    let n = (len || 2) - str.length;\n    while (s.length < n) s += c;\n    return s + str;\n};\n\nexport const h = v => {\n    return (v === null || v === undefined) ? \"\" : padZero(v.toString(16).toUpperCase(), 2);\n};\n\nexport const hs = data => (data === null || data === undefined) ? \"\" : (Array.from(data).map(n => h(n))).join(\" \");    // Array.from() is necessary to get a non-typed array\n\n\n/**\n *\n * @param string\n * @param sep\n * @returns {*}\n */\nexport const fromHexString = function(string, sep) {\n    let s = sep ? string.replace(sep, '') : string;\n    if ((s.length % 2) > 0) {\n        return null;\n    }\n    if (s.length === 0) return null;\n    let a = new Uint8Array(s.length / 2);\n    for (let i=0; i < (s.length / 2); i++) {\n        a[i] = parseInt(s.substr(i * 2, 2), 16);\n    }\n    return a;\n};\n","\nexport const MAX_FILE_SIZE = 5 * 1024*1024;\n\nexport function sortObject(obj) {\n    let arr = [];\n    for (let prop in obj) {\n        if (obj.hasOwnProperty(prop)) {\n            arr.push({\n                'key': prop,\n                'value': obj[prop]\n            });\n        }\n    }\n    arr.sort((a, b) => a.value.localeCompare(b.value));\n    return arr;\n}\n\n\nexport const dropOverlayStyle = {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    paddingTop: '4rem',\n    background: 'rgba(0,0,0,0.4)',\n    textAlign: 'center',\n    color: '#fff',\n    fontSize: '4rem'\n};\n","import {sortObject} from \"../utils/misc\";\n\nexport const ANY_MIDI_PORT = \".*\";\n\n// export const PACER_MIDI_PORT_NAME = \"vmpk.*\";            // DEBUG\n// export const PACER_MIDI_INPUT_PORT_NAME = \"vmpk.*\";      // DEBUG\n// export const PACER_MIDI_OUTPUT_PORT_NAME = \"vmpk.*\";     // DEBUG\nexport const PACER_MIDI_PORT_NAME = \"Pacer.*\";          // can be a regex\nexport const PACER_MIDI_INPUT_PORT_NAME = \"Pacer.*\";\nexport const PACER_MIDI_OUTPUT_PORT_NAME = \"Pacer.*\";\n\nexport const SYSEX_SIGNATURE = [0x00, 0x01, 0x77];\nexport const SYSEX_HEADER = [0x7F];\n\nexport const COMMAND_SET = 0x01;\nexport const COMMAND_GET = 0x02;\n\nexport const TARGET_PRESET = 0x01;\nexport const TARGET_GLOBAL = 0x05;\nexport const TARGET_BACKUP = 0x07;\n\nexport const TARGETS = {\n    [TARGET_PRESET]: \"preset\",\n    [TARGET_GLOBAL]: \"global\",\n    [TARGET_BACKUP]: \"full backup\"\n};\n\nexport const CONTROL_NAME = 0x01;\nexport const CONTROL_STOMPSWITCH_1 = 0x0D;\nexport const CONTROL_STOMPSWITCH_2 = 0x0E;\nexport const CONTROL_STOMPSWITCH_3 = 0x0F;\nexport const CONTROL_STOMPSWITCH_4 = 0x10;\nexport const CONTROL_STOMPSWITCH_5 = 0x11;\nexport const CONTROL_STOMPSWITCH_6 = 0x12;\nexport const CONTROL_RESERVED = 0x13;\nexport const CONTROL_STOMPSWITCH_A = 0x14;\nexport const CONTROL_STOMPSWITCH_B = 0x15;\nexport const CONTROL_STOMPSWITCH_C = 0x16;\nexport const CONTROL_STOMPSWITCH_D = 0x17;\nexport const CONTROL_FOOTSWITCH_1 = 0x18;\nexport const CONTROL_FOOTSWITCH_2 = 0x19;\nexport const CONTROL_FOOTSWITCH_3 = 0x1A;\nexport const CONTROL_FOOTSWITCH_4 = 0x1B;\nexport const CONTROL_EXPRESSION_PEDAL_1 = 0x36;\nexport const CONTROL_EXPRESSION_PEDAL_2 = 0x37;\nexport const CONTROL_MIDI = 0x7E;\nexport const CONTROL_ALL = 0x7F;\n\n// objects:\nexport const CONTROLS = {\n    [CONTROL_NAME]: \"name\",\n    [CONTROL_STOMPSWITCH_1]: \"1\",\n    [CONTROL_STOMPSWITCH_2]: \"2\",\n    [CONTROL_STOMPSWITCH_3]: \"3\",\n    [CONTROL_STOMPSWITCH_4]: \"4\",\n    [CONTROL_STOMPSWITCH_5]: \"5\",\n    [CONTROL_STOMPSWITCH_6]: \"6\",\n    [CONTROL_RESERVED]: \"RESERVED\",\n    [CONTROL_STOMPSWITCH_A]: \"A\",\n    [CONTROL_STOMPSWITCH_B]: \"B\",\n    [CONTROL_STOMPSWITCH_C]: \"C\",\n    [CONTROL_STOMPSWITCH_D]: \"D\",\n    [CONTROL_FOOTSWITCH_1]: \"FS 1\",\n    [CONTROL_FOOTSWITCH_2]: \"FS 2\",\n    [CONTROL_FOOTSWITCH_3]: \"FS 3\",\n    [CONTROL_FOOTSWITCH_4]: \"FS 4\",\n    [CONTROL_EXPRESSION_PEDAL_1]: \"EXP 1\",\n    [CONTROL_EXPRESSION_PEDAL_2]: \"EXP 2\",\n    [CONTROL_MIDI]: \"MIDI configuration\",\n    [CONTROL_ALL]: \"ALL\"\n};\n\nexport const CONTROLS_FULLNAME = {\n    0x01: \"Preset Name\",\n    0x0D: \"Stompswitch 1\",\n    0x0E: \"Stompswitch 2\",\n    0x0F: \"Stompswitch 3\",\n    0x10: \"Stompswitch 4\",\n    0x11: \"Stompswitch 5\",\n    0x12: \"Stompswitch 6\",\n    0x13: \"RESERVED\",\n    0x14: \"Stompswitch A\",\n    0x15: \"Stompswitch B\",\n    0x16: \"Stompswitch C\",\n    0x17: \"Stompswitch D\",\n    0x18: \"Footswitch 1\",\n    0x19: \"Footswitch  2\",\n    0x1A: \"Footswitch  3\",\n    0x1B: \"Footswitch  4\",\n    0x36: \"Expression Pedal 1\",\n    0x37: \"Expression Pedal 2\",\n    0x7E: \"MIDI configuration\",\n    0x7F: \"ALL\"\n};\n\n// subsets of CONTROLS keys:\nexport const STOMPSWITCHES = [0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x14, 0x15, 0x16, 0x17];\nexport const STOMPSWITCHES_TOP = [0x14, 0x15, 0x16, 0x17];\nexport const STOMPSWITCHES_BOTTOM = [0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12];\nexport const FOOTSWITCHES = [0x18, 0x19, 0x1A, 0x1B];\nexport const EXPPEDALS = [0x36, 0x37];\n\n// message types:\nexport const MSG_AD_MIDICC = 0x00;\nexport const MSG_AD_NRPNC = 0x03;\nexport const MSG_AD_NRPNF = 0x04;\nexport const MSG_AD_PITCH = 0x01;\nexport const MSG_AD_ATCHAN = 0x02;\nexport const MSG_DAWFUNC = 0x7E;\nexport const MSG_CTRL_OFF = 0x61;\n\nexport const MSG_SW_MIDI_CC_TGGLE = 0x47;\nexport const MSG_SW_MIDI_CC = 0x40;\nexport const MSG_SW_MIDI_CC_STEP = 0x48;\nexport const MSG_SW_NOTE = 0x43;\nexport const MSG_SW_NOTE_TGGLE = 0x44;\nexport const MSG_SW_PRG_BANK = 0x45;\nexport const MSG_SW_PRG_STEP = 0x46;\nexport const MSG_SW_NRPN_COARSE = 0x57;\nexport const MSG_SW_NRPN_FINE = 0x58;\nexport const MSG_SW_MMC = 0x55;\nexport const MSG_SW_RELAY = 0x59;\nexport const MSG_SW_PRESET_SELECT = 0x62;\nexport const MSG_SW_PRESET_INC_DEC = 0x56;\nexport const MSG_SW_STEP_SELECT = 0x63;\nexport const MSG_SW_STEP_INC_DEC = 0x64;\n\nexport const MSG_ENC_CC = 0x12;\nexport const MSG_ENC_MIDICC_REL = 0x11;\nexport const MSG_ENC_NRPNC = 0x15;\nexport const MSG_ENC_NRPNF = 0x16;\nexport const MSG_ENC_PITCH = 0x13;\nexport const MSG_ENC_ATCHAN = 0x14;\nexport const MSG_ENC_PROGRAM = 0x10;\nexport const MSG_ENC_PRESETSELECT = 0x17;\nexport const MSG_ENC_STEPSELECT = 0x18;\n\nexport const MSG_LOAD_CC = 0x65;\n\nexport const MSG_TYPES = {\n\n    [MSG_AD_MIDICC]: \"CC\",\n    [MSG_AD_NRPNC]: \"NRPN C\",\n    [MSG_AD_NRPNF]: \"NRPN F\",\n    [MSG_AD_PITCH]: \"PITCH\",\n    [MSG_AD_ATCHAN]: \"AT CHAN\",\n    [MSG_DAWFUNC]: \"DAW FUNC\",\n    [MSG_CTRL_OFF]: \"CTRL_OFF\",\n\n    [MSG_SW_MIDI_CC_TGGLE]: \"CC TOGGLE\",\n    [MSG_SW_MIDI_CC]: \"CC\",\n    [MSG_SW_MIDI_CC_STEP]: \"CC STEP\",\n    [MSG_SW_NOTE]: \"NOTE\",\n    [MSG_SW_NOTE_TGGLE]: \"NOTE TOGGLE\",\n    [MSG_SW_PRG_BANK]: \"PRG BANK\",\n    [MSG_SW_PRG_STEP]: \"PRG STEP\",\n    [MSG_SW_NRPN_COARSE]: \"NRPN COARSE\",\n    [MSG_SW_NRPN_FINE]: \"NRPN FINE\",\n    [MSG_SW_MMC]: \"MMC\",\n    [MSG_SW_RELAY]: \"RELAY\",\n    [MSG_SW_PRESET_SELECT]: \"PRESET SELECT\",\n    [MSG_SW_PRESET_INC_DEC]: \"PRESET INC DEC\",\n    [MSG_SW_STEP_SELECT]: \"STEP SELECT\",\n    [MSG_SW_STEP_INC_DEC]: \"STEP INC DEC\",\n\n    [MSG_ENC_CC]: \"CC\",\n    [MSG_ENC_MIDICC_REL]: \"CC REL\",\n    [MSG_ENC_NRPNC]: \"NRPN C\",\n    [MSG_ENC_NRPNF]: \"NRPN F\",\n    [MSG_ENC_PITCH]: \"PITCH\",\n    [MSG_ENC_ATCHAN]: \"AT CHAN\",\n    [MSG_ENC_PROGRAM]: \"PRG\",\n    [MSG_ENC_PRESETSELECT]: \"PRESET SEL\",\n    [MSG_ENC_STEPSELECT]: \"STEP SEL\",\n\n    [MSG_LOAD_CC]: \"CC\"\n};\n\n// Message types for stompswitches\nexport const MSG_TYPES_FULLNAME_SW = {\n    [MSG_CTRL_OFF]: \"OFF\",\n    [MSG_SW_MIDI_CC_TGGLE]: \"CC Toggle\",\n    [MSG_SW_MIDI_CC]: \"CC Trigger\",\n    [MSG_SW_MIDI_CC_STEP]: \"CC Step\",\n    [MSG_SW_NOTE]: \"Note\",\n    [MSG_SW_NOTE_TGGLE]: \"Note Toggle\",\n    [MSG_SW_PRG_BANK]: \"Program & Bank\",\n    [MSG_SW_PRG_STEP]: \"Program Step\",\n    [MSG_SW_NRPN_COARSE]: \"NRPN Coarse\",\n    [MSG_SW_NRPN_FINE]: \"NRPN Fine\",\n    [MSG_SW_MMC]: \"MIDI Machine Control\",\n    [MSG_SW_RELAY]: \"Relay Outputs\",\n    [MSG_SW_PRESET_SELECT]: \"Preset Select\",\n    [MSG_SW_PRESET_INC_DEC]: \"Preset Inc/Dec\",\n    [MSG_SW_STEP_SELECT]: \"Step Select\",\n    [MSG_SW_STEP_INC_DEC]: \"Step Inc/Dec\"\n};\n\nexport const MSG_TYPES_FULLNAME_SW_SORTED = sortObject(MSG_TYPES_FULLNAME_SW);\n\n\nexport const MSG_TYPES_FULLNAME_ENC = {\n    [MSG_ENC_CC]: \"CC\",\n    [MSG_ENC_MIDICC_REL]: \"CC REL\",\n    [MSG_ENC_NRPNC]: \"NRPN Coarse\",\n    [MSG_ENC_NRPNF]: \"NRPN Fine\",\n    [MSG_ENC_PITCH]: \"Pitch Bend\",\n    [MSG_ENC_ATCHAN]: \"AT Chan.\",\n    [MSG_ENC_PROGRAM]: \"Program\",\n    [MSG_ENC_PRESETSELECT]: \"Preset Sel\",\n    [MSG_ENC_STEPSELECT]: \"Step Sel\"\n};\n\n\n// Preset Midi Settings\nexport const MSG_TYPES_FULLNAME_MIDI = {\n    [MSG_LOAD_CC]: \"Load CC\",\n    [MSG_SW_NOTE]: \"MIDI Note\",\n    [MSG_SW_PRG_BANK]: \"Program & Bank\",\n    [MSG_SW_NRPN_COARSE]: \"NRPN Coarse\",\n    [MSG_SW_NRPN_FINE]: \"NRPN Fine\",\n    [MSG_SW_MMC]: \"MIDI Machine Control\",\n    [MSG_SW_RELAY]: \"Relay Outputs\",\n    [MSG_DAWFUNC]: \"DAW Func.\",\n    [MSG_CTRL_OFF]: \"OFF\"\n};\n\nexport const MSG_TYPES_FULLNAME_MIDI_SORTED = sortObject(MSG_TYPES_FULLNAME_MIDI);\n\nexport const MSG_TYPES_DATA_HELP = {\n\n    [MSG_AD_MIDICC]: [\"\", \"\", \"\"],\n    [MSG_AD_NRPNC]: [\"\", \"\", \"\"],\n    [MSG_AD_NRPNF]: [\"\", \"\", \"\"],\n    [MSG_AD_PITCH]: [\"\", \"\", \"\"],\n    [MSG_AD_ATCHAN]: [\"\", \"\", \"\"],\n    [MSG_DAWFUNC]: [\"function\", \"not used\", \"not used\"],\n    [MSG_CTRL_OFF]: [\"\", \"\", \"\"],\n\n    [MSG_SW_MIDI_CC_TGGLE]: [\"controller\", \"value 1\", \"value 2\"],\n    [MSG_SW_MIDI_CC]: [\"controller\", \"down\", \"up\"],\n    [MSG_SW_MIDI_CC_STEP]: [\"controller\", \"start\", \"end\"],\n    [MSG_SW_NOTE]: [\"note\", \"velocity\", \"not used\"],\n    [MSG_SW_NOTE_TGGLE]: [\"note\", \"velocity\", \"not used\"],\n    [MSG_SW_PRG_BANK]: [\"program\", \"bank LSB\", \"bank MSB\"],\n    [MSG_SW_PRG_STEP]: [\"not used\", \"start\", \"end\"],\n    [MSG_SW_NRPN_COARSE]: [\"value\", \"NRPN LSB\", \"NRPN MSB\"],\n    [MSG_SW_NRPN_FINE]: [\"value\", \"NRPN LSB\", \"NRPN MSB\"],\n    [MSG_SW_MMC]: [\"device\", \"command\", \"not used\"],\n    [MSG_SW_RELAY]: [\"mode\", \"relay #\", \"not used\"],\n    [MSG_SW_PRESET_SELECT]: [\"preset\", \"not used\", \"not used\"],\n    [MSG_SW_PRESET_INC_DEC]: [\"inc/dec\", \"not used\", \"not used\"],\n    [MSG_SW_STEP_SELECT]: [\"target\", \"step\", \"not used\"],\n    [MSG_SW_STEP_INC_DEC]: [\"target\", \"inc/dec\", \"not used\"],\n\n    [MSG_ENC_CC]: [\"\", \"\", \"\"],\n    [MSG_ENC_MIDICC_REL]: [\"\", \"\", \"\"],\n    [MSG_ENC_NRPNC]: [\"\", \"\", \"\"],\n    [MSG_ENC_NRPNF]: [\"\", \"\", \"\"],\n    [MSG_ENC_PITCH]: [\"\", \"\", \"\"],\n    [MSG_ENC_ATCHAN]: [\"\", \"\", \"\"],\n    [MSG_ENC_PROGRAM]: [\"\", \"\", \"\"],\n    [MSG_ENC_PRESETSELECT]: [\"\", \"\", \"\"],\n    [MSG_ENC_STEPSELECT]: [\"\", \"\", \"\"],\n\n    [MSG_LOAD_CC]: [\"controller\", \"value\", \"not used\"]\n};\n\n/*\nexport const CONTROL_ELEMENT = {\n    // 0x00: \"\",\n    0x01: \"step 1: channel\",\n    0x02: \"step 1: message type\",\n    0x03: \"step 1: data 1\",\n    0x04: \"step 1: data 2\",\n    0x05: \"step 1: data 3\",\n    0x06: \"step 1: step active\",\n\n    0x07: \"step 2: channel\",\n    0x08: \"step 2: message type\",\n    0x09: \"step 2: data 1\",\n    0x0A: \"step 2: data 2\",\n    0x0B: \"step 2: data 3\",\n    0x0C: \"step 2: step active\",\n\n    0x0D: \"step 3: channel\",\n    0x0E: \"step 3: message type\",\n    0x0F: \"step 3: data 1\",\n    0x10: \"step 3: data 2\",\n    0x11: \"step 3: data 3\",\n    0x12: \"step 3: step active\",\n\n    0x13: \"step 4: channel\",\n    0x14: \"step 4: message type\",\n    0x15: \"step 4: data 1\",\n    0x16: \"step 4: data 2\",\n    0x17: \"step 4: data 3\",\n    0x18: \"step 4: step active\",\n\n    0x19: \"step 5: channel\",\n    0x1A: \"step 5: message type\",\n    0x1B: \"step 5: data 1\",\n    0x1C: \"step 5: data 2\",\n    0x1D: \"step 5: data 3\",\n    0x1E: \"step 5: step active\",\n\n    0x1F: \"step 6: channel\",\n    0x20: \"step 6: message type\",\n    0x21: \"step 6: data 1\",\n    0x22: \"step 6: data 2\",\n    0x23: \"step 6: data 3\",\n    0x24: \"step 6: step active\",\n\n    // 0x25: \"\",\n    // 0x26: \"\",\n    // 0x27: \"\",\n    // 0x28: \"\",\n    // 0x29: \"\",\n    // 0x2A: \"\",\n    // 0x2B: \"\",\n    // 0x2C: \"\",\n    // 0x2D: \"\",\n    // 0x2E: \"\",\n    // 0x2F: \"\",\n    // 0x30: \"\",\n    // 0x31: \"\",\n    // 0x32: \"\",\n    // 0x33: \"\",\n    // 0x34: \"\",\n    // 0x35: \"\",\n    // 0x36: \"\",\n    // 0x37: \"\",\n    // 0x38: \"\",\n    // 0x39: \"\",\n    // 0x3A: \"\",\n    // 0x3B: \"\",\n    // 0x3C: \"\",\n    // 0x3D: \"\",\n    // 0x3E: \"\",\n    // 0x3F: \"\",\n    // 0x40: \"\",\n    // 0x41: \"\",\n    // 0x42: \"\",\n    // 0x43: \"\",\n\n    0x40: \"control mode\",\n    0x41: \"LED MIDI Ctrl\",\n    0x42: \"LED On Color\",\n    0x43: \"LED Off Color\",\n\n    // 0x44: \"\",\n    // 0x45: \"\",\n    // 0x46: \"\",\n    // 0x47: \"\",\n    // 0x48: \"\",\n    // 0x49: \"\",\n    // 0x4A: \"\",\n    // 0x4B: \"\",\n    // 0x4C: \"\",\n    // 0x4D: \"\",\n    // 0x4E: \"\",\n    // 0x4F: \"\",\n    // 0x50: \"\",\n    // 0x51: \"\",\n    // 0x52: \"\",\n    // 0x53: \"\",\n    // 0x54: \"\",\n    // 0x55: \"\",\n    // 0x56: \"\",\n    // 0x57: \"\",\n    // 0x58: \"\",\n    // 0x59: \"\",\n    // 0x5A: \"\",\n    // 0x5B: \"\",\n    // 0x5C: \"\",\n    // 0x5D: \"\",\n    // 0x5E: \"\",\n    // 0x5F: \"\",\n\n    // 0x60: \"control mode\",\n    // 0x61: \"LED MIDI Ctrl\",\n    // 0x62: \"LED On Color\",\n    // 0x63: \"LED Off Color\",\n\n    // 0x64: \"\",\n    // 0x65: \"\",\n    // 0x66: \"\",\n    // 0x67: \"\",\n    // 0x68: \"\",\n    // 0x69: \"\",\n    // 0x6A: \"\",\n    // 0x6B: \"\",\n    // 0x6C: \"\",\n    // 0x6D: \"\",\n    // 0x6E: \"\",\n    // 0x6F: \"\",\n    // 0x70: \"\",\n    // 0x71: \"\",\n    // 0x72: \"\",\n    // 0x73: \"\",\n    // 0x74: \"\",\n    // 0x75: \"\",\n    // 0x76: \"\",\n    // 0x77: \"\",\n    // 0x78: \"\",\n    // 0x79: \"\",\n    // 0x7A: \"\",\n    // 0x7B: \"\",\n    // 0x7C: \"\",\n    // 0x7D: \"\",\n    // 0x7E: \"\",\n\n    0x7F: \"ALL\"\n};\n*/\n\nexport const MIDI_ELEMENT = {\n    // 0x00: \"\",\n    0x01: \"setting 1: channel\",\n    0x02: \"setting 1: message type\",\n    0x03: \"setting 1: data 1\",\n    0x04: \"setting 1: data 2\",\n    0x05: \"setting 1: data 3\",\n    // 0x06: \"\",\n\n    0x07: \"setting 2: channel\",\n    0x08: \"setting 2: message type\",\n    0x09: \"setting 2: data 1\",\n    0x0A: \"setting 2: data 2\",\n    0x0B: \"setting 2: data 3\",\n    // 0x0C: \"\",\n\n    0x0D: \"setting 3: channel\",\n    0x0E: \"setting 3: message type\",\n    0x0F: \"setting 3: data 1\",\n    0x10: \"setting 3: data 2\",\n    0x11: \"setting 3: data 3\",\n    // 0x12: \"\",\n\n    0x13: \"setting 4: channel\",\n    0x14: \"setting 4: message type\",\n    0x15: \"setting 4: data 1\",\n    0x16: \"setting 4: data 2\",\n    0x17: \"setting 4: data 3\",\n    // 0x18: \"\",\n\n    0x19: \"setting 5: channel\",\n    0x1A: \"setting 5: message type\",\n    0x1B: \"setting 5: data 1\",\n    0x1C: \"setting 5: data 2\",\n    0x1D: \"setting 5: data 3\",\n    // 0x1E: \"\",\n\n    0x1F: \"setting 6: channel\",\n    0x20: \"setting 6: message type\",\n    0x21: \"setting 6: data 1\",\n    0x22: \"setting 6: data 2\",\n    0x23: \"setting 6: data 3\",\n    // 0x24: \"\",\n\n    0x25: \"setting 7: channel\",\n    0x26: \"setting 7: message type\",\n    0x27: \"setting 7: data 1\",\n    0x28: \"setting 7: data 2\",\n    0x29: \"setting 7: data 3\",\n    // 0x2A: \"\",\n\n    0x2B: \"setting 8: channel\",\n    0x2C: \"setting 8: message type\",\n    0x2D: \"setting 8: data 1\",\n    0x2E: \"setting 8: data 2\",\n    0x2F: \"setting 8: data 3\",\n    0x30: \"\",\n\n    0x31: \"setting 9: channel\",\n    0x32: \"setting 9: message type\",\n    0x33: \"setting 9: data 1\",\n    0x34: \"setting 9: data 2\",\n    0x35: \"setting 9: data 3\",\n    // 0x36: \"\",\n\n    0x37: \"setting 10: channel\",\n    0x38: \"setting 10: message type\",\n    0x39: \"setting 10: data 1\",\n    0x3A: \"setting 10: data 2\",\n    0x3B: \"setting 10: data 3\",\n    // 0x3C: \"\",\n\n    0x3D: \"setting 11: channel\",\n    0x3E: \"setting 11: message type\",\n    0x3F: \"setting 11: data 1\",\n    0x40: \"setting 11: data 2\",\n    0x41: \"setting 11: data 3\",\n    // 0x42: \"\",\n\n    0x43: \"setting 12: channel\",\n    0x44: \"setting 12: message type\",\n    0x45: \"setting 12: data 1\",\n    0x46: \"setting 12: data 2\",\n    0x47: \"setting 12: data 3\",\n    // 0x48: \"\",\n\n    0x49: \"setting 13: channel\",\n    0x4A: \"setting 13: message type\",\n    0x4B: \"setting 13: data 1\",\n    0x4C: \"setting 13: data 2\",\n    0x4D: \"setting 13: data 3\",\n    // 0x4E: \"\",\n\n    0x4F: \"setting 14: channel\",\n    0x50: \"setting 14: message type\",\n    0x51: \"setting 14: data 1\",\n    0x52: \"setting 14: data 2\",\n    0x53: \"setting 14: data 3\",\n    // 0x54: \"\",\n\n    0x55: \"setting 15: channel\",\n    0x56: \"setting 15: message type\",\n    0x57: \"setting 15: data 1\",\n    0x58: \"setting 15: data 2\",\n    0x59: \"setting 15: data 3\",\n    // 0x5A: \"\",\n\n    0x5B: \"setting 16: channel\",\n    0x5C: \"setting 16: message type\",\n    0x5D: \"setting 16: data 1\",\n    0x5E: \"setting 16: data 2\",\n    0x5F: \"setting 16: data 3\",\n    // 0x60: \"\",\n\n    // 0x61: \"\",\n    // 0x62: \"\",\n    // 0x63: \"\",\n    // 0x64: \"\",\n    // 0x65: \"\",\n    // 0x66: \"\",\n    // 0x67: \"\",\n    // 0x68: \"\",\n    // 0x69: \"\",\n    // 0x6A: \"\",\n    // 0x6B: \"\",\n    // 0x6C: \"\",\n    // 0x6D: \"\",\n    // 0x6E: \"\",\n    // 0x6F: \"\",\n    // 0x70: \"\",\n    // 0x71: \"\",\n    // 0x72: \"\",\n    // 0x73: \"\",\n    // 0x74: \"\",\n    // 0x75: \"\",\n    // 0x76: \"\",\n    // 0x77: \"\",\n    // 0x78: \"\",\n    // 0x79: \"\",\n    // 0x7A: \"\",\n    // 0x7B: \"\",\n    // 0x7C: \"\",\n    // 0x7D: \"\",\n    // 0x7E: \"\",\n\n    0x7F: \"ALL\"\n};\n\nexport const COLORS = {\n    0x00 : \"Off\",\n    0x01 : \"1A Pink\",\n    0x02 : \"1B Dim Pink\",\n    0x03 : \"2A Red\",\n    0x04 : \"2B Dim Red\",\n    0x05 : \"3A Orange\",\n    0x06 : \"3B Dim Orange\",\n    0x07 : \"4A Amber\",\n    0x08 : \"4B Dim Amber\",\n    0x09 : \"5A Yellow\",\n    0x0A : \"5B Dim Yellow\",\n    0x0B : \"6A Lime\",\n    0x0C : \"6B Dim Lime\",\n    0x0D : \"7A Green\",\n    0x0E : \"7B Dim Green\",\n    0x0F : \"8A Teal\",\n    0x10 : \"8B Dim Teal\",\n    0x11 : \"9A Blue\",\n    0x12 : \"9B Dim Blue\",\n    0x13 : \"10A Lavender\",\n    0x14 : \"10B Dim Lavender\",\n    0x15 : \"11A Purple\",\n    0x16 : \"11B Dim Purple\",\n    0x17 : \"12A White\",\n    0x18 : \"12B Dim White\",\n};\n\nexport const CONTROL_MODE_ELEMENT = 0x60;\n\nexport const CONTROL_MODE_ALL = 0x00;\nexport const CONTROL_MODE_EXT_STEP = 0x01;\nexport const CONTROL_MODE_SEQUENCE = 0x02;\n\nexport const CONTROL_MODES = {\n    [CONTROL_MODE_ALL]: \"All\",\n    [CONTROL_MODE_EXT_STEP]: \"External Step Select\",\n    [CONTROL_MODE_SEQUENCE]: \"Sequence\",\n};\n","import {NEKTAR_TECHNOLOGY_INC} from \"midi-manufacturers\";\nimport {h, hs} from \"../utils/hexstring\";\nimport {\n    COMMAND_GET,\n    COMMAND_SET,\n    CONTROL_ALL,\n    CONTROL_EXPRESSION_PEDAL_1,\n    CONTROL_EXPRESSION_PEDAL_2,\n    CONTROL_FOOTSWITCH_4,\n    CONTROL_MIDI,\n    CONTROL_MODE_ELEMENT,\n    CONTROL_NAME,\n    CONTROL_STOMPSWITCH_1,\n    CONTROL_STOMPSWITCH_6,\n    CONTROL_STOMPSWITCH_A,\n    CONTROLS,\n    SYSEX_HEADER,\n    TARGET_PRESET,\n    TARGETS\n} from \"./constants\";\n\nexport const SINGLE_PRESET_EXPECTED_BYTES = 189;    // FIXME: unit is not bytes but messages\nexport const ALL_PRESETS_EXPECTED_BYTES = 4536;     // FIXME: unit is not bytes but messages\n\nexport const SYSEX_START = 0xF0;\nexport const SYSEX_END = 0xF7;\n\n// offsets from start of sysex data, right after SYSEX_START\nconst CMD = 4;\nconst TGT = 5;\nconst IDX = 6;\nconst OBJ = 7;\nconst ELM = 8;\n\n/**\n * https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge/34749873#34749873\n * Simple object check.\n * @param item\n * @returns {boolean}\n */\nfunction isObject(item) {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\n/**\n * https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge/34749873#34749873\n * Deep merge two objects.\n * @param target\n * @param ...sources\n */\nexport function mergeDeep(target, ...sources) {\n\n    if (!sources.length) return target;\n\n    const source = sources.shift();\n\n    if (isObject(target) && isObject(source)) {\n        for (const key in source) {\n            if (isObject(source[key])) {\n                if (!target[key]) Object.assign(target, { [key]: {} });\n                mergeDeep(target[key], source[key]);\n            } else {\n                Object.assign(target, { [key]: source[key] });\n            }\n        }\n    }\n\n    return mergeDeep(target, ...sources);\n}\n\n/**\n *\n * @param data Uint8Array\n */\nfunction isSysexData(data) {\n    // console.log(\"isSysexData\", data, data.byteLength, data[0], SYSEX_START, data[data.byteLength - 1], SYSEX_END);\n    if (data[0] !== SYSEX_START) return false;\n    if (data[data.byteLength - 1] !== SYSEX_END) return false;\n    return true;\n}\n\n/*\nfunction getManufacturerName(id) {\n    return id in midi_name ? midi_name[id] : \"manufacturer unknown\";\n}\n*/\n\nfunction getControlStep(data) {\n\n    // console.log(\"getControlStep\", hs(data));\n\n    // 01 01 0F 00      midi channel\n    // 02 01 47 00      message type\n    // 03 01 44 00      data 1\n    // 04 01 55 00      data 2\n    // 05 01 66 00      data 3\n    // 06 01 01         active\n\n    // the second byte is the length of the data that follows\n\n    //FIXME: use length\n\n    return {\n        index: (data[0] - 1) / 6 + 1,\n        config: {\n            channel: data[2],\n            msg_type: data[6],\n            data: [data[10], data[14], data[18]],\n            active: data[22]\n        }\n    };\n}\n\n\nfunction getControlMode(data) {\n    return {\n        control_mode: data[2]\n    };\n}\n\n\nfunction getControlLED(data) {\n\n    // console.log(\"getControlLED\", hs(data));\n\n    // 0x40\t<data>-MIDICtrl\tStep 1: LED MIDI Ctrl\n    // 0x41\t<data>-Color\tStep 1: LED Active Color\n    // 0x42\t<data>-Color\tStep 1: LED Inactive Color\n    // 0x43\t<data>-LEDNum\tStep 1: LED num\n\n    let cfg = {steps:{}};\n\n    let data_len;\n    let bytes;\n    let step;\n\n    let i = 0;\n    while (i<data.length) {\n        let d = data[i];\n        if (i===0) {\n            step = \"\" + ((d - 0x40) / 4 + 1);\n        }\n        if (!(step in cfg.steps)) cfg.steps[step] = {};\n        switch (d) {\n            case 0x40:\n            case 0x44:\n            case 0x48:\n            case 0x4C:\n            case 0x50:\n            case 0x54:\n                i++;\n                data_len = data[i];\n                i++;\n                if (data_len === 1) {\n                    bytes = data[i];\n                } else {\n                    bytes = Array.from(data.slice(i, i + data_len));\n                }\n                i += data_len;\n                cfg.steps[step][\"led_midi_ctrl\"] = bytes;\n                break;\n            case 0x41:\n            case 0x45:\n            case 0x49:\n            case 0x4D:\n            case 0x51:\n            case 0x55:\n                i++;\n                data_len = data[i];\n                i++;\n                if (data_len === 1) {\n                    bytes = data[i];\n                } else {\n                    bytes = Array.from(data.slice(i, i + data_len));\n                }\n                i += data_len;\n                cfg.steps[step][\"led_active_color\"] = bytes;\n                break;\n            case 0x42:\n            case 0x46:\n            case 0x4A:\n            case 0x4E:\n            case 0x52:\n            case 0x56:\n                i++;\n                data_len = data[i];\n                i++;\n                if (data_len === 1) {\n                    bytes = data[i];\n                } else {\n                    bytes = Array.from(data.slice(i, i + data_len));\n                }\n                i += data_len;\n                cfg.steps[step][\"led_inactive_color\"] = bytes;\n                break;\n            case 0x43:\n            case 0x47:\n            case 0x4B:\n            case 0x4F:\n            case 0x53:\n            case 0x57:\n                i++;\n                data_len = data[i];\n                i++;\n                if (data_len === 1) {\n                    bytes = data[i];\n                } else {\n                    bytes = Array.from(data.slice(i, i + data_len));\n                }\n                i += data_len;\n                cfg.steps[step][\"led_num\"] = bytes;\n                break;\n            case 0x7F:\n                i = data.length;\n                break;\n            default:\n                // console.log(`getControlLED: ignore byte ${h(d)}`);\n                i++;\n                break;\n        }\n    }\n\n    return cfg;\n}\n\n\nfunction getMidiSetting(data) {\n\n    // console.log(\"getMidiSetting\", hs(data));\n\n    return {\n        index: (data[0] - 1) / 6 + 1,       // e.g.: 7 --> 1, ..., 0x2B 43 --> 8\n        config: {\n            channel: data[2],\n            msg_type: data[6],\n            data: [data[10], data[14], data[18]]\n        }\n    };\n}\n\n\nfunction getPresetName(data) {\n    const len = data[1];\n    return String.fromCharCode.apply(null, data.slice(2, 2 + len));\n}\n\n\n/**\n * Parse a single sysex message\n * @param data\n * @returns {*}\n */\nfunction parseSysexMessage(data) {\n\n    // console.log(\"parseSysexMessage\", hs(data));\n\n    //TODO: verify checksum\n\n    const message = {};\n\n    let cmd = data[CMD];\n    let tgt = data[TGT];\n    let idx = data[IDX];\n    let obj = data[OBJ];\n\n    switch (cmd) {\n        case COMMAND_SET:\n            break;\n        case COMMAND_GET:\n            break;\n        default:\n            console.warn(`parseSysexMessage: invalid command (${h(cmd)})`);\n            return null;\n    }\n\n    if (!(tgt in TARGETS)) {\n        console.warn(\"parseSysexMessage: invalid target\", h(tgt), tgt, TARGETS);\n        return null;\n    }\n\n    message[tgt] = {};\n\n    if (idx >= 0x19 && idx <= 0x7E) {\n        // console.warn(\"parseSysexMessage: invalid/ignored idx\", idx);\n    }\n\n    // console.log(\"parseSysexMessage: bytes\", data);\n    // console.log(\"parseSysexMessage: bytes\", Array.from(data));\n\n    message[tgt][idx] = {\n        // bytes: data      // FIXME: consolidate data per preset\n    };\n\n    if (data.length === 7) return message;\n\n    if (!(obj in CONTROLS)) {\n        // console.warn(\"parseSysexMessage: invalid/ignored object\", h(obj));\n        return null;\n    }\n\n    let obj_type;\n    if (obj === CONTROL_NAME) {\n        obj_type = \"name\";\n    } else if ((obj >= CONTROL_STOMPSWITCH_1 && obj <= CONTROL_STOMPSWITCH_6) ||\n        (obj >= CONTROL_STOMPSWITCH_A && obj <= CONTROL_FOOTSWITCH_4) ||\n        (obj >= CONTROL_EXPRESSION_PEDAL_1 && obj <= CONTROL_EXPRESSION_PEDAL_2)) {\n        obj_type = \"control\";\n    } else if (obj === CONTROL_MIDI) {\n        obj_type = \"midi\";\n    } else if (obj === CONTROL_ALL) {\n        obj_type = \"all\";\n    } else {\n        console.warn('parseSysexMessage: invalid obj', obj);\n        return null;\n    }\n\n    // if (data.length === 8) return message;\n\n    // console.log(`target=${TARGET[tgt]} (${h(tgt)}), idx=${h(idx)}, object=${OBJECT[obj]} (${h(obj)}), type=${obj_type}`);\n    // console.log(`${TARGETS[tgt]} ${h(idx)} : ${CONTROLS[obj]} ${obj_type}`);\n\n    if (obj_type === \"name\") {\n\n        // NAME\n        message[tgt][idx][\"name\"] = getPresetName(data.slice(ELM));\n\n    }\n\n    if (obj_type === \"control\") {\n\n        message[tgt][idx][\"controls\"] = {\n            [obj]: {\n                steps: {}\n            }\n        };\n\n        if (data.length > 9) {\n\n            // which element?\n            let e = data[ELM];\n\n            // console.log(h(e));\n\n            if (e >= 0x01 && e <= 0x24) {\n\n                // STEPS\n                if (data.length > ELM + 22) {\n                    let s = getControlStep(data.slice(ELM, ELM + 23));\n                    message[tgt][idx][\"controls\"][obj][\"steps\"][s.index] = s.config;\n                } else {\n                    console.warn(`parseSysexMessage: data does not contains steps. data.length=${data.length}`, hs(data));\n                }\n\n            } else if (e === CONTROL_MODE_ELEMENT) {\n\n                // CONTROL MODE\n                console.log('parseSysexMessage: CONTROL MODE', idx, obj, ELM, data.slice(ELM, data.length - 1), data);\n\n                let mode_cfg = getControlMode(data.slice(ELM, data.length - 1));\n                message[tgt][idx][\"controls\"][obj] = mergeDeep(message[tgt][idx][\"controls\"][obj], mode_cfg);\n\n            } else if (e >= 0x40 && e <= 0x57) {\n\n                // LED\n                // console.log('parseSysexMessage: LED');\n\n                let led_cfg = getControlLED(data.slice(ELM, data.length - 1));\n                message[tgt][idx][\"controls\"][obj] = mergeDeep(message[tgt][idx][\"controls\"][obj], led_cfg);\n\n            } else if (e === 0x7F) {\n\n                // ALL\n                // console.log('parseSysexMessage: ALL');\n\n            } else {\n                console.warn(`parseSysexMessage: unknown element: ${h(e)}`);\n                return null;\n            }\n        } else {\n\n            message[tgt][idx][\"controls\"] = {\n                [obj]: {}\n            };\n\n        }\n\n    }\n\n    if (obj_type === \"midi\") {\n\n        message[tgt][idx][\"midi\"] = {};\n\n        // which element?\n        let e = data[ELM];\n\n        if (e >= 0x01 && e <= 0x60) {\n\n            // SETTINGS\n            if (data.length > ELM+19) {\n                let s = getMidiSetting(data.slice(ELM, ELM + 20));\n                message[tgt][idx][\"midi\"][s.index] = s.config;\n            } else {\n                console.warn(`parseSysexMessage: data does not contains steps. data.length=${data.length}`, hs(data));\n            }\n\n        } else {\n            console.warn(`parseSysexMessage: unknown element: ${h(e)}`);\n            return null;\n        }\n\n    }\n\n\n    if (obj_type === \"all\") {\n\n        message[tgt][idx][\"all\"] = {};\n\n        // // which element?\n        // let e = data[ELM];\n        //\n        // if (e >= 0x01 && e <= 0x60) {\n        //\n        //     // SETTINGS\n        //     if (data.length > ELM+19) {\n        //         let s = getMidiSetting(data.slice(ELM, ELM + 20));\n        //         message[tgt][idx][\"midi\"][s.index] = s.config;\n        //     } else {\n        //         console.warn(`parseSysexMessage: data does not contains steps. data.length=${data.length}`, hs(data));\n        //     }\n        //\n        // } else {\n        //     console.warn(`parseSysexMessage: unknown element: ${h(e)}`);\n        //     return null;\n        // }\n\n    }\n\n\n\n    // console.log('MESSAGE', message);\n    return message;\n\n} // parseSysex()\n\n\n/**\n * Parse a sysex dump. A dump can contains multiple sysex messages.\n * Return a array of presets.\n * @param data ArrayBuffer\n */\nfunction parseSysexDump(data) {\n\n    // console.log(\"parseSysexDump\", hs(data));\n\n    if (data === null) return null;\n\n    let presets = {};   // Collection of presets. The key is the preset's index. The value is the preset.\n    // let global = {};    // global conf\n\n    let i = 0;\n    let cont = true;\n    while (cont) {\n\n        i = data.indexOf(SYSEX_START, i);\n        if (i < 0) break;\n\n        i++;\n\n        let k = data.indexOf(SYSEX_END, i);\n\n        let manufacturer_id = (Array.from(data.slice(i, i+3)).map(n => h(n))).join(\" \");    // Array.from() is necessary to get a non-typed array\n        if (manufacturer_id !== NEKTAR_TECHNOLOGY_INC) {\n            console.log(\"parseSysexDump: file does not contain a Nektar Pacer patch\", i, k, manufacturer_id, \"-\", hs(data));\n            return null;\n        }\n\n        if (data[i+3] !== 0x7F) {\n            console.warn(`parseSysexDump: invalid byte after manufacturer id: ${data[i+1 +3]}`);\n            return null;\n        }\n\n        let config = parseSysexMessage(data.slice(i, k));  // data.slice(i, k) are the data between SYSEX_START and SYSEX_END\n\n        if (config) {\n            mergeDeep(presets, config);\n        }\n\n    } // while\n\n    // console.log(\"parseSysexDump\", JSON.stringify(presets));\n\n    return presets;\n}\n\n\n/**\n * Split a sysex dump into individual presets\n *\n * input: binay data\n * output: collection (key-value obj) of binary data\n */\n/*\nfunction splitDump(data) {\n\n    if (data === null) return {};\n\n    let presets = [];   // Collection of presets. The key is the preset's index. The value is the preset.\n    // let global = {};    // global conf\n\n    let i = 0;\n    let cont = true;\n    while (cont) {\n\n        i = data.indexOf(SYSEX_START, i);\n        if (i < 0) break;\n\n        i++;\n\n        let k = data.indexOf(SYSEX_END, i);\n\n        let manufacturer_id = (Array.from(data.slice(i, i+3)).map(n => h(n))).join(\" \");    // Array.from() is necessary to get a non-typed array\n        if (manufacturer_id !== NEKTAR_TECHNOLOGY_INC) {\n            console.log(\"parseSysexDump: file does not contain a Nektar Pacer patch\", i, k, manufacturer_id, \"-\", hs(data));\n            return {};\n        }\n\n        if (data[i+3] !== 0x7F) {\n            console.warn(`parseSysexDump: invalid byte after manufacturer id: ${data[i+1 +3]}`);\n            return {};\n        }\n\n        let d = data.slice(i, k);\n\n        // let config = parseSysexMessage(data.slice(i, k));  // data.slice(i, k) are the data between SYSEX_START and SYSEX_END\n\n        // if (config) {\n        //     mergeDeep(presets, config);\n        // }\n\n    } // while\n\n    // console.log(\"parseSysexDump\", JSON.stringify(presets));\n\n    return presets;\n}\n*/\n\n\nexport function checksum(bytes) {\n    if (bytes === null || bytes === undefined || bytes.length === 0) return 128;\n    let sum = Uint8Array.from(bytes).reduce((previousValue, currentValue) => previousValue + currentValue);\n    return 128 - (sum % 128);\n}\n\n/**\n *\n */\nexport function requestAllPresets() {\n    let msg = [\n        COMMAND_GET,\n        TARGET_PRESET,\n        CONTROL_ALL\n    ];\n    let cs = checksum(msg);\n    msg.push(cs);\n    return SYSEX_HEADER.concat(msg);\n}\n\n/**\n * return the sysex message to send to the Pacer to request some data\n */\nexport function requestPreset(presetIndex) {\n    let msg = [\n        COMMAND_GET,\n        TARGET_PRESET,\n        presetIndex,\n        CONTROL_ALL\n    ];\n    let cs = checksum(msg);\n    msg.push(cs);\n    return SYSEX_HEADER.concat(msg);\n}\n\n/**\n * return the sysex message to send to the Pacer to request some data\n */\nexport function requestPresetObj(presetIndex, controlId) {\n\n    // To get the LED data, we need to request the complete preset config instead of just the specific control's config.\n    // return requestPreset(presetIndex);\n    let msg = [\n        COMMAND_GET,\n        TARGET_PRESET,\n        presetIndex,      // preset #\n        controlId         // (control)\n    ];\n    let cs = checksum(msg);\n    msg.push(cs);\n    return SYSEX_HEADER.concat(msg);\n}\n\n/**\n * Return an array of sysex messages to update a control's steps.\n * @param presetIndex\n * @param controlId\n * @param steps\n * @returns {*}\n */\nfunction buildControlStepSysex(presetIndex, controlId, steps) {\n\n    console.log(`buildControlStepSysex(${presetIndex}, ${controlId}, ...)`);\n\n    let msgs = [];\n\n    for (let i of Object.keys(steps)) {\n\n        let step = steps[i];\n\n        if (!step.changed) continue;\n\n        // start with command and target:\n        let msg = [\n            COMMAND_SET,\n            TARGET_PRESET,\n            presetIndex,\n            controlId];\n\n        // add data:\n        msg.push((i-1)*6 + 1, 1, step.channel, 0x00);\n        msg.push((i-1)*6 + 2, 1, step.msg_type, 0x00);\n        msg.push((i-1)*6 + 3, 1, step.data[0], 0x00);\n        msg.push((i-1)*6 + 4, 1, step.data[1], 0x00);\n        msg.push((i-1)*6 + 5, 1, step.data[2], 0x00);\n        msg.push((i-1)*6 + 6, 1, step.active);\n\n        // LED\n/*\n        msg.push((i-1)*4 + 0x40, 1, step.led_midi_ctrl, 0x00);\n        msg.push((i-1)*4 + 0x41, 1, step.led_active_color, 0x00);\n        msg.push((i-1)*4 + 0x42, 1, step.led_inactive_color, 0x00);\n        msg.push((i-1)*4 + 0x43, 1, step.led_num, 0x00);\n*/\n\n        // add checksum:\n        msg.push(checksum(msg));\n\n        // inject header and add to list of messages:\n        msgs.push(SYSEX_HEADER.concat(msg));\n    }\n\n    // console.log(\"buildControlStepSysex\", msgs);\n    msgs.map(m => console.log(\"buildControlStepSysex\", hs(m)));\n\n    return msgs;\n}\n\nfunction buildControlStepLedSysex(presetIndex, controlId, steps) {\n\n    console.log(`buildControlStepLedSysex(${presetIndex}, ${controlId}, ...)`);\n\n    let msgs = [];\n\n    for (let i of Object.keys(steps)) {\n\n        let step = steps[i];\n\n        if (!step.led_changed) continue;\n\n        // start with command and target:\n        let msg = [\n            COMMAND_SET,\n            TARGET_PRESET,\n            presetIndex,\n            controlId];\n\n        // add data:\n        // msg.push((i-1)*6 + 1, 1, step.channel, 0x00);\n        // msg.push((i-1)*6 + 2, 1, step.msg_type, 0x00);\n        // msg.push((i-1)*6 + 3, 1, step.data[0], 0x00);\n        // msg.push((i-1)*6 + 4, 1, step.data[1], 0x00);\n        // msg.push((i-1)*6 + 5, 1, step.data[2], 0x00);\n        // msg.push((i-1)*6 + 6, 1, step.active);\n\n        // LED\n        msg.push((i-1)*4 + 0x40, 1, step.led_midi_ctrl, 0x00);\n        msg.push((i-1)*4 + 0x41, 1, step.led_active_color, 0x00);\n        msg.push((i-1)*4 + 0x42, 1, step.led_inactive_color, 0x00);\n        msg.push((i-1)*4 + 0x43, 1, step.led_num, 0x00);\n\n        // add checksum:\n        msg.push(checksum(msg));\n\n        // inject header and add to list of messages:\n        msgs.push(SYSEX_HEADER.concat(msg));\n    }\n\n    console.log(\"buildControlStepLedSysex\", msgs);\n    msgs.map(m => console.log(\"buildControlStepLedSysex\", hs(m)));\n\n    return msgs;\n}\n\n/**\n *\n * @param presetIndex\n * @param controlId\n * @param mode\n * @returns {number[]}\n */\nfunction buildControlModeSysex(presetIndex, controlId, mode) {\n\n    // console.log(`buildControlStepMode(${presetIndex}, ${controlId}, ...)`);\n\n    // start with command and target:\n    let msg = [\n        COMMAND_SET,\n        TARGET_PRESET,\n        presetIndex,\n        controlId,\n        CONTROL_MODE_ELEMENT,\n        0x01,   // 1 byte of data\n        mode\n    ];\n\n    // add checksum:\n    msg.push(checksum(msg));\n\n    // console.log(\"buildControlModeSysex\", msg);\n\n    // inject header and return the result:\n    return SYSEX_HEADER.concat(msg);\n}\n\n/**\n * Wihtout Control Mode config\n * Without LED config\n *\n * @param presetIndex\n * @param controlId\n * @param data\n * @returns {*}\n */\nfunction getControlUpdateSysexMessages(presetIndex, controlId, data) {\n\n    console.log(`getControlUpdateSysexMessages(${presetIndex}, ${controlId}`); //, ${JSON.stringify(data)})`);\n\n    let msgs = [];\n\n    if (data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"control_mode_changed\"]) {\n        msgs.push(buildControlModeSysex(presetIndex, controlId, data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"control_mode\"]));\n    }\n\n    msgs = msgs.concat(buildControlStepSysex(presetIndex, controlId, data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"steps\"]));\n\n    // if (data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"changed\"]) {\n        msgs = msgs.concat(buildControlStepLedSysex(presetIndex, controlId, data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"steps\"]));\n    // }\n\n    return msgs;\n}\n\n\n\nfunction buildMidiSettingsSysex(presetIndex, settings) {\n\n    // console.log(`buildMidiSettingStepSysex(${presetIndex}, ...)`);\n\n    let msgs = [];\n\n    for (let i of Object.keys(settings)) {\n\n        let setting = settings[i];\n\n        if (!setting.changed) continue;\n\n        // start with command and target:\n        let msg = [\n            COMMAND_SET,\n            TARGET_PRESET,\n            presetIndex,\n            CONTROL_MIDI];\n\n        // add data:\n        msg.push((i-1)*6 + 1, 1, setting.channel, 0x00);\n        msg.push((i-1)*6 + 2, 1, setting.msg_type, 0x00);\n        msg.push((i-1)*6 + 3, 1, setting.data[0], 0x00);\n        msg.push((i-1)*6 + 4, 1, setting.data[1], 0x00);\n        msg.push((i-1)*6 + 5, 1, setting.data[2], 0x00);\n        msg.push((i-1)*6 + 6, 1, setting.active);\n\n        // add checksum:\n        msg.push(checksum(msg));\n\n        // inject header and add to list of messages:\n        msgs.push(SYSEX_HEADER.concat(msg));\n    }\n\n    // console.log(\"buildControlStepSysex\", msgs);\n\n    return msgs;\n}\n\n\nfunction buildPresetNameSysex(presetIndex, data) {\n\n    if (!data[TARGET_PRESET][presetIndex].changed) return null;\n\n    // start with command and target:\n    let msg = [\n        COMMAND_SET,\n        TARGET_PRESET,\n        presetIndex,\n        CONTROL_NAME,\n        0x00            // when setting the name this byte can be anything\n    ];\n\n    const s = data[TARGET_PRESET][presetIndex][\"name\"];\n\n    // add data:\n    msg.push(s.length);\n\n    for (let i=0; i < s.length; i++) {\n        msg.push(s.charCodeAt(i));\n    }\n\n    // add checksum:\n    msg.push(checksum(msg));\n\n    // inject header and return result:\n    return SYSEX_HEADER.concat(msg)\n}\n\n\nfunction getMidiSettingUpdateSysexMessages(presetIndex, data) {\n    return buildMidiSettingsSysex(presetIndex, data[TARGET_PRESET][presetIndex][\"midi\"]);\n}\n\n\nexport {\n    isSysexData,\n    parseSysexDump,\n    getControlUpdateSysexMessages,\n    getMidiSettingUpdateSysexMessages,\n    buildPresetNameSysex\n};\n\n","import WebMidi from \"webmidi\";\n\nfunction portById(id) {\n    let p = WebMidi.inputs.find(item => item.id === id);\n    if (p) {\n        return p;\n    } else {\n        return WebMidi.outputs.find(item => item.id === id);\n    }\n}\n\nfunction inputById(id) {\n    return WebMidi.inputs.find(item => item.id === id);\n}\n\nfunction outputById(id) {\n    return WebMidi.outputs.find(item => item.id === id);\n}\n\n/**\n * Return webmidi input name from input id\n * @param id\n */\nfunction inputName(id) {\n    let i = inputById(id);\n    return i ? i.name : null;\n}\n\nfunction outputName(id) {\n    let i = outputById(id);\n    return i ? i.name : null;\n}\n\n\nexport {\n    portById,\n    inputById,\n    inputName,\n    outputName,\n    outputById\n}\n","/**\n * Example: 23 => \"D5\"\n * @param index\n * @returns {string}\n */\nexport const presetIndexToXY = index => {\n    if (index === 0) return \"CUR\";\n    //TODO: check valid range\n    let b = Math.floor((index - 1) / 6);\n    let i = (index - 1) % 6 + 1;\n    return String.fromCharCode(b + 65) + i.toString();\n};\n/**\n * Exampe: \"D5\" => 23\n * @param xy\n * @returns {number}\n */\nexport const presetXYToIndex = xy => {\n    // if (xy === \"CUR\") return 0;\n    //TODO: check valid range\n    let bank = xy.charCodeAt(0) - 65;\n    let num = parseInt(xy[1], 10);\n    return bank * 6 + num;\n};\n","import React from \"react\";\nimport \"./DumpSysex.css\";\nimport {\n    MSG_SW_NOTE,\n    TARGET_PRESET,\n    MSG_TYPES, COLORS, CONTROLS_FULLNAME\n} from \"../pacer/constants\";\nimport {h, hs} from \"../utils/hexstring\";\nimport \"./DumpSysex.css\";\nimport * as Note from \"tonal-note\";\nimport {presetIndexToXY} from \"../pacer/utils\";\n\n/*\nconst PresetName = ({ name }) => {\n    return (\n        <div className=\"dump-preset-name\">Preset name: {name}</div>\n    );\n};\n*/\n\nconst MidiTable = ({ settings }) => {\n    if (settings === null || settings === undefined) return null;\n    return (\n        <div className=\"dump-control\">\n            <table>\n                <tbody>\n                <tr>\n                    <td colSpan={6} className=\"name\">MIDI settings</td>\n                </tr>\n                {Object.keys(settings).map(i => {\n                    let t = MSG_TYPES[settings[i][\"msg_type\"]];\n                    if (settings[i][\"msg_type\"] === MSG_SW_NOTE) {\n                        t = t + ' ' + Note.fromMidi(settings[i][\"data\"][0], true) + ' vel. ' + settings[i][\"data\"][1];\n                    }\n                    return (\n                        <tr key={i}>\n                            <td>settings {i}</td>\n                            <td>ch. {h(settings[i][\"channel\"])}</td>\n                            <td>msg {h(settings[i][\"msg_type\"])}</td>\n                            <td>{t}</td>\n                            <td>{hs(settings[i][\"data\"])}</td>\n                            {/*<td>{settings[i][\"msg_type\"] === MSG_SW_NOTE ? Note.fromMidi(settings[i][\"data\"][0], true) : \"  \"}</td>*/}\n                            <td>{settings[i][\"active\"] ? \"active\" : \"OFF\"}</td>\n                        </tr>\n                    )}\n                )}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nconst MidiSettings = ({ settings }) => {\n    if (settings === null) return null;\n    return (\n        <div>\n            <MidiTable settings={settings} />\n        </div>\n    );\n};\n\nconst ControlTable = ({ obj, config }) => {\n    if (config === null || config === undefined) return null;\n    return (\n        <div className=\"dump-control\">\n            <table>\n                <tbody>\n                    <tr>\n                        <td colSpan={10} className=\"name\">{CONTROLS_FULLNAME[obj]}</td>\n                    </tr>\n                    <tr>\n                        <th>step</th>\n                        <th>ch.</th>\n                        <th>type</th>\n                        <th>data</th>\n                        <th>decoded</th>\n                        <th>active</th>\n                        <th>LED num</th>\n                        <th>LED On</th>\n                        <th>LED Off</th>\n                        <th>LED midi</th>\n                    </tr>\n                    {Object.keys(config[\"steps\"]).map(i => {\n                        let t = MSG_TYPES[config[\"steps\"][i][\"msg_type\"]];\n                        if (config[\"steps\"][i][\"msg_type\"] === MSG_SW_NOTE) {\n                            t = t + ' ' + Note.fromMidi(config[\"steps\"][i][\"data\"][0], true) + ' vel. ' + config[\"steps\"][i][\"data\"][1];\n                        }\n                        const c0 = config[\"steps\"][i][\"led_inactive_color\"];\n                        const c1 = config[\"steps\"][i][\"led_active_color\"];\n                        return (\n                            <tr key={`${obj}.${i}`}>\n                                <td>{i}</td>\n                                <td>{h(config[\"steps\"][i][\"channel\"])}</td>\n                                <td>{h(config[\"steps\"][i][\"msg_type\"])}</td>\n                                <td>{hs(config[\"steps\"][i][\"data\"])}</td>\n                                <td>{t}</td>\n                                <td>{config[\"steps\"][i][\"active\"] ? \"active\" : \"OFF\"}</td>\n                                <td>{h(config[\"steps\"][i][\"led_num\"])}</td>\n                                <td>{c1 in COLORS ? COLORS[c1] : h(c1)}</td>\n                                <td>{c0 in COLORS ? COLORS[c0] : h(c0)}</td>\n                                <td>{h(config[\"steps\"][i][\"led_midi_ctrl\"])}</td>\n                            </tr>\n                        )}\n                    )}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nconst Controls = ({ controls }) => {\n    if (controls === null || controls === undefined) return null;\n    return (\n        <div className=\"dump-controls\">\n            {Object.keys(controls).map(obj => <ControlTable key={obj} obj={obj} config={controls[obj]} />)}\n        </div>\n    );\n};\n\nconst Preset = ({ index, data }) => {\n    if (data === null || data === undefined) return null;\n    return (\n        <div>\n            <h3>Preset {presetIndexToXY(parseInt(index, 10))} (#{index}): {data[\"name\"]}</h3>\n            {/*<PresetName name= />*/}\n            <Controls controls={data[\"controls\"]} />\n            <MidiSettings settings={data[\"midi\"]} />\n        </div>\n    );\n};\n\nconst Presets = ({ presets }) => {\n    if (presets === null || presets === undefined) return null;\n    return (\n        <div>\n            {Object.keys(presets).map(idx => <Preset key={idx} index={idx} data={presets[idx]} />)}\n        </div>\n    );\n};\n\nconst DumpSysex = ({ data }) => {\n    return (\n        <div className=\"dump code\">\n            {\n                data && <Presets presets={data[TARGET_PRESET]} />\n            }\n            {\n                JSON.stringify(data, null, 4)\n            }\n        </div>\n    );\n};\n\n\nexport default DumpSysex;\n","import React, {Component, Fragment} from 'react';\nimport PropTypes from 'prop-types';\nimport * as WebMidi from \"webmidi\";\nimport {inputById, portById} from \"../utils/ports\";\nimport {PACER_MIDI_INPUT_PORT_NAME} from \"../pacer/constants\";\nimport {produce} from \"immer\";\n\nconst propTypes = {\n    classname: PropTypes.string,\n    only: PropTypes.string,                 // regex applied to port.name\n    autoConnect: PropTypes.string,          // regex applied to port.name\n    portsRenderer: PropTypes.func,\n    // inputRenderer: PropTypes.func,\n    // outputRenderer: PropTypes.func,\n    onMidiInputEvent: PropTypes.func,\n    onMidiOutputEvent: PropTypes.func,\n    onInputConnection: PropTypes.func,      // callback with port.id as parameter\n    onOutputConnection: PropTypes.func,     // callback with port.id as parameter\n    onInputDisconnection: PropTypes.func,   // callback with port.id as parameter\n    onOutputDisconnection: PropTypes.func,  // callback with port.id as parameter\n    setOutput: PropTypes.func,              // callback with port.id as parameter\n    children: PropTypes.node\n};\n\nconst defaultProps = {\n    classname: '',\n    only: \".*\"\n};\n\n/**\n *\n * @param props\n * @constructor\n */\nexport default class Midi extends Component {\n\n    //TODO: allow specification of channel and message types to listen to\n\n    state = {\n        inputs: [],         // array of MIDI inputs (filtered from WebMidi object)\n        outputs: [],        // array of MIDI outputs (filtered from WebMidi object)\n        input: null,        // MIDI output port enabled\n        output: null,       // MIDI output port enabled,\n        pacerPresent: false\n        // pacerInputConnected: false,\n        // pacerOutputConnected: false\n    };\n\n    connectInput = port => {\n        if (this.props.onMidiInputEvent) {\n            if (port) {\n                if (port.hasListener('midimessage', 'all', this.props.onMidiInputEvent)) {\n                    console.warn(`Midi.connectInput: sysex messages on all channels listener already connected`);\n                } else {\n                    console.log(`Midi.connectInput: add listener for sysex messages on all channels`);\n                    port.addListener('midimessage', 'all', this.props.onMidiInputEvent);\n                    if (this.props.onInputConnection) {\n                        this.props.onInputConnection(port.id);\n                    }\n                    console.log(\"connectInput: \", port.name);\n                    // if (port.name.match(new RegExp(PACER_MIDI_INPUT_PORT_NAME, 'i'))) {\n                    //     // console.log(\"connectInput: matched \", port.name);\n                    //     this.setState({ pacerInputConnected: true })\n                    // }\n                }\n            }\n        }\n    };\n\n    disconnectInput = port => {\n        if (port) {\n            if (port.removeListener) port.removeListener();\n            console.log(`disconnectInput: input ${port.id} disconnected`);\n            if (this.props.onInputDisconnection) {\n                this.props.onInputDisconnection(port.id);\n            }\n            // pacerPresent: WebMidi.inputs.findIndex(port => port.name.match(r2) != null) >= 0,\n            // if (port.name.match(new RegExp(PACER_MIDI_INPUT_PORT_NAME, 'i'))) {\n            //     this.setState({ pacerInputConnected: false })\n            // }\n        }\n    };\n\n    connectOutput = port => {\n        if (port) {\n            this.setState({output: port.id});\n            console.log(`connectOutput: output ${port.id} connected`);\n            if (this.props.onOutputConnection) {\n                this.props.onOutputConnection(port.id);\n            }\n            // if (port.name.match(new RegExp(PACER_MIDI_OUTPUT_PORT_NAME, 'i'))) {\n            //     this.setState({ pacerOutputConnected: true })\n            // }\n        }\n    };\n\n    disconnectOutput = () => {\n        if (this.state.output) {\n            let port_id = this.state.output;\n            this.setState(\n                produce(draft => {\n                    draft.pacerOutputConnected = false; // Since we only manage one connected output, if we disconnect it then the Pacer is necessarily disconnected too.\n                    draft.output = null;\n                })\n            );\n            console.log(`disconnectOutput: output ${port_id} disconnected`);\n            if (this.props.onOutputDisconnection) {\n                this.props.onOutputDisconnection(port_id);\n            }\n        }\n    };\n\n    autoConnectInput = () => {\n\n        if (this.props.autoConnect) {\n\n            console.log(`Midi.autoConnectInput: autoConnect ${this.props.autoConnect}`, this.state.inputs);\n\n            if (this.state.input === null) {\n\n                for (let port of this.state.inputs) {      //WebMidi.inputs) {\n\n                    console.log(`Midi.autoConnectInput: port ${port.name} ${port.id}`);\n\n                    if (port.type === 'input' && (port.name.match(new RegExp(this.props.autoConnect, 'i')) != null)) {\n\n                        console.log(`Midi.autoConnectInput: connect ${port.name}`);\n\n                        this.setState({input: port.id});\n\n                        this.connectInput(port);\n\n                        // if (port.hasListener('noteon', 'all', this.props.onMidiInputEvent)) {\n                        //     console.warn(`Midi.autoConnectInput: autoConnect: listener already connected`);\n                        // } else {\n                        //     console.log(`Midi.autoConnectInput: autoConnect: add listener`);\n                        //     port.addListener('noteon', 'all', this.props.onMidiInputEvent);\n                        // }\n                        break;\n                    }\n                }\n\n            } else {\n                console.log(`Midi.autoConnectInput: autoConnect skipped, already connected`);\n            }\n        }\n    };\n\n    autoConnectOutput = () => {\n\n        if (this.props.autoConnect) {\n\n            console.log(`Midi.autoConnectOutput: autoConnect ${this.props.autoConnect}`);\n\n            if (this.state.output === null) {\n\n                for (let port of this.state.outputs) {\n\n                    console.log(`Midi.autoConnectOutput: port ${port.name} ${port.id}`);\n\n                    if (port.type === 'output' && (port.name.match(new RegExp(this.props.autoConnect, 'i')) != null)) {\n\n                        console.log(`Midi.autoConnectOutput: autoConnect: auto-connect ${port.name}`);\n\n                        // this.setState({output: port.id});\n                        this.connectOutput(port);\n\n                        break;\n                    }\n                }\n\n            } else {\n                console.log(`Midi.autoConnectOutput: autoConnect skipped, already connected`);\n            }\n        }\n    };\n\n    registerInputs = () => {\n        const r = new RegExp(this.props.only, 'i');\n        const r2 = new RegExp(PACER_MIDI_INPUT_PORT_NAME, 'i');\n        // console.log(`Midi.registerInputs matching /${this.props.only}/i`, WebMidi.inputs, WebMidi.inputs.filter(port => port.name.match(r)));\n        // console.log(\"Midi.registerInputs index \", WebMidi.inputs.findIndex(\n        //     port => {\n        //         console.log(\"array.findIndex\", port.name, port.name.match(r2));\n        //         return port.name.match(r2) != null\n        //     }));\n        this.setState({\n                inputs: WebMidi.inputs.filter(port => port.name.match(r) != null),\n                pacerPresent: WebMidi.inputs.findIndex(port => port.name.match(r2) != null) >= 0,\n            },\n            () => this.autoConnectInput()\n        );\n    };\n\n    registerOutputs = () => {\n        const r = new RegExp(this.props.only, 'i');\n        // console.log(`Midi.registerOutputs matching /${this.props.only}/i`, WebMidi.outputs, WebMidi.outputs.filter(port => port.name.match(r) != null));\n        this.setState({\n                outputs: WebMidi.outputs.filter(port => port.name.match(r) != null)\n            },\n            () => this.autoConnectOutput()\n        );\n    };\n\n    unRegisterInputs = () => {\n        console.log(\"Midi.unRegisterInputs\");\n        this.disconnectInput(portById(this.state.input));\n        this.setState({\n            inputs: [],\n            input: null,\n            pacerPresent: false\n        });\n    };\n\n    unRegisterOutputs = () => {\n        console.log(\"Midi.unRegisterOutputs\");\n        this.disconnectOutput();\n        this.setState({ outputs: [], output: null });\n    };\n\n    handleMidiConnectEvent = e => {\n\n        console.group(`Midi: handleMidiConnectEvent: ${e.port.type} ${e.type}: ${e.port.name}`, e);\n\n        // TODO: is disconnect event, remove the existing input listeners\n        if (e.type === \"disconnected\") {\n            // console.log(`must disconnect ${e.port} ${e.port.id}`);\n            this.disconnectInput(e.port.id);\n            this.disconnectOutput();\n        }\n\n        if (e.port.name.match(new RegExp(this.props.only, 'i'))) {\n\n            if (e.port.type === 'input') {\n                // console.log(`ignore MIDI input connect event`);\n                console.log(\"Midi.handleMidiConnectEvent: call registerInputs\");\n                this.registerInputs();\n            }\n\n            if (e.port.type === 'output') {\n                console.log(\"Midi.handleMidiConnectEvent: call registerOutputs\");\n                this.registerOutputs();\n            }\n\n        } else {\n\n            console.log(`Midi.handleMidiConnectEvent: port ignored: ${e.port.name}`);\n\n        }\n\n        // Note: if we don't display the events, than the UI will not be updated if we don't update the state.\n\n        console.groupEnd();\n\n    };\n\n    /**\n     *\n     * @param port_id\n     */\n    togglePort = (port_id) => {\n        let p = portById(port_id);\n        if (p.type === 'input') {\n            console.log(\"toggle input\", port_id);\n            let prev = this.state.input;\n            if (this.state.input) {\n                this.disconnectInput(portById(this.state.input));\n                // this.setState({ input: null });\n            }\n            if (port_id !== prev) {\n                this.connectInput(inputById(port_id));\n                // this.setState({ input: port_id });\n            }\n            this.setState({ input: port_id === prev ? null : port_id });\n        } else {\n            console.log(\"toggle output\", port_id);\n            let prev = this.state.output;\n            // There is nothing to \"connect\" for an output port since this type of port does not generate any event.\n            // if (this.state.output) this.disconnectOutput(this.state.output);\n            if (this.state.output) {\n                this.disconnectOutput();\n            }\n            if (port_id !== prev) {\n                this.connectOutput(portById(port_id));\n            }\n            // this.setState({ output: port_id === this.state.output ? null : port_id });\n        }\n    };\n\n    midiOn = err => {\n        if (err) {\n            console.warn(\"Midi.midiOn: WebMidi could not be enabled.\", err);\n        } else {\n            console.log(\"Midi.midiOn: WebMidi enabled\");\n            WebMidi.addListener(\"connected\", this.handleMidiConnectEvent);\n            WebMidi.addListener(\"disconnected\", this.handleMidiConnectEvent);\n\n            /*\n            if (WebMidi.hasListener(\"connected\", this.handleMidiConnectEvent)) {\n                console.log(\"MidiPorts.componentDidMount: handleMidiConnectEvent already set on 'connected' event\");\n            } else {\n                WebMidi.addListener(\"connected\", this.handleMidiConnectEvent);\n            }\n            if (WebMidi.hasListener(\"disconnected\", this.handleMidiConnectEvent)) {\n                console.log(\"MidiPorts.componentDidMount: handleMidiConnectEvent already set on 'disconnected' event\");\n            } else {\n                WebMidi.addListener(\"disconnected\", this.handleMidiConnectEvent);\n            }\n            */\n        }\n    };\n\n    componentDidMount() {\n        console.log(`Midi: component did mount: WebMidi.enabled=${WebMidi.enabled}`);\n        if (WebMidi.enabled) {\n            console.log(`Midi: component did mount: already enabled, register ports`);\n            this.registerInputs();\n            this.registerOutputs();\n        } else {\n            console.log(\"Midi: component did mount: Calling WebMidi.enable\");\n            WebMidi.enable(this.midiOn, true);  // true to enable sysex support\n        }\n    }\n\n    componentWillUnmount() {\n        console.log(\"Midi: component will unmount: unregister ports\");\n        this.unRegisterInputs();\n        this.unRegisterOutputs();\n    }\n\n\n    portsGrouped = () => {\n        let g = {};\n        for (let p of WebMidi.inputs) {\n            g[p.name] = {\n                input: {\n                    id: p.id,\n                    selected: p.id === this.state.input\n                },\n                output: null\n            };\n        }\n        for (let p of WebMidi.outputs) {\n            if (!(p.name in g)) {\n                g[p.name] = {\n                    input: null,\n                    output: null\n                };\n            }\n            g[p.name].output = {\n                id: p.id,\n                selected: p.id === this.state.output\n            }\n        }\n        return g;\n    };\n\n\n    render() {\n\n        let {pacerPresent} = this.state;\n\n        // console.log(\"pacerPresent\", pacerPresent);\n\n        // console.log(this.state.inputs, this.state.outputs);\n\n        // if (input === null && output === null) {\n        //     return (\n        //         <div className={this.props.className}>\n        //             {this.props.children}\n        //         </div>\n        //     );\n        // } else {\n            return (\n                <Fragment>\n                    {\n                        this.props.portsRenderer(this.portsGrouped(), this.togglePort)\n                    }\n                    {!pacerPresent &&\n                    <Fragment>\n                        {this.props.children}\n                    </Fragment>}\n                </Fragment>\n            );\n        // }\n    }\n\n}\n\nMidi.propTypes = propTypes;\nMidi.defaultProps = defaultProps;\n","import React, {Fragment} from 'react';\nimport Switch from \"react-switch\";\n\nconst PortsGrid = ({ groupedPorts, clickHandler }) => {\n\n    // console.log(\"PortsGrid\", groupedPorts);\n\n    return (\n        <div className=\"ports-grid\">\n            {/*<div className=\"grid-header\">MIDI port</div>*/}\n            {/*<div className=\"grid-header\">IN</div>*/}\n            {/*<div className=\"grid-header\">OUT</div>*/}\n            {Object.keys(groupedPorts).map((name, index) =>\n                <div className=\"port\" key={index}>\n                    <div className=\"port-name\">{name}</div>\n                    {groupedPorts[name].input &&\n                    <div className=\"port-switch\">\n                        <Fragment>\n                            in&nbsp;<Switch\n                                onChange={() => clickHandler(groupedPorts[name].input.id)}\n                                checked={groupedPorts[name].input.selected}\n                                className=\"react-switch\"\n                                id={`switch-${groupedPorts[name].input.id}`}\n                                height={16} width={36}\n                            />\n                        </Fragment>\n                    </div>}\n                    {groupedPorts[name].output &&\n                    <div className=\"port-switch\">\n                        <Fragment>\n                            out&nbsp;<Switch\n                                onChange={() => clickHandler(groupedPorts[name].output.id)}\n                                checked={groupedPorts[name].output.selected}\n                                className=\"react-switch\"\n                                id={`switch-${groupedPorts[name].output.id}`}\n                                height={16} width={36}\n                            />\n                        </Fragment>\n                    </div>}\n                </div>\n            )}\n        </div>\n    );\n\n};\n\nexport default PortsGrid;\n","import React, {Component} from 'react';\nimport {\n    checksum,\n    isSysexData,\n    mergeDeep,\n    parseSysexDump,\n    requestAllPresets,\n    requestPreset,\n    requestPresetObj, SYSEX_END, SYSEX_START\n} from \"../pacer/sysex\";\nimport {ANY_MIDI_PORT, SYSEX_SIGNATURE} from \"../pacer/constants\";\nimport {outputById} from \"../utils/ports\";\nimport {fromHexString, h, hs} from \"../utils/hexstring\";\nimport \"./TestSender.css\";\nimport {produce} from \"immer\";\nimport DumpSysex from \"../components/DumpSysex\";\nimport {PACER_MIDI_PORT_NAME, SYSEX_HEADER} from \"../pacer/constants\";\nimport Midi from \"../components/Midi\";\nimport PortsGrid from \"../components/PortsGrid\";\n\n\nfunction replacerDec2Hex(key, value) {\n    return typeof value === 'number' ? '0x' + h(value) : value;\n    // if (typeof value === 'number') {\n    //     value = 2 * value;\n    // }\n    // return value;\n}\n\nfunction toSysExMessage(data) {\n    // console.log(\"toSysExMessage\", data, typeof data);\n    if (data === null) return null;\n    return [SYSEX_START, ...SYSEX_SIGNATURE, ...data, SYSEX_END];\n}\n\nfunction batchMessages(callback, wait) {\n\n    let messages = [];  // batch of received messages\n    let timeout;\n\n    return function() {\n        clearTimeout(timeout);\n        let event = arguments[0];\n        messages.push(event.data);\n        timeout = setTimeout(() => {\n            // console.log(\"timeout elapsed\");\n            timeout = null;\n            callback(messages);\n            messages = [];\n        }, wait);\n    };\n}\n\n\nclass TestSender extends Component {\n\n    state = {\n        output: null,           // MIDI output port used for output\n        data: null,\n        messages: [{\n            name: \"read current preset\",\n            message: requestPreset(0)\n        }, {\n            name: \"read preset A1\",\n            message: requestPreset(1)\n        }, {\n            name: \"read stompswitch #1 of preset #5\",\n            message: requestPresetObj(5, 0x0D)\n        }, {\n            name: \"read all presets (takes some time)\",\n            message: requestAllPresets()\n        }],\n        customMessage: \"\"\n    };\n\n    /**\n     * Ad-hoc method to show the busy flag and set a timeout to make sure the busy flag is hidden after a timeout.\n     */\n    showBusy = () =>  {\n        setTimeout(() => this.props.onBusy(false), 30000);\n        this.props.onBusy(true);\n    };\n\n    updateCustomMessage = (event) => {\n        let s = (event.target.value.toUpperCase().match(/[0-9A-F ]+/g) || []).join('');\n        this.setState({\n            customMessage: s\n        });\n    };\n\n    getCustomMessageData = () => {\n        if (this.state.customMessage && this.state.customMessage !== \"\") {\n            let d = fromHexString(this.state.customMessage, / /g);\n            if (d) {\n                let data = Array.from(d);\n                // console.log(\"getCustomMessageData\", data, typeof data);\n                if (data && data.length > 0) {\n                    data.push(checksum(data));\n                    // let tmp = SYSEX_HEADER.concat(d);\n                    // console.log(\"return custom message data\", tmp, hs(data));\n                    // return SYSEX_HEADER.concat(d);\n                    return [SYSEX_HEADER, ...d];\n                    // return data;\n                }\n            }\n        }\n        return null;\n    };\n\n    sendCustomMessage = () => {\n        let d = this.getCustomMessageData();\n        if (d && d.length > 0) this.sendSysex(d);\n        // if (this.state.customMessage) {\n        //     let data = Array.from(fromHexString(this.state.customMessage, / /g));\n        //     if (data && data.length > 0) {\n        //         data.push(checksum(data));\n        //         this.sendSysex(SYSEX_HEADER.concat(data));\n        //     }\n        // }\n    };\n\n/*\n    handleMidiInputEvent = (event) => {\n        // console.log(\"TestSender.handleMidiInputEvent\", event, event.data);\n        // if (event instanceof MIDIMessageEvent) {\n        if (isSysexData(event.data)) {\n            this.setState(\n                produce(draft => {\n                    draft.data = mergeDeep(draft.data || {}, parseSysexDump(event.data));\n                    // this.props.onBusy(false);\n                })\n            )\n        } else {\n            console.log(\"MIDI message is not a sysex message\")\n        }\n        // }\n    };\n*/\n\n    handleMidiInputEvent = batchMessages(\n        messages => {\n            this.setState(\n                produce(\n                    draft => {\n                        for (let m of messages) {\n                            if (isSysexData(m)) {\n                                draft.data = mergeDeep(draft.data || {}, parseSysexDump(m));\n                            } else {\n                                console.log(\"MIDI message is not a sysex message\")\n                            }\n                        }\n                    }\n                )\n            );\n            // let bytes = messages.reduce((accumulator, element) => accumulator + element.length, 0);\n            // this.addInfoMessage(`${messages.length} messages received (${bytes} bytes)`);\n            this.props.onBusy(false);\n        },\n        1000\n    );\n\n\n    setOutput = (port_id) => {\n        this.setState({output: port_id});\n    };\n\n    /**\n     *\n     * @param msg\n     */\n    sendSysex = msg => {\n        console.log(\"sendSysex\", msg);\n        if (!this.state.output) return;\n        let out = outputById(this.state.output);\n        if (!out) {\n            console.warn(`send: output ${this.state.output} not found`);\n            return;\n        }\n        this.showBusy();\n        this.setState(\n            {data: null},\n            () => out.sendSysex(SYSEX_SIGNATURE, msg)\n        );\n    };\n\n    sendMessage = (msg) => {\n        this.sendSysex(msg);\n    };\n\n    /**\n     * @returns {*}\n     */\n    render() {\n\n        const { data, messages, customMessage } = this.state;\n\n        const cs = checksum(fromHexString(customMessage, / /g));\n\n/*\n        let hex_msg = '';\n        if (customMessage.length % 2) {\n            hex_msg = hs(customMessage);\n        } else {\n            hex_msg = hs(customMessage.substring(0, customMessage.length - 1)) + ' ' + customMessage.substr(-1, 1);\n        }\n*/\n        let hex_msg = '';\n        let s = (customMessage.toUpperCase().match(/[0-9A-F]+/g) || []).join('');\n        for (let i=0; i < s.length; i++) {\n            if ((i > 0) && (i % 2 === 0)) hex_msg += ' ';\n            hex_msg += s[i];\n        }\n\n        let u = toSysExMessage(this.getCustomMessageData());\n        // console.log(\"u\", u);\n        let v = u ? JSON.stringify(parseSysexDump(Uint8Array.from(toSysExMessage(this.getCustomMessageData()))), replacerDec2Hex, 4) : \"\";\n\n\n        return (\n            <div className=\"wrapper\">\n\n\n                <div className=\"subheader\">\n                    <Midi only={ANY_MIDI_PORT} autoConnect={PACER_MIDI_PORT_NAME}\n                          portsRenderer={(groupedPorts, clickHandler) => <PortsGrid groupedPorts={groupedPorts} clickHandler={clickHandler} />}\n                          onMidiInputEvent={this.handleMidiInputEvent}\n                          className=\"\" >\n                        <div className=\"no-midi\">Please connect your Pacer to your computer.</div>\n                    </Midi>\n                </div>\n\n                <div className=\"content\">\n\n                    <div className=\"content-row-content first\">\n                        <h2>Test messages:</h2>\n                        <div className=\"content-row-content-content\">\n                        {messages.map((msg, i) =>\n                            <div key={i} className=\"send-message\">\n                                <button onClick={() => this.sendMessage(msg.message)}>send</button>\n                                <span className=\"code light\">{ hs(SYSEX_SIGNATURE.concat(msg.message.slice(0, 1))) } </span>\n                                <span className=\"code\">{ hs(msg.message.slice(1, -1)) } </span>\n                                <span className=\"code light\"> {hs(msg.message.slice(-1))}</span>\n                                <span className=\"message-name\"> {msg.name}</span>\n                            </div>\n                        )}\n                        </div>\n                    </div>\n\n                    <div className=\"content-row-content\">\n                        <h2>Custom message:</h2>\n                        <div className=\"content-row-content-content\">\n                            <div className=\"send-message\">\n                                <button onClick={this.sendCustomMessage} disabled={(customMessage.length % 2) !== 0}>send</button>\n                                <span className=\"code light\">{hs(SYSEX_SIGNATURE)} {hs(SYSEX_HEADER)} </span>\n                                <input type=\"text\" className=\"code\" size=\"80\" value={customMessage}\n                                       placeholder={\"hex digits only\"} onChange={this.updateCustomMessage} />\n                                <span className=\"code light\"> {h(cs)}</span>\n                            </div>\n\n                            <div className=\"custom-message code\">\n                                <span className=\"code light\">{hs(SYSEX_SIGNATURE)} {hs(SYSEX_HEADER)}</span> {hex_msg} <span className=\"code light\">{h(cs)}</span>\n                            </div>\n\n                            <div className=\"debug\">\n                                {v ? <pre>{v}</pre> : <div>Invalid message. Send at your own risk.</div>}\n                                {/*<pre>{hs(toSysExMessage(this.getCustomMessageData()))}</pre>*/}\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"content-row-content\">\n                        <h2>Response:</h2>\n                        <div className=\"content-row-content-content\">\n                            <div className=\"message code\">\n                                <DumpSysex data={data} />\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"content-row-content\">\n                    </div>\n\n{/*\n                    <div className=\"content-row-content\">\n                        {messages.map((msg, i) => {\n                            let d = Uint8Array.from(toSysExMessage(msg.message));\n                            console.log('d', d);\n                            return isSysexData(d) ?\n                                <div className=\"debug\" key={i}>\n                                    <h4>[Debug] sysex data to send:</h4>\n                                    <pre>{JSON.stringify(parseSysexDump(d), null, 4)}</pre>\n                                </div> :\n                                <div key={i}>nop {hs(d)}</div>\n                            }\n                        )}\n                    </div>\n*/}\n\n                    <div className=\"content-row-content\">\n                        {data &&\n                        <div className=\"debug\">\n                            <h4>[Debug] sysex data received:</h4>\n                            <pre>{JSON.stringify(data, null, 4)}</pre>\n                        </div>\n                        }\n                    </div>\n\n                </div>\n\n            </div>\n\n        );\n    }\n}\n\nexport default TestSender;\n","import React, {Fragment} from \"react\";\nimport \"./PresetSelector.css\";\nimport \"./selector.css\";\nimport {presetXYToIndex} from \"../pacer/utils\";\nimport {TARGET_PRESET} from \"../pacer/constants\";\n\nconst Selector = ({ id, index, name, selected, onClick }) =>\n    <div className={selected ? \"selector selected\" : \"selector\"} onClick={() => onClick(index)}>\n        <span className=\"preset-id\">{id}</span> <span className=\"preset-name\">{name}</span>\n    </div>;\n\nconst PresetSelector = ({ data, currentPreset, onClick }) =>\n    <Fragment>\n        <div className=\"preset-selectors\">\n            <Selector id={\"CUR\"} index={0} name={\"\"} selected={0 === currentPreset} onClick={onClick} key={0} />\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n        {\n            ['A', 'B', 'C', 'D'].map(\n            letter =>\n                <Fragment key={letter}>\n{/*\n                {\n                    (letter !== 'A') && <div></div>\n                }\n*/}\n                {\n                    Array.from(Array(6).keys()).map(\n                    digit => {\n                        let id = letter + (digit + 1);\n                        let index = presetXYToIndex(id);\n\n                        let show = data && data[TARGET_PRESET] && data[TARGET_PRESET][index];\n                        let name = show ? data[TARGET_PRESET][index][\"name\"] : \"\";\n\n                        return <Selector id={id} index={index} name={name} selected={index === currentPreset} onClick={onClick} key={index} />\n                    })\n                }\n                </Fragment>\n            )\n        }\n        </div>\n    </Fragment>;\n\nexport default PresetSelector;\n","import React from \"react\";\nimport {FOOTSWITCHES, STOMPSWITCHES_TOP, STOMPSWITCHES_BOTTOM, EXPPEDALS, CONTROLS} from \"../pacer/constants\";\nimport \"./ControlSelector.css\";\n\nconst Control = ({ name, id, selected, onClick }) =>\n    <div className={selected ? \"selector selected\" : \"selector\"} onClick={() => onClick(id)}>\n        <div className=\"name\">{name}</div>\n    </div>;\n\n\nconst ControlSelector = ({ currentControl, onClick }) =>\n    <div className=\"controls\">\n        {\n            FOOTSWITCHES.map(\n                key => <Control key={key} name={CONTROLS[key]} id={key} selected={key === currentControl} onClick={onClick} />\n            )\n        }\n        {\n            EXPPEDALS.map(\n                key => <Control key={key} name={CONTROLS[key]} id={key} selected={key === currentControl} onClick={onClick} />\n            )\n        }\n        <div className=\"no-control\">&nbsp;</div>\n        {\n            STOMPSWITCHES_TOP.map(\n                key => <Control key={key} name={CONTROLS[key]} id={key} selected={key === currentControl} onClick={onClick} />\n            )\n        }\n        <div className=\"no-control\">&nbsp;</div>\n        {\n            STOMPSWITCHES_BOTTOM.map(\n                key => <Control key={key} name={CONTROLS[key]} id={key} selected={key === currentControl} onClick={onClick} />\n            )\n        }\n    </div>;\n\n\nexport default ControlSelector;\n","import React, {Component, Fragment} from 'react';\nimport {\n    COLORS,\n    MSG_CTRL_OFF,\n    MSG_SW_NOTE,\n    MSG_SW_NOTE_TGGLE, MSG_TYPES_DATA_HELP,\n    MSG_TYPES_FULLNAME_SW,\n    MSG_TYPES_FULLNAME_SW_SORTED\n} from \"../pacer/constants\";\nimport * as Note from \"tonal-note\";\nimport \"./ControlStepsEditor.css\";\n\nconst LEDMidi = ({ current_value, onChange }) => {\n    return (\n        <select value={current_value} onChange={(event) => onChange(event.target.value)}>\n            <option value=\"0\">0</option>\n            <option value=\"1\">1</option>\n        </select>\n    );\n};\n\nconst LEDColor = ({ current_value, onChange }) => {\n    return (\n        <select value={current_value} onChange={(event) => onChange(event.target.value)}>\n            {\n                Object.keys(COLORS).map(\n                    key => {\n                        return <option key={key} value={key}>{COLORS[key]}</option>\n                    })\n            }\n        </select>\n    );\n};\n\nconst LEDNum = ({ current_value, onChange }) => {\n    return (\n        <select value={current_value} onChange={(event) => onChange(event.target.value)}>\n            <option value=\"0\">default</option>\n            <option value=\"3\">top</option>\n            <option value=\"2\">middle</option>\n            <option value=\"1\">bottom</option>\n        </select>\n    );\n};\n\nconst MidiNote = ({ note, onChange }) => {\n    return (\n        <select value={note} onChange={(event) => onChange(event.target.value)}>\n            {\n                Array.from(Array(127).keys()).map(\n                    i => {\n                        let n = Note.fromMidi(i, true);\n                        return <option key={i} value={i}>{n}</option>\n                    })\n            }\n        </select>\n    );\n};\n\nconst Step = ({ index, config, updateCallback }) => {\n\n    let inactive = config.msg_type === MSG_CTRL_OFF;\n\n    if (inactive) {\n        return (\n            <Fragment>\n                <div className=\"step-row-header\">Step {index}:</div>\n                <div>\n                    <select value={config.msg_type} onChange={(event) => updateCallback(\"msg_type\", null, event.target.value)}>\n                        {\n                            Object.keys(MSG_TYPES_FULLNAME_SW).map(\n                                key => {\n                                    return <option key={key} value={key}>{MSG_TYPES_FULLNAME_SW[key]}</option>\n                                })\n                        }\n                    </select>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n            </Fragment>\n        );\n    }\n\n    let d0, d1, d2;\n    if ((config.msg_type === MSG_SW_NOTE) || (config.msg_type === MSG_SW_NOTE_TGGLE)) {\n        d0 = <MidiNote note={config.data[0]} onChange={(value) => updateCallback(\"data\", 0, value)} />;\n        d1 = <input type=\"text\" value={config.data[1]} onChange={(event) => updateCallback(\"data\", 1, event.target.value)} />;\n        d2 = '';\n    } else {\n        d0 = <input type=\"text\" value={config.data[0]} onChange={(event) => updateCallback(\"data\", 0, event.target.value)} />;\n        d1 = <input type=\"text\" value={config.data[1]} onChange={(event) => updateCallback(\"data\", 1, event.target.value)} />;\n        d2 = <input type=\"text\" value={config.data[2]} onChange={(event) => updateCallback(\"data\", 2, event.target.value)} />;\n    }\n\n    return (\n        <Fragment>\n            <div className=\"step-row-header\">Step {index}:</div>\n            <div>\n                <select value={config.msg_type} onChange={(event) => updateCallback(\"msg_type\", null, event.target.value)}>\n                {\n                    MSG_TYPES_FULLNAME_SW_SORTED.map(\n                        v => {\n                            return <option key={v.key} value={v.key}>{v.value}</option>\n                        })\n                }\n                </select>\n            </div>\n            <div>{d0}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type] ? MSG_TYPES_DATA_HELP[config.msg_type][0] : ''}</div></div>\n            <div>{d1}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type] ? MSG_TYPES_DATA_HELP[config.msg_type][1] : ''}</div></div>\n            <div>{d2}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type] ? MSG_TYPES_DATA_HELP[config.msg_type][2] : ''}</div></div>\n            <div>\n                <LEDColor current_value={config.led_inactive_color} onChange={(value) => updateCallback(\"led_inactive_color\", null, value)} />\n            </div>\n            <div>\n                <LEDColor current_value={config.led_active_color} onChange={(value) => updateCallback(\"led_active_color\", null, value)} />\n            </div>\n            <div>\n                <LEDNum current_value={config.led_num} onChange={(value) => updateCallback(\"led_num\", null, value)} />\n            </div>\n            <div>\n                <LEDMidi current_value={config.led_midi_ctrl} onChange={(value) => updateCallback(\"led_midi_ctrl\", null, value)} />\n            </div>\n            <div>\n                <select value={config.channel} onChange={(event) => updateCallback(\"channel\", null, event.target.value)}>\n                    {\n                        Array.from(Array(16).keys()).map(i => <option key={i} value={i}>{i}</option>)\n                    }\n                </select>\n            </div>\n        </Fragment>\n    );\n};\n\nclass ControlStepsEditor extends Component {\n\n    onStepUpdate = (stepIndex, dataType, dataIndex, value) => {\n        this.props.onUpdate(stepIndex, dataType, dataIndex, value);    // stepIndex, dataIndex, value\n    };\n\n    render() {\n\n        const steps = this.props.steps;\n\n        return (\n            <div className=\"steps\">\n                <div></div>\n                <div className=\"step-col-header\">Type</div>\n                <div className=\"step-col-header\">Data 1</div>\n                <div className=\"step-col-header\">Data 2</div>\n                <div className=\"step-col-header\">Data 3</div>\n                <div className=\"step-col-header\">LED Off</div>\n                <div className=\"step-col-header\">LED On</div>\n                <div className=\"step-col-header\">LED Num</div>\n                <div className=\"step-col-header\">LED MIDI</div>\n                <div className=\"step-col-header\">MIDI Ch.</div>\n                {Object.keys(steps).map(i =>\n                    <Step key={i} index={i} config={steps[i]} updateCallback={(dataType, dataIndex, value) => this.onStepUpdate(i, dataType, dataIndex, value)} />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default ControlStepsEditor;\n","import React from \"react\";\nimport {CONTROL_MODES} from \"../pacer/constants\";\nimport\"./ControlModeEditor.css\";\n\nconst ControlModeEditor = (props) => {\n    // console.log(\"ControlModeEditor\", props);\n    return (\n        <div className=\"control-mode\">\n            <span className=\"step-row-header\">Control mode:</span>\n            <select onChange={(event) => props.onUpdate(event.target.value)} value={props.mode}>\n                {\n                    Object.keys(CONTROL_MODES).map(\n                        key => {\n                            // console.log(\"ControlModeEditor key\", key, props.mode);\n                            return <option key={key} value={key}>{CONTROL_MODES[key]}</option>\n                        })\n                }\n            </select>\n        </div>\n    );\n};\n\nexport default ControlModeEditor;\n","import React, {Component} from 'react';\n\nclass PresetNameEditor extends Component {\n\n    onNameUpdate = (event) => {\n        console.log(`PresetNameEditor.onSettingUpdate`, event.target.value);\n        this.props.onUpdate(event.target.value.length > 5 ? event.target.value.substr(0, 5) : event.target.value);\n    };\n\n    render() {\n        const name = this.props.name;\n        return (\n            <div className=\"preset-name\">\n                <p>The preset name is limited to 5 characters.</p>\n                <span className=\"strong\">Name:</span> <input value={name} onChange={this.onNameUpdate} size={8} />\n            </div>\n        );\n    }\n}\n\nexport default PresetNameEditor;\n","import * as WebMidi from \"webmidi\";\nimport {PACER_MIDI_PORT_NAME} from \"../pacer/constants\";\nimport {portById} from \"./ports\";\nimport {SYSEX_START} from \"../pacer/sysex\";\n\nexport const MESSAGE = {\n    0x80: \"Note Off\",\n    0x90: \"Note On\",\n    0xA0: \"AfterTouch\",\n    0xB0: \"Control Change\",\n    0xC0: \"Program Change\",\n    0xD0: \"Channel Pressure\",\n    0xE0: \"Pitch Wheel\"\n};\n\nexport const CONTROLER = {\n    0: \"Bank Select (coarse)\",\n    1: \"Modulation Wheel (coarse)\",\n    2: \"Breath controller (coarse)\",\n    4: \"Foot Pedal (coarse)\",\n    5: \"Portamento Time (coarse)\",\n    6: \"Data Entry (coarse)\",\n    7: \"Volume (coarse)\",\n    8: \"Balance (coarse)\",\n    10: \"Pan position (coarse)\",\n    11: \"Expression (coarse)\",\n    12: \"Effect Control 1 (coarse)\",\n    13: \"Effect Control 2 (coarse)\",\n    16: \"General Purpose Slider 1\",\n    17: \"General Purpose Slider 2\",\n    18: \"General Purpose Slider 3\",\n    19: \"General Purpose Slider 4\",\n    32: \"Bank Select (fine)\",\n    33: \"Modulation Wheel (fine)\",\n    34: \"Breath controller (fine)\",\n    36: \"Foot Pedal (fine)\",\n    37: \"Portamento Time (fine)\",\n    38: \"Data Entry (fine)\",\n    39: \"Volume (fine)\",\n    40: \"Balance (fine)\",\n    42: \"Pan position (fine)\",\n    43: \"Expression (fine)\",\n    44: \"Effect Control 1 (fine)\",\n    45: \"Effect Control 2 (fine)\",\n    64: \"Hold Pedal (on/off)\",\n    65: \"Portamento (on/off)\",\n    66: \"Sustenuto Pedal (on/off)\",\n    67: \"Soft Pedal (on/off)\",\n    68: \"Legato Pedal (on/off)\",\n    69: \"Hold 2 Pedal (on/off)\",\n    70: \"Sound Variation\",\n    71: \"Sound Timbre\",\n    72: \"Sound Release Time\",\n    73: \"Sound Attack Time\",\n    74: \"Sound Brightness\",\n    75: \"Sound Control 6\",\n    76: \"Sound Control 7\",\n    77: \"Sound Control 8\",\n    78: \"Sound Control 9\",\n    79: \"Sound Control 10\",\n    80: \"General Purpose Button 1 (on/off)\",\n    81: \"General Purpose Button 2 (on/off)\",\n    82: \"General Purpose Button 3 (on/off)\",\n    83: \"General Purpose Button 4 (on/off)\",\n    91: \"Effects Level\",\n    92: \"Tremulo Level\",\n    93: \"Chorus Level\",\n    94: \"Celeste Level\",\n    95: \"Phaser Level\",\n    96: \"Data Button increment\",\n    97: \"Data Button decrement\",\n    98: \"Non-registered Parameter (fine)\",\n    99: \"Non-registered Parameter (coarse)\",\n    100: \"Registered Parameter (fine)\",\n    101: \"Registered Parameter (coarse)\",\n    120: \"All Sound Off\",\n    121: \"All Controllers Off\",\n    122: \"Local Keyboard (on/off)\",\n    123: \"All Notes Off\",\n    124: \"Omni Mode Off\",\n    125: \"Omni Mode On\",\n    126: \"Mono Operation\",\n    127: \"Poly Operation\"\n};\n\nexport const groupPortsByName = () => {\n    let g = {};\n    for (let p of WebMidi.inputs) {\n        g[p.name] = {\n            input: p.id,\n            output: null\n        };\n    }\n    for (let p of WebMidi.outputs) {\n        if (!(p.name in g)) {\n            g[p.name] = {input: null, output: null};\n        }\n        g[p.name].output = p.id\n    }\n    return g;\n};\n\n/**\n *\n * @param port\n * returns true if the midi port is the Pacer\n */\nexport const outputIsPacer = portId => {\n    let port = portById(portId);\n    return port ? port.name.match(new RegExp(PACER_MIDI_PORT_NAME, 'i')) : false\n};\n\n\nexport const batchMessages = (callback, callbackBusy, wait) => {\n\n    let messages = [];  // batch of received messages\n    let timeout;\n\n    return function() {\n        clearTimeout(timeout);\n        let event = arguments[0];\n\n        // console.log(event);\n\n        //\n        // We ignore all messages that are NOT sysex messages:\n        //\n        if (event.data[0] !== SYSEX_START) {\n            console.log(\"non sysex message ignored\");\n            return;\n        }\n\n        messages.push(event.data);\n        // console.log('rec sysex', messages.length);\n        callbackBusy(messages.length);\n        timeout = setTimeout(() => {\n            // console.log(\"timeout elapsed\");\n            timeout = null;\n            callback(messages);\n            messages = [];\n        }, wait);\n    };\n};\n\n","import React, {Component, Fragment} from 'react';\nimport PresetSelector from \"../components/PresetSelector\";\nimport {\n    ALL_PRESETS_EXPECTED_BYTES,\n    buildPresetNameSysex,\n    getControlUpdateSysexMessages,\n    isSysexData,\n    mergeDeep,\n    parseSysexDump, requestAllPresets, requestPreset, SINGLE_PRESET_EXPECTED_BYTES\n} from \"../pacer/sysex\";\nimport ControlSelector from \"../components/ControlSelector\";\nimport {\n    ANY_MIDI_PORT,\n    MSG_CTRL_OFF,\n    PACER_MIDI_PORT_NAME,\n    SYSEX_SIGNATURE,\n    TARGET_PRESET\n} from \"../pacer/constants\";\nimport {hs} from \"../utils/hexstring\";\nimport {produce} from \"immer\";\nimport {outputById} from \"../utils/ports\";\nimport ControlStepsEditor from \"../components/ControlStepsEditor\";\nimport Midi from \"../components/Midi\";\nimport Dropzone from \"react-dropzone\";\nimport \"./Preset.css\";\nimport ControlModeEditor from \"../components/ControlModeEditor\";\nimport PresetNameEditor from \"../components/PresetNameEditor\";\nimport PortsGrid from \"../components/PortsGrid\";\nimport {batchMessages, outputIsPacer} from \"../utils/midi\";\nimport {dropOverlayStyle, MAX_FILE_SIZE} from \"../utils/misc\";\n\n// const MAX_FILE_SIZE = 5 * 1024*1024;\n\n// const MAX_STATUS_MESSAGES = 40;\n\nfunction isVal(v) {\n    return v !== undefined && v !== null && v !== '';\n}\n\n/*\nfunction batchMessages(callback, callbackBusy, wait) {\n\n    let messages = [];  // batch of received messages\n    let timeout;\n\n    return function() {\n        clearTimeout(timeout);\n        let event = arguments[0];\n        messages.push(event.data);\n        // console.log('rec sysex', messages.length);\n        callbackBusy(messages.length);\n        timeout = setTimeout(() => {\n            // console.log(\"timeout elapsed\");\n            timeout = null;\n            callback(messages);\n            messages = [];\n        }, wait);\n    };\n}\n*/\n\nclass Preset extends Component {\n\n    constructor(props) {\n        super(props);\n        this.inputOpenFileRef = React.createRef();\n        this.state = {\n            output: null,       // MIDI output port used for output\n            presetIndex: null,\n            controlId: null,\n            changed: false,     // true when the control has been edited\n            updateMessages: [],\n            data: null,         // json\n            binData: null,      // binary, will be used to download as .syx file\n            // statusMessages: [],\n            // accept: '',\n            // files: [],\n            dropZoneActive: false\n        };\n    }\n\n    /**\n     * Ad-hoc method to show the busy flag and set a timeout to make sure the busy flag is hidden after a timeout.\n     */\n    showBusy = ({busy = false, busyMessage = null, bytesExpected = -1, bytesReceived = -1} = {}) =>  {\n        // console.log(\"show busy\", busyMessage);\n        setTimeout(() => this.props.onBusy({busy: false}), 20000);\n        this.props.onBusy({busy: true, busyMessage, bytesExpected, bytesReceived});\n    };\n\n/*\n    addStatusMessage = (type, message) => {\n        this.setState(\n            produce(draft => {\n                let m = { type, message };\n                let len = draft.statusMessages.push(m);\n                if (len > MAX_STATUS_MESSAGES) draft.statusMessages.shift();\n            })\n        );\n    };\n\n    addInfoMessage= message => {\n        this.addStatusMessage(\"info\", message);\n    };\n\n    addWarningMessage= message => {\n        this.addStatusMessage(\"warning\", message);\n    };\n\n    addErrorMessage= message => {\n        this.addStatusMessage(\"error\", message);\n    };\n*/\n\n    handleMidiInputEvent = batchMessages(\n        messages => {\n\n            let bytes = messages.reduce((accumulator, element) => accumulator + element.length, 0);\n\n            this.setState(\n                produce(\n                    draft => {\n\n                        draft.binData = new Uint8Array(bytes);\n                        let bin_index = 0;\n\n                        for (let m of messages) {\n\n                            draft.binData.set(m, bin_index);\n                            bin_index += m.length;\n\n                            if (isSysexData(m)) {\n                                draft.data = mergeDeep(draft.data || {}, parseSysexDump(m));\n                            } else {\n                                console.log(\"MIDI message is not a sysex message\", hs(m))\n                            }\n                        }\n\n                        // When requesting a config via MIDI (and not via a file drag&drop), we do not\n                        // update the preset and control ID from the MIDI sysex received.\n                        // This is important because to get the LED data we need to request the complete\n                        // preset data instead of just the selected control's config.\n\n                        // let pId = Object.keys(draft.data[TARGET_PRESET])[0];\n                        // draft.presetIndex = parseInt(pId, 10);\n                        // draft.controlId = parseInt(Object.keys(draft.data[TARGET_PRESET][pId][\"controls\"])[0], 10);\n                    }\n                )\n            );\n\n            // this.addInfoMessage(`${messages.length} messages received (${bytes} bytes)`);\n            this.props.onBusy({busy: false});\n        },\n        (n) => {\n            // console.log(n);\n            this.props.onBusy({busy: true, bytesReceived: n});\n        },\n        1000\n    );\n\n    /**\n     *\n     * @param files\n     * @returns {Promise<void>}\n     */\n    async readFiles(files) {\n        await Promise.all(files.map(\n            async file => {\n                if (file.size > MAX_FILE_SIZE) {\n                    console.warn(`readFiles: ${file.name}: file too big, ${file.size}`);\n                    // this.addWarningMessage(\"file too big\");\n                } else {\n                    this.showBusy({busy: true, busyMessage: \"loading file...\"});\n                    const data = new Uint8Array(await new Response(file).arrayBuffer());\n                    if (isSysexData(data)) {\n                        this.setState(\n                            produce(draft => {\n                                // draft.data = mergeDeep(draft.data || {}, parseSysexDump(data));\n                                draft.data = parseSysexDump(data);\n                                let pId = Object.keys(draft.data[TARGET_PRESET])[0];\n                                let cId = Object.keys(draft.data[TARGET_PRESET][pId][\"controls\"])[0];\n                                draft.presetIndex = parseInt(pId, 10);\n                                draft.controlId = parseInt(cId, 10);\n                            })\n                        );\n                        // this.addInfoMessage(\"sysfile decoded\");\n                    } else {\n                        // this.addWarningMessage(\"not a sysfile\");\n                        console.log(\"readFiles: not a sysfile\", hs(data.slice(0, 5)));\n                    }\n                    this.props.onBusy({busy: false});\n                    // non sysex files are ignored\n                }\n                // too big files are ignored\n            }\n        ));\n    }\n\n    onChangeFile = (e) => {\n        let file = e.target.files[0];\n        console.log(file);\n        // noinspection JSIgnoredPromiseFromCall\n        this.readFiles([file]);\n    };\n\n    onInputFile = (e) => {\n        this.inputOpenFileRef.current.click()\n    };\n\n    onDragEnter = () => {\n        this.setState({\n            dropZoneActive: true\n        });\n    };\n\n    onDragLeave= () => {\n        this.setState({\n            dropZoneActive: false\n        });\n    };\n\n    /**\n     * Drop Zone handler\n     * @param files\n     */\n    onDrop = (files) => {\n        this.setState(\n            {\n                data: null,\n                changed: false,\n                dropZoneActive: false\n            },\n            () => {     // noinspection JSIgnoredPromiseFromCall\n                this.readFiles(files)}   // returned promise from readFiles() is ignored, this is normal.\n        );\n    };\n\n    selectPreset = (index) => {\n        // if the user selects another preset or control, then clear the data in the state\n        if (!outputIsPacer(this.state.output)) return;\n        const { data } = this.state;\n        if (data && data[TARGET_PRESET] && data[TARGET_PRESET][index]) {\n            this.setState(\n                produce(draft => {\n                    draft.presetIndex = index;\n                })\n            );\n        } else {\n            this.setState(\n                produce(draft => {\n                    draft.presetIndex = index;\n                    if (index !== this.state.presetIndex) {\n                        draft.data = null;\n                        draft.changed = false;\n                    }\n                })\n            );\n            if (isVal(index)) {   // && this.state.controlId) {\n                // To get the LED data, we need to request the complete preset config instead of just the specific control's config.\n                this.readPacer(requestPreset(index), SINGLE_PRESET_EXPECTED_BYTES);\n            }\n        }\n    };\n\n    selectControl = (controlId) => {\n\n        //TODO: no need to read the preset data again. Just select the control from the data we must already have.\n\n        // console.log(`selectControl ${controlId}`);\n\n        if (isVal(this.state.presetIndex) && controlId) {\n\n            // console.log(`selectControl setState ${controlId}`);\n\n            this.setState({ controlId });\n        }\n\n        /*\n        // if the user selects another preset or control, then clear the data in the state\n        this.setState(\n            produce(draft => {\n                draft.controlId = controlId;\n                if (controlId !== this.state.controlId) {\n                    draft.data = null;\n                    draft.changed = false;\n                }\n            })\n        );\n        if (isVal(this.state.presetIndex) && controlId) {\n            // To get the LED data, we need to request the complete preset config instead of just the specific control's config.\n            this.readPacer(requestPreset(this.state.presetIndex));\n        }\n        */\n    };\n\n    /**\n     * dataIndex is only used when dataType == \"data\"\n     */\n    updateControlStep = (controlId, stepIndex, dataType, dataIndex, value) => {\n        console.log(\"Presets.updateControlStep\", controlId, stepIndex, dataType, dataIndex, value);\n        let v = parseInt(value, 10);\n        this.setState(\n            produce(draft => {\n\n                if (dataType === \"data\") {\n                    draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"steps\"][stepIndex][\"data\"][dataIndex] = v;\n                    draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"steps\"][stepIndex][\"changed\"] = true;\n                // } else {\n                //     draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"steps\"][stepIndex][dataType] = v;\n                }\n\n                if (dataType === \"msg_type\") {\n                    if (v === MSG_CTRL_OFF) {\n                        draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"steps\"][stepIndex][\"active\"] = 0;\n                    } else {\n                        draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"steps\"][stepIndex][\"active\"] = 1;\n                    }\n                    draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"steps\"][stepIndex][\"changed\"] = true;\n                }\n\n                if (dataType.startsWith(\"led_\")) {\n                    draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"steps\"][stepIndex][dataType] = v;\n                    console.log(\"updateControlStep led changed\");\n                    draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"steps\"][stepIndex][\"led_changed\"] = true;\n                }\n\n                draft.changed = true;\n\n                draft.updateMessages = this.getUpdateMessages(draft.presetIndex, controlId, draft.data);\n\n            })\n        );\n    };\n\n    /**\n     * dataIndex is only used when dataType == \"data\"\n     */\n    updateControlMode = (controlId, value) => {\n        // console.log(\"Presets.updateControlMode\", controlId, value);\n        let v = parseInt(value, 10);\n        this.setState(\n            produce(draft => {\n                draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"control_mode\"] = v;\n                draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"control_mode_changed\"] = true;\n                draft.changed = true;\n\n                draft.updateMessages = this.getUpdateMessages(draft.presetIndex, controlId, draft.data);\n            })\n        );\n    };\n\n    /**\n     *\n     * @param name\n     */\n    updatePresetName = (name) => {\n        // console.log(\"Presets.updateName\", name);\n        if (name === undefined || name === null) return;\n        if (name.length > 5) {\n            console.warn(`Presets.updateName: name too long: ${name}`);\n            return;\n        }\n        this.setState(\n            produce(draft => {\n                draft.data[TARGET_PRESET][draft.presetIndex][\"name\"] = name;    // TODO : buld update message\n                draft.data[TARGET_PRESET][draft.presetIndex][\"changed\"] = true;\n                draft.changed = true;\n\n                draft.updateMessages = this.getUpdateMessages(draft.presetIndex, draft.controlId, draft.data);\n            })\n        );\n    };\n\n    onInputConnection = (port_id) => {\n        // this.addInfoMessage(`input ${inputName(port_id)} connected`);\n    };\n\n    onInputDisconnection = (port_id) => {\n        // this.addInfoMessage(`input ${inputName(port_id)} disconnected`);\n    };\n\n    onOutputConnection = (port_id) => {\n        console.log(\"onOutputConnection\");\n        this.setState(\n            produce(draft => {\n                draft.output = port_id;\n            })\n        );\n        // this.addInfoMessage(`output ${outputName(port_id)} connected`);\n    };\n\n    onOutputDisconnection = (port_id) => {\n        console.log(\"onOutputDisconnection\");\n        this.setState(\n            produce(draft => {\n                draft.output = null;        // we manage only one output connection at a time\n            })\n        );\n        // this.addInfoMessage(`output ${outputName(port_id)} disconnected`);\n    };\n\n    sendSysex = msg => {\n        console.log(\"sendSysex\", hs(msg));\n        if (!this.state.output) {\n            console.warn(\"no output enabled to send the message\");\n            return;\n        }\n        let out = outputById(this.state.output);\n        if (!out) {\n            console.warn(`send: output ${this.state.output} not found`);\n            return;\n        }\n        out.sendSysex(SYSEX_SIGNATURE, msg);\n    };\n\n    readPacer = (msg, bytesExpected, busyMessage = \"reading Pacer...\") => {\n        console.log(`readPacer, ${bytesExpected} bytes expected`);\n        this.showBusy({busy: true, busyMessage: busyMessage, bytesReceived: 0, bytesExpected});\n        this.sendSysex(msg);\n    };\n\n    updatePacer = (messages) => {\n        console.log(\"updatePacer\");\n        this.showBusy({busy: true, busyMessage: \"write Preset...\"});\n        for (let m of messages) {\n            this.sendSysex(m);\n        }\n        setTimeout(() => {\n            console.log(\"updatePacer: clear changed flag and updateMessages array\");\n            this.setState({changed: false, updateMessages: []});\n            this.readPacer(requestPreset(this.state.presetIndex), SINGLE_PRESET_EXPECTED_BYTES, \"read updated preset\");\n        }, 1000);\n    };\n\n    getUpdateMessages = (presetIndex, controlId, data) => {\n\n        console.log(\"getUpdateMessages\");\n\n        // const { presetIndex, controlId, data } = this.state;\n\n        // let updateMessages = [];\n        // if (showEditor) {\n            let updateMessages = getControlUpdateSysexMessages(presetIndex, controlId, data);\n            console.log(\"updateMessages\", updateMessages);\n\n            let n = buildPresetNameSysex(presetIndex, data);\n            if (n) {\n                updateMessages.push(n);\n            }\n\n        // }\n        return updateMessages;\n    };\n\n    render() {\n\n        const { output, presetIndex, controlId, data, changed, updateMessages, dropZoneActive } = this.state;\n\n        let showEditor = false;\n\n        if (data) {\n\n            // showEditor = true;\n\n/*\n            if (!(TARGET_PRESET in data)) {\n                console.log(`Presets: invalid data`, data);\n                showEditor = false;\n            }\n\n            if (showEditor && !(presetIndex in data[TARGET_PRESET])) {\n                // console.log(`Presets: preset ${presetIndex} not found in data`);\n                showEditor = false;\n            }\n\n            if (showEditor && !(\"controls\" in data[TARGET_PRESET][presetIndex])) {\n                // console.log(`Presets: controls not found in data`);\n                showEditor = false;\n            }\n\n            if (showEditor && !(controlId in data[TARGET_PRESET][presetIndex][\"controls\"])) {\n                // console.log(`Presets: control ${controlId} not found in data`);\n                showEditor = false;\n            }\n\n            if (showEditor && !(\"steps\" in data[TARGET_PRESET][presetIndex][\"controls\"][controlId])) {\n                // console.log(`Presets: steps not found in data`);\n                showEditor = false;\n            }\n*/\n\n            showEditor = (TARGET_PRESET in data) &&\n                         (presetIndex in data[TARGET_PRESET]) &&\n                         (\"controls\" in data[TARGET_PRESET][presetIndex]) &&\n                         (controlId in data[TARGET_PRESET][presetIndex][\"controls\"]) &&\n                         (\"steps\" in data[TARGET_PRESET][presetIndex][\"controls\"][controlId]) &&\n                         (Object.keys(data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"steps\"]).length === 6);\n        }\n\n        // showEditor = showEditor && (Object.keys(data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"steps\"]).length === 6);\n\n/*\n        const overlayStyle = {\n            position: 'absolute',\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0,\n            paddingTop: '4rem',\n            background: 'rgba(0,0,0,0.4)',\n            textAlign: 'center',\n            color: '#fff',\n            fontSize: '4rem'\n        };\n*/\n\n        return (\n\n            <Dropzone\n                disableClick\n                style={{position: \"relative\"}}\n                // accept={accept}\n                onDrop={this.onDrop}\n                onDragEnter={this.onDragEnter}\n                onDragLeave={this.onDragLeave}\n            >\n\n                {dropZoneActive &&\n                <div style={dropOverlayStyle}>\n                    Drop sysex file...\n                </div>}\n\n                <div className=\"wrapper\">\n\n                    <div className=\"subheader\">\n                        <Midi only={ANY_MIDI_PORT} autoConnect={PACER_MIDI_PORT_NAME}\n                              portsRenderer={(groupedPorts, clickHandler) => <PortsGrid groupedPorts={groupedPorts} clickHandler={clickHandler} />}\n                              onMidiInputEvent={this.handleMidiInputEvent}\n                              onInputConnection={this.onInputConnection}\n                              onInputDisconnection={this.onInputDisconnection}\n                              onOutputConnection={this.onOutputConnection}\n                              onOutputDisconnection={this.onOutputDisconnection}\n                              className=\"\" >\n                            <div className=\"no-midi\">Please connect your Pacer to your computer.</div>\n                        </Midi>\n                    </div>\n\n                    <div className=\"content\">\n\n                        <div className=\"instructions\">\n                            You can click on a preset to only load this specific preset from the Pacer. <br />\n                            Or you can use the ad-hoc button to read ALL the presets from the Pacer. <br />\n                            You can also load a patch file or send a dump from the Pacer.\n                        </div>\n\n                        <div className=\"content-row-content first\">\n                            <h2>Preset:</h2>\n                            <div className=\"selectors\">\n                                <PresetSelector data={data} currentPreset={presetIndex} onClick={this.selectPreset} />\n                                <div className=\"preset-buttons\">\n                                    {output && <button className=\"space-right\" onClick={() => this.readPacer(requestAllPresets(), ALL_PRESETS_EXPECTED_BYTES)}>Read all presets from Pacer</button>}\n                                    <input ref={this.inputOpenFileRef} type=\"file\" style={{display:\"none\"}}  onChange={this.onChangeFile} />\n                                    <button onClick={this.onInputFile}>Load preset(s) from file</button>\n                                    {/* data &&\n                                    <Download data={this.state.binData} filename={`pacer-preset-${presetIndexToXY(presetIndex)}`} addTimestamp={true}\n                                              label=\"Download preset\" />\n                                    */}\n                                </div>\n                            </div>\n                            {data && data[TARGET_PRESET][presetIndex] && <PresetNameEditor name={data[TARGET_PRESET][presetIndex][\"name\"]} onUpdate={(name) => this.updatePresetName(name)} />}\n                        </div>\n\n\n                        <div className=\"content-row-content\">\n                            <Fragment>\n                                {/*<h2>{CONTROLS_FULLNAME[controlId]}:</h2>*/}\n                                <h2>Controls</h2>\n                                {isVal(presetIndex) && <ControlSelector currentControl={controlId} onClick={this.selectControl} />}\n                                {showEditor &&\n                                <Fragment>\n                                    <ControlStepsEditor\n                                        controlId={controlId}\n                                        steps={data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"steps\"]}\n                                        onUpdate={(stepIndex, dataType, dataIndex, value) => this.updateControlStep(controlId, stepIndex, dataType, dataIndex, value)}/>\n                                    <ControlModeEditor\n                                        controlId={controlId}\n                                        mode={data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"control_mode\"]}\n                                        onUpdate={(value) => this.updateControlMode(controlId, value)}/>\n                                </Fragment>\n                                }\n                            </Fragment>\n                        </div>\n\n                        {changed && outputIsPacer(output) &&\n                        <div className=\"content-row-content\">\n                            <Fragment>\n                                <h2>Send the updated config to the Pacer:</h2>\n                                <div className=\"actions\">\n                                    <button className=\"update\" onClick={() => this.updatePacer(updateMessages)}>Update Pacer</button>\n                                </div>\n                            </Fragment>\n                        </div>\n                        }\n\n                        {this.props.debug && changed &&\n                        <div className=\"content-row-content\">\n                            <div className=\"debug\">\n                                <h4>[Debug] Update messages to send:</h4>\n                                <div className=\"message-to-send\">\n                                    {updateMessages.map((m, i) =>  <div key={i} className=\"code\">{hs(m)}</div>)}\n                                </div>\n                            </div>\n                        </div>\n                        }\n\n                    </div>\n\n                </div>\n\n            </Dropzone>\n\n        );\n    }\n\n}\n\nexport default Preset;\n","import React, {Component} from 'react';\nimport Midi from \"../components/Midi\";\nimport {produce} from \"immer\";\nimport parseMidi from 'parse-midi';\nimport {hs} from \"../utils/hexstring\";\nimport {CONTROLER, MESSAGE} from \"../utils/midi\";\nimport * as Note from \"tonal-note\";\nimport \"./Monitor.css\";\nimport PortsGrid from \"../components/PortsGrid\";\nimport {ANY_MIDI_PORT} from \"../pacer/constants\";\n\nconst MAX_MESSAGES = 40;\n\nclass Monitor extends Component {\n\n    state = {\n        messages: []\n    };\n\n    handleMidiInputEvent = (event) => {\n        // if (event instanceof MIDIMessageEvent) {\n        this.setState(\n            produce(draft => {\n                let len = draft.messages.unshift(event.data);\n                if (len > MAX_MESSAGES) draft.messages.pop();\n            })\n        )\n        // }\n    };\n\n    render() {\n\n        return (\n\n            <div className=\"wrapper\">\n\n                <div className=\"subheader\">\n                    <Midi only={ANY_MIDI_PORT} autoConnect={ANY_MIDI_PORT}\n                          portsRenderer={(groupedPorts, clickHandler) => <PortsGrid groupedPorts={groupedPorts} clickHandler={clickHandler} />}\n                        // inputRenderer={this.renderPort} outputRenderer={this.renderPort}\n                          onMidiInputEvent={this.handleMidiInputEvent}>\n                        <div className=\"no-midi\">Please connect your Pacer or any other MIDI device to your computer.</div>\n                    </Midi>\n                </div>\n\n                <div className=\"content\">\n                    <div>\n\n                        <div className=\"instructions\">\n                            The messages are displayed in reverse chronological order (the most recent on top). Only the last 40 messages are displayed.\n                        </div>\n\n                        <div className=\"content-row-content first\">\n                            <h2>MIDI messages</h2>\n                            <div className=\"content-row-content-content\">\n                                <div className=\"messages\">\n                                    {this.state.messages.map((msg, i) => {      //TODO: display timestamp\n                                        let m = parseMidi(msg);\n                                        let info2 = '';\n                                        let info3 = '';\n                                        switch (m.messageCode) {\n                                            case 0x80:      // {messageCode: 144, channel: 1, messageType: \"noteon\", key: 70, velocity: 21}\n                                            case 0x90:\n                                                info2 = Note.fromMidi(m.key);\n                                                info3 = `velocity: ${m.velocity}`;\n                                                break;\n                                            case 0xA0:  // \"AfterTouch\",\n                                                break;\n                                            case 0xB0:\n                                                info2 = CONTROLER[m.controlNumber];\n                                                info3 = m.controlValue;\n                                                break;\n                                            case 0xC0:          // {messageCode: 192, channel: 4, messageType: \"programchange\", program: 102} \"C0\"\n                                                info2 = `program: ${m.program}`;\n                                                info3 = '';\n                                                break;\n                                            case 0xD0:  // \"Channel Pressure\\\",\\n\"\n                                                break;\n                                            case 0xE0:          // {messageCode: 224, channel: 1, messageType: \"pitchbendchange\", pitchBend: 8283, pitchBendMultiplier: 0.011109754608716884}\n                                                info2 = `bend: ${m.pitchBend}`;\n                                                info3 = `multiplier: ${m.pitchBendMultiplier}`;\n                                                break;\n                                            default:\n                                                break;\n                                        }\n                                        return (\n                                            <div>\n                                                <span className=\"code\">[{hs(msg)}]</span>\n                                                <span className=\"msg-channel\">Channel {m.channel}</span>\n                                                <span className=\"msg-name\">{MESSAGE[m.messageCode]}</span>\n                                                <span className=\"msg-data\">{info2}</span>\n                                                <span className=\"msg-data\">{info3}</span>\n                                            </div>\n                                        );\n                                    })}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default Monitor;\n","import React from 'react';\nimport \"./Footer.css\";\n\nconst Footer = () => {\n    return (\n        <div className=\"footer\">\n            <div className=\"gh\">\n                <a href=\"https://github.com/francoisgeorgy/pacer-editor\" target=\"_blank\" rel=\"noopener noreferrer\">Source code available on GitHub</a>\n{/*\n                <a aria-label=\"Homepage\" title=\"project on github\" href=\"https://github.com/francoisgeorgy/pacer-editor\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    <svg height=\"24\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"24\" aria-hidden=\"true\">\n                        <path fillRule=\"evenodd\" d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z\"></path>\n                    </svg>\n                </a>\n*/}\n            </div>\n            <div>\n                {/*<p>“Nektar Technology”, the logo and all other Nektar Technology product, technology or service names and*/}\n                    {/*logos are trademarks or registered trademarks of Nektar Technology, Inc.</p>*/}\n                <p>This web site is not endorsed by, directly affiliated with, maintained, or sponsored by Nektar Technology.\n                    This web site is published under <a href=\"https://www.gnu.org/licenses/gpl-3.0.en.html\" target=\"_blank\" rel=\"noopener noreferrer\">GNU General Public License v3</a>.\n                </p>\n            </div>\n        </div>\n    );\n};\n\nexport default Footer;\n","import React, {Component} from 'react';\n\nclass Global extends Component {\n\n    render() {\n\n        return (\n            <div className=\"content\">\n\n                <div className=\"doc\" style={{marginTop: '16px'}}>\n                    Sorry, this feature is not implemented yet.\n                </div>\n\n            </div>\n        );\n    }\n\n}\n\nexport default Global;\n","import React, {Component} from 'react';\nimport Dropzone from \"react-dropzone\";\nimport {produce} from \"immer\";\nimport {isSysexData, mergeDeep, parseSysexDump} from \"../pacer/sysex\";\nimport DumpSysex from \"../components/DumpSysex\";\nimport './DumpDecoder.css';\nimport {hs} from \"../utils/hexstring\";\nimport Midi from \"../components/Midi\";\nimport {ANY_MIDI_PORT, PACER_MIDI_PORT_NAME} from \"../pacer/constants\";\nimport PortsGrid from \"../components/PortsGrid\";\n\nconst MAX_FILE_SIZE = 5 * 1024*1024;\n\nclass DumpDecoder extends Component {\n\n    state = {\n        data: null\n    };\n\n    /**\n     * Ad-hoc method to show the busy flag and set a timeout to make sure the busy flag is hidden after a timeout.\n     */\n    showBusy = ({busy = false, busyMessage = null, bytesExpected = -1, bytesReceived = -1} = {}) =>  {\n        // console.log(\"show busy\", busyMessage);\n        setTimeout(() => this.props.onBusy({busy: false}), 20000);\n        this.props.onBusy({busy: true, busyMessage, bytesExpected, bytesReceived});\n    };\n\n    /**\n     *\n     * @param files\n     * @returns {Promise<void>}\n     */\n    async readFiles(files) {\n        await Promise.all(files.map(\n            async file => {\n                if (file.size > MAX_FILE_SIZE) {\n                    console.warn(`${file.name}: file too big, ${file.size}`);\n                } else {\n                    this.showBusy({busy: true, busyMessage: \"loading file...\"});\n                    const data = new Uint8Array(await new Response(file).arrayBuffer());\n                    if (isSysexData(data)) {\n                        this.setState(\n                            produce(draft => {\n                                draft.data = mergeDeep(draft.data || {}, parseSysexDump(data));\n                                this.props.onBusy(false);\n                            })\n                        );\n                        // this.addInfoMessage(\"sysfile decoded\");\n                    } else {\n                        console.log(\"readFiles: not a sysfile\", hs(data.slice(0, 5)));\n                    }\n                    this.props.onBusy({busy: false});\n                    // non sysex files are ignored\n                }\n                // too big files are ignored\n            }\n        ));\n    }\n\n    onDragEnter = () => {\n        this.setState({\n            dropZoneActive: true\n        });\n    };\n\n    onDragLeave= () => {\n        this.setState({\n            dropZoneActive: false\n        });\n    };\n\n    /**\n     * Drop Zone handler\n     * @param files\n     */\n    onDrop = (files) => {\n        // console.log('drop', files);\n        this.setState(\n        {\n                data: null,\n                dropZoneActive: false\n            },\n    () => {this.readFiles(files)});\n    };\n\n    handleMidiInputEvent = (event) => {\n        // console.log(\"DumpDecoder.handleMidiInputEvent\", event, event.data);\n        // if (event instanceof MIDIMessageEvent) {\n        if (isSysexData(event.data)) {\n            // console.log(\"DumpDecoder.handleMidiInputEvent: data is SysEx\");\n            this.setState(\n                produce(draft => {\n                    draft.data = mergeDeep(draft.data || {}, parseSysexDump(event.data));\n                    // this.props.onBusy(false);\n                })\n            )\n        } else {\n            console.log(\"MIDI message is not a sysex message\")\n        }\n        // }\n    };\n\n\n    /**\n     * @returns {*}\n     */\n    render() {\n\n        const { data, dropZoneActive } = this.state;\n\n        const overlayStyle = {\n            position: 'absolute',\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0,\n            paddingTop: '1rem',\n            background: 'rgba(0,0,0,0.4)',\n            textAlign: 'center',\n            color: '#fff',\n            fontSize: '4rem'\n        };\n\n        return (\n\n            <Dropzone\n                disableClick\n                style={{position: \"relative\"}}\n                // accept={accept}\n                onDrop={this.onDrop}\n                onDragEnter={this.onDragEnter}\n                onDragLeave={this.onDragLeave}>\n\n                {dropZoneActive &&\n                <div style={overlayStyle}>\n                    Drop sysex file...\n                </div>}\n\n                <div className=\"wrapper\">\n\n                    <div className=\"subheader\">\n                        <Midi only={ANY_MIDI_PORT} autoConnect={PACER_MIDI_PORT_NAME}\n                              portsRenderer={(groupedPorts, clickHandler) => <PortsGrid groupedPorts={groupedPorts} clickHandler={clickHandler} />}\n                              onMidiInputEvent={this.handleMidiInputEvent}\n                              className=\"\" >\n                            <div className=\"no-midi\">Please connect your Pacer to your computer.</div>\n                        </Midi>\n                    </div>\n\n                    <div className=\"content\">\n                        <div className=\"instructions\">\n                            Send a dump from your Pacer or<br />drag & drop a patch file here.\n                        </div>\n                        <div className=\"content-row-content first\">\n                            <DumpSysex data={data} />\n                        </div>\n                    </div>\n\n{/*\n                <div className=\"right-column\">\n                    <Dropzone onDrop={this.onDrop} className=\"drop-zone\">\n                        Drop a binary sysex file here<br />or click to open the file dialog\n                    </Dropzone>\n                    <h3>Log:</h3>\n                    <Status messages={this.state.statusMessages} />\n                </div>\n*/}\n\n                </div>\n\n            </Dropzone>\n\n        );\n    }\n}\n\nexport default DumpDecoder;\n","import React, {Component, Fragment} from 'react';\nimport {\n    MSG_CTRL_OFF,\n    MSG_SW_NOTE,\n    MSG_TYPES_FULLNAME_MIDI_SORTED,\n    MSG_TYPES_DATA_HELP\n} from \"../pacer/constants\";\nimport * as Note from \"tonal-note\";\nimport \"./MidiSettingsEditor.css\";\n\nconst MidiNote = ({ note, onChange }) => {\n    return (\n        <select onChange={(event) => onChange(event.target.value)} value={note}>\n            {\n                Array.from(Array(127).keys()).map(\n                    i => {\n                        let n = Note.fromMidi(i, true);\n                        return <option key={i} value={i}>{n}</option>\n                    })\n            }\n        </select>\n    );\n};\n\nconst Setting = ({ index, config, updateCallback }) => {\n\n    let inactive = config.msg_type === MSG_CTRL_OFF;\n\n    if (inactive) {\n        return (\n            <Fragment>\n                <div className=\"setting-row-header\">setting {index}:</div>\n                <div>\n                    <select onChange={(event) => updateCallback(\"msg_type\", null, event.target.value)} value={config.msg_type}>\n                        {\n                            // Object.keys(MSG_TYPES_FULLNAME_SW).map(\n                            //     key => {\n                            //         return <option key={key} value={key}>{MSG_TYPES_FULLNAME_SW[key]}</option>\n                            //     })\n                            MSG_TYPES_FULLNAME_MIDI_SORTED.map(\n                                v => {\n                                    return <option key={v.key} value={v.key}>{v.value}</option>\n                            })\n                        }\n                    </select>\n                </div>\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n            </Fragment>\n        );\n    }\n\n    let d0, d1, d2;\n    if (config.msg_type === MSG_SW_NOTE) {\n        d0 = <MidiNote note={config.data[0]} onChange={(value) => updateCallback(\"data\", 0, value)} />;\n        d1 = <input type=\"text\" value={config.data[1]} onChange={(event) => updateCallback(\"data\", 1, event.target.value)} />;\n        d2 = '';\n    } else {\n        d0 = <input type=\"text\" value={config.data[0]} onChange={(event) => updateCallback(\"data\", 0, event.target.value)} />;\n        d1 = <input type=\"text\" value={config.data[1]} onChange={(event) => updateCallback(\"data\", 1, event.target.value)} />;\n        d2 = <input type=\"text\" value={config.data[2]} onChange={(event) => updateCallback(\"data\", 2, event.target.value)} />;\n    }\n\n    return (\n        <Fragment>\n            <div className=\"setting-row-header\">Setting {index}:</div>\n            <div>\n                <select onChange={(event) => updateCallback(\"msg_type\", null, event.target.value)} value={config.msg_type}>\n                {\n                    MSG_TYPES_FULLNAME_MIDI_SORTED.map(\n                        v => {\n                            return <option key={v.key} value={v.key}>{v.value}</option>\n                        })\n                }\n                </select>\n            </div>\n            <div>{d0}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][0]}</div></div>\n            <div>{d1}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][1]}</div></div>\n            <div>{d2}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][2]}</div></div>\n            <div>\n                <select onChange={(event) => updateCallback(\"channel\", null, event.target.value)} value={config.channel}>\n                    {\n                        Array.from(Array(16).keys()).map(i => <option key={i} value={i}>{i}</option>)\n                    }\n                </select>\n            </div>\n        </Fragment>\n    );\n};\n\nclass MidiSettingsEditor extends Component {\n\n    onSettingUpdate = (settingIndex, dataType, dataIndex, value) => {\n        this.props.onUpdate(settingIndex, dataType, dataIndex, value);\n    };\n\n    render() {\n\n        const settings = this.props.settings;\n\n        return (\n            <div className=\"settings\">\n                <div></div>\n                <div className=\"setting-col-header\">Type</div>\n                <div className=\"setting-col-header\">Data 1</div>\n                <div className=\"setting-col-header\">Data 2</div>\n                <div className=\"setting-col-header\">Data 3</div>\n                <div className=\"setting-col-header\">MIDI Ch.</div>\n                {Object.keys(settings).map(i =>\n                    <Setting key={i} index={i} config={settings[i]} updateCallback={(dataType, dataIndex, value) => this.onSettingUpdate(i, dataType, dataIndex, value)} />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default MidiSettingsEditor;\n","import React, {Component, Fragment} from 'react';\nimport PresetSelector from \"../components/PresetSelector\";\nimport {\n    ALL_PRESETS_EXPECTED_BYTES,\n    buildPresetNameSysex,\n    getMidiSettingUpdateSysexMessages,\n    isSysexData,\n    mergeDeep,\n    parseSysexDump, requestAllPresets, requestPreset, SINGLE_PRESET_EXPECTED_BYTES\n} from \"../pacer/sysex\";\nimport Midi from \"../components/Midi\";\nimport Dropzone from \"react-dropzone\";\nimport \"./Preset.css\";\nimport {produce} from \"immer\";\nimport {\n    ANY_MIDI_PORT,\n    MSG_CTRL_OFF,\n    PACER_MIDI_PORT_NAME,\n    SYSEX_SIGNATURE,\n    TARGET_PRESET\n} from \"../pacer/constants\";\nimport {hs} from \"../utils/hexstring\";\nimport MidiSettingsEditor from \"../components/MidiSettingsEditor\";\nimport {outputById} from \"../utils/ports\";\nimport PresetNameEditor from \"../components/PresetNameEditor\";\nimport PortsGrid from \"../components/PortsGrid\";\nimport {batchMessages, outputIsPacer} from \"../utils/midi\";\nimport {dropOverlayStyle, MAX_FILE_SIZE} from \"../utils/misc\";\n\n// const MAX_FILE_SIZE = 5 * 1024*1024;\n\n// const MAX_STATUS_MESSAGES = 40;\n\nfunction isVal(v) {\n    return v !== undefined && v !== null && v !== '';\n}\n\n/*\nfunction batchMessages(callback, callbackBusy, wait) {\n\n    let messages = [];  // batch of received messages\n    let timeout;\n\n    return function() {\n        clearTimeout(timeout);\n        let event = arguments[0];\n        messages.push(event.data);\n        // console.log('rec sysex', messages.length);\n        callbackBusy(messages.length);\n        timeout = setTimeout(() => {\n            // console.log(\"timeout elapsed\");\n            timeout = null;\n            callback(messages);\n            messages = [];\n        }, wait);\n    };\n}\n*/\n\nclass PresetMidi extends Component {\n\n    state = {\n        output: null,       // MIDI output port used for output\n        presetIndex: null,  //\n        changed: false,     // true when the control has been edited\n        data: null          // ,\n        // statusMessages: []\n    };\n\n    /**\n     * Ad-hoc method to show the busy flag and set a timeout to make sure the busy flag is hidden after a timeout.\n     */\n    showBusy = ({busy = false, busyMessage = null, bytesExpected = -1, bytesReceived = -1} = {}) =>  {\n        // console.log(\"show busy\", busyMessage);\n        setTimeout(() => this.props.onBusy({busy: false}), 20000);\n        this.props.onBusy({busy: true, busyMessage, bytesExpected, bytesReceived});\n    };\n\n/*\n    addStatusMessage = (type, message) => {\n        this.setState(\n            produce(draft => {\n                let m = { type, message };\n                let len = draft.statusMessages.push(m);\n                if (len > MAX_STATUS_MESSAGES) draft.statusMessages.shift();\n            })\n        );\n    };\n\n    addInfoMessage = message => {\n        this.addStatusMessage(\"info\", message);\n    };\n\n    addWarningMessage = message => {\n        this.addStatusMessage(\"warning\", message);\n    };\n\n    addErrorMessage = message => {\n        this.addStatusMessage(\"error\", message);\n    };\n*/\n\n    handleMidiInputEvent = batchMessages(\n        messages => {\n            this.setState(\n                produce(\n                    draft => {\n                        for (let m of messages) {\n                            if (isSysexData(m)) {\n                                draft.data = mergeDeep(draft.data || {}, parseSysexDump(m));\n                            } else {\n                                console.log(\"MIDI message is not a sysex message\")\n                            }\n                        }\n                        let pId = Object.keys(draft.data[TARGET_PRESET])[0];\n                        draft.presetIndex = parseInt(pId, 10);\n                    }\n                )\n            );\n            // let bytes = messages.reduce((accumulator, element) => accumulator + element.length, 0);\n            // this.addInfoMessage(`${messages.length} messages received (${bytes} bytes)`);\n            this.props.onBusy({busy: false});\n        },\n        (n) => {\n            // console.log(n);\n            this.props.onBusy({busy: true, bytesReceived: n});\n        },\n        1000\n    );\n\n    /**\n     *\n     * @param files\n     * @returns {Promise<void>}\n     */\n    async readFiles(files) {\n        await Promise.all(files.map(\n            async file => {\n                if (file.size > MAX_FILE_SIZE) {\n                    console.warn(`readFiles: ${file.name}: file too big, ${file.size}`);\n                    // this.addWarningMessage(\"file too big\");\n                } else {\n                    this.showBusy({busy: true, busyMessage: \"loading file...\"});\n                    const data = new Uint8Array(await new Response(file).arrayBuffer());\n                    if (isSysexData(data)) {\n                        this.setState(\n                            produce(draft => {\n                                // draft.data = mergeDeep(draft.data || {}, parseSysexDump(data));\n                                draft.data = parseSysexDump(data);\n                                let pId = Object.keys(draft.data[TARGET_PRESET])[0];\n                                draft.presetIndex = parseInt(pId, 10);\n                            })\n                        );\n                        // this.addInfoMessage(\"sysfile decoded\");\n                    } else {\n                        // this.addWarningMessage(\"not a sysfile\");\n                        console.log(\"readFiles: not a sysfile\", hs(data.slice(0, 5)));\n                    }\n                    this.props.onBusy({busy: false});\n                    // non sysex files are ignored\n                }\n                // too big files are ignored\n            }\n        ));\n    }\n\n    onChangeFile = (e) => {\n        console.log(\"onChangeFile\", e);\n        var file = e.target.files[0];\n        console.log(file);\n        this.readFiles([file]);\n    };\n\n    onInputFile = (e) => {\n        console.log(\"onInputFile\", e);\n        this.inputOpenFileRef.current.click()\n    };\n\n    onDragEnter = () => {\n        this.setState({\n            dropZoneActive: true\n        });\n    };\n\n    onDragLeave= () => {\n        this.setState({\n            dropZoneActive: false\n        });\n    };\n\n    /**\n     * Drop Zone handler\n     * @param files\n     */\n    onDrop = (files) => {\n        this.setState(\n            {\n                data: null,\n                changed: false,\n                dropZoneActive: false\n            },\n            () => {this.readFiles(files)}   // returned promise from readFiles() is ignored, this is normal.\n        );\n    };\n\n    selectPreset = (index) => {\n        if (!outputIsPacer(this.state.output)) return;\n        // if the user selects another preset or control, then clear the data in the state\n        const { data } = this.state;\n        if (data && data[TARGET_PRESET] && data[TARGET_PRESET][index]) {\n            this.setState(\n                produce(draft => {\n                    draft.presetIndex = index;\n                })\n            );\n        } else {\n            this.setState(\n                produce(draft => {\n                    draft.presetIndex = index;\n                    if (index !== this.state.presetIndex) {\n                        draft.data = null;\n                        draft.changed = false;\n                    }\n                })\n            );\n            if (isVal(index)) {   // && this.state.controlId) {\n                // To get the LED data, we need to request the complete preset config instead of just the specific control's config.\n                this.readPacer(requestPreset(index), SINGLE_PRESET_EXPECTED_BYTES);\n            }\n        }\n    };\n\n    /**\n     * dataIndex is only used when dataType == \"data\"\n     */\n    updateMidiSettings = (settingIndex, dataType, dataIndex, value) => {\n        // console.log(\"PresetMidi.updateMidiSettings\", settingIndex, dataIndex, value);\n        let v = parseInt(value, 10);\n        this.setState(\n            produce(draft => {\n                if (dataType === \"data\") {\n                    draft.data[TARGET_PRESET][draft.presetIndex][\"midi\"][settingIndex][\"data\"][dataIndex] = v;\n                } else {\n                    draft.data[TARGET_PRESET][draft.presetIndex][\"midi\"][settingIndex][dataType] = v;\n                }\n                if (dataType === \"msg_type\") {\n                    if (v === MSG_CTRL_OFF) {\n                        draft.data[TARGET_PRESET][draft.presetIndex][\"midi\"][settingIndex][\"active\"] = 0;\n                    } else {\n                        draft.data[TARGET_PRESET][draft.presetIndex][\"midi\"][settingIndex][\"active\"] = 1;\n                    }\n                }\n                draft.data[TARGET_PRESET][draft.presetIndex][\"midi\"][settingIndex][\"changed\"] = true;\n                draft.changed = true;\n            })\n        );\n    };\n\n    updatePresetName = (name) => {\n        // console.log(\"PresetMidi.updateName\", name);\n        if (name === undefined || name === null) return;\n        if (name.length > 5) {\n            console.warn(`PresetMidi.updateName: name too long: ${name}`);\n            return;\n        }\n        this.setState(\n            produce(draft => {\n                draft.data[TARGET_PRESET][draft.presetIndex][\"name\"] = name;    // TODO : buld update message\n                draft.data[TARGET_PRESET][draft.presetIndex][\"changed\"] = true;\n                draft.changed = true;\n            })\n        );\n    };\n\n    onInputConnection = (port_id) => {\n        // this.addInfoMessage(`input ${inputName(port_id)} connected`);\n    };\n\n    onInputDisconnection = (port_id) => {\n        // this.addInfoMessage(`input ${inputName(port_id)} disconnected`);\n    };\n\n    onOutputConnection = (port_id) => {\n        console.log(\"onOutputConnection\");\n        this.setState(\n            produce(draft => {\n                draft.output = port_id;\n            })\n        );\n        // this.addInfoMessage(`output ${outputName(port_id)} connected`);\n    };\n\n    onOutputDisconnection = (port_id) => {\n        console.log(\"onOutputDisconnection\");\n        this.setState(\n            produce(draft => {\n                draft.output = null;        // we manage only one output connection at a time\n            })\n        );\n        // this.addInfoMessage(`output ${outputName(port_id)} disconnected`);\n    };\n\n    sendSysex = msg => {\n        // console.log(\"sendSysex\", hs(msg));\n        if (!this.state.output) {\n            console.warn(\"no output enabled to send the message\");\n            return;\n        }\n        let out = outputById(this.state.output);\n        if (!out) {\n            console.warn(`send: output ${this.state.output} not found`);\n            return;\n        }\n        out.sendSysex(SYSEX_SIGNATURE, msg);\n    };\n\n    readPacer = (msg, bytesExpected) => {\n        this.showBusy({busy: true, busyMessage: \"receiving data...\", bytesReceived: 0, bytesExpected});\n        this.sendSysex(msg);\n    };\n\n    updatePacer = (messages) => {\n        this.showBusy({busy: true, busyMessage: \"sending data...\"});\n        for (let m of messages) {\n            this.sendSysex(m);\n        }\n        setTimeout(() => {\n            this.readPacer(requestPreset(this.state.presetIndex), SINGLE_PRESET_EXPECTED_BYTES);\n        }, 1000);\n    };\n\n    render() {\n\n        const { output, presetIndex, data, changed, dropZoneActive } = this.state;\n\n        let showEditor = false;\n\n        if (data) {\n\n            // showEditor = true;\n            //\n            // if (!(TARGET_PRESET in data)) {\n            //     console.log(`PresetMidi: invalid data`, data);\n            //     showEditor = false;\n            // }\n            //\n            // if (showEditor && !(presetIndex in data[TARGET_PRESET])) {\n            //     // console.log(`PresetMid: preset ${presetIndex} not found in data`);\n            //     showEditor = false;\n            // }\n            //\n            // if (showEditor && !(\"midi\" in data[TARGET_PRESET][presetIndex])) {\n            //     // console.log(`PresetMidi: midi not found in data`);\n            //     showEditor = false;\n            // }\n\n            showEditor = (TARGET_PRESET in data) &&\n                         (presetIndex in data[TARGET_PRESET]) &&\n                         (\"midi\" in data[TARGET_PRESET][presetIndex]) &&\n                         (Object.keys(data[TARGET_PRESET][presetIndex][\"midi\"]).length === 16)\n        }\n\n        // showEditor = showEditor && (Object.keys(data[TARGET_PRESET][presetIndex][\"midi\"]).length === 16);\n\n        let updateMessages = [];\n        if (showEditor) {\n            updateMessages = getMidiSettingUpdateSysexMessages(presetIndex, data);\n            let n = buildPresetNameSysex(presetIndex, data);\n            if (n) {\n                updateMessages.push(n);\n            }\n        }\n\n/*\n        const overlayStyle = {\n            position: 'absolute',\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0,\n            paddingTop: '4rem',\n            background: 'rgba(0,0,0,0.4)',\n            textAlign: 'center',\n            color: '#fff',\n            fontSize: '4rem'\n        };\n*/\n\n        return (\n\n            <Dropzone\n                disableClick\n                style={{position: \"relative\"}}\n                // accept={accept}\n                onDrop={this.onDrop}\n                onDragEnter={this.onDragEnter}\n                onDragLeave={this.onDragLeave}\n            >\n\n            {dropZoneActive &&\n            <div style={dropOverlayStyle}>\n                Drop sysex file...\n            </div>}\n\n            <div className=\"wrapper\">\n\n                <div className=\"subheader\">\n                    <Midi only={ANY_MIDI_PORT} autoConnect={PACER_MIDI_PORT_NAME}\n                          portsRenderer={(groupedPorts, clickHandler) => <PortsGrid groupedPorts={groupedPorts} clickHandler={clickHandler} />}\n                          onMidiInputEvent={this.handleMidiInputEvent}\n                          onInputConnection={this.onInputConnection}\n                          onInputDisconnection={this.onInputDisconnection}\n                          onOutputConnection={this.onOutputConnection}\n                          onOutputDisconnection={this.onOutputDisconnection}\n                          className=\"\" >\n                        <div className=\"no-midi\">Please connect your Pacer to your computer.</div>\n                    </Midi>\n                </div>\n\n                <div className=\"content\">\n\n                    <div className=\"instructions\">\n                        You can click on a preset to only load this specific preset from the Pacer. <br />\n                        Or you can use the ad-hoc button to read ALL the presets from the Pacer. <br />\n                        You can also load a patch file or send a dump from the Pacer.\n                    </div>\n\n                    <div className=\"content-row-content first\">\n                        <h2>Preset:</h2>\n                        <div className=\"selectors\">\n                            <PresetSelector data={data} currentPreset={presetIndex} onClick={this.selectPreset} />\n                            <div className=\"preset-buttons\">\n                                    {output && <button className=\"space-right\" onClick={() => this.readPacer(requestAllPresets(), ALL_PRESETS_EXPECTED_BYTES)}>Read all presets from Pacer</button>}\n                                <input ref={this.inputOpenFileRef} type=\"file\" style={{display:\"none\"}}  onChange={this.onChangeFile} />\n                                <button onClick={this.onInputFile}>Load preset(s) from file</button>\n                                {/*data &&\n                                <Download data={this.state.binData} filename={`pacer-preset-${presetIndexToXY(presetIndex)}`} addTimestamp={true}\n                                          label=\"Download preset\" />\n                                */}\n                            </div>\n                        </div>\n                        {data && data[TARGET_PRESET][presetIndex] && <PresetNameEditor name={data[TARGET_PRESET][presetIndex][\"name\"]} onUpdate={(name) => this.updatePresetName(name)} />}\n                    </div>\n\n                    {showEditor &&\n                    <div className=\"content-row-content\">\n                        <Fragment>\n                            <h2>Preset MIDI settings:</h2>\n                            <MidiSettingsEditor settings={data[TARGET_PRESET][presetIndex][\"midi\"]}\n                                                onUpdate={(settingIndex, dataType, dataIndex, value) => this.updateMidiSettings(settingIndex, dataType, dataIndex, value)} />\n                        </Fragment>\n                    </div>\n                    }\n\n                    {changed && outputIsPacer(output) &&\n                    <div className=\"content-row-content\">\n                        <Fragment>\n                            <h2>Send the updated config to the Pacer:</h2>\n                            <div className=\"actions\">\n                                <button className=\"update\" onClick={() => this.updatePacer(updateMessages)}>Update Pacer</button>\n                            </div>\n                        </Fragment>\n                    </div>\n                    }\n\n                    {this.props.debug && showEditor &&\n                    <div className=\"content-row-content first\">\n                        <div className=\"debug\">\n                            <h4>[Debug] Update messages to send:</h4>\n                            <div className=\"message-to-send\">\n                                {updateMessages.map((m, i) => <div key={i} className=\"code\">{hs(m)}</div>)}\n                            </div>\n                        </div>\n                    </div>\n                    }\n\n                </div>\n\n            </div>\n\n            </Dropzone>\n\n        );\n    }\n\n}\n\nexport default PresetMidi;\n","import React, {Component} from \"react\";\n\nclass Download extends Component {\n\n    handleClick = (event) => {\n\n        console.log(this.props.data);\n\n        let url = window.URL.createObjectURL(new Blob([this.props.data], {type: \"application/octet-stream\"}));\n\n        let filename = this.props.filename;\n\n        if (this.props.addTimestamp) {\n            let now = new Date();\n            let timestamp =\n                now.getUTCFullYear() + \"-\" +\n                (\"0\" + (now.getUTCMonth() + 1)).slice(-2) + \"-\" +\n                (\"0\" + now.getUTCDate()).slice(-2) + \"-\" +\n                (\"0\" + now.getUTCHours()).slice(-2) + \"\" +\n                (\"0\" + now.getUTCMinutes()).slice(-2) + \"\" +\n                (\"0\" + now.getUTCSeconds()).slice(-2);\n            filename += '.' + timestamp;\n        }\n\n        let shadowlink = document.createElement(\"a\");\n        shadowlink.download = filename + \".syx\";\n        shadowlink.style.display = \"none\";\n        shadowlink.href = url;\n\n        document.body.appendChild(shadowlink);\n        shadowlink.click();\n        document.body.removeChild(shadowlink);\n\n        setTimeout(function() {\n            return window.URL.revokeObjectURL(url);\n        }, 1000);\n\n    };\n\n    render() {\n        return (\n            <button onClick={this.handleClick} className={this.props.className}>{this.props.label}</button>\n        );\n    }\n\n}\n\nexport default Download;\n","import React, {Component} from 'react';\nimport {produce} from \"immer\";\nimport {ALL_PRESETS_EXPECTED_BYTES, isSysexData, mergeDeep, parseSysexDump, requestAllPresets} from \"../pacer/sysex\";\nimport Midi from \"../components/Midi\";\nimport {ANY_MIDI_PORT, PACER_MIDI_PORT_NAME, SYSEX_SIGNATURE, TARGET_PRESET} from \"../pacer/constants\";\nimport PortsGrid from \"../components/PortsGrid\";\nimport {outputById} from \"../utils/ports\";\nimport {presetIndexToXY} from \"../pacer/utils\";\nimport Dropzone from \"react-dropzone\";\nimport \"./Patch.css\";\nimport Download from \"../components/Download\";\nimport {outputIsPacer} from \"../utils/midi\";\n\nfunction batchMessages(callback, callbackBusy, wait) {\n\n    let messages = [];  // batch of received messages\n    let timeout;\n\n    return function() {\n        clearTimeout(timeout);\n        let event = arguments[0];\n        messages.push(event.data);\n        // console.log('rec sysex', messages.length);\n        callbackBusy(messages.length);\n        timeout = setTimeout(() => {\n            // console.log(\"timeout elapsed\");\n            timeout = null;\n            callback(messages);\n            messages = [];\n        }, wait);\n    };\n}\n\nconst MAX_FILE_SIZE = 5 * 1024*1024;\n\nclass Patch extends Component {\n\n    // one data structure per preset\n\n    constructor(props) {\n        super(props);\n        this.inputOpenFileRef = React.createRef();\n        this.state = {\n            output: null,   // MIDI output port used for output\n            data: null,     // json\n            bytes: null,  // binary, will be used to download as .syx file\n            // presets: [],            // array of {data, bytes}, array index is preset index, 0 = current preset\n            dropZoneActive: false\n        };\n    }\n\n    /**\n     * Ad-hoc method to show the busy flag and set a timeout to make sure the busy flag is hidden after a timeout.\n     */\n    showBusy = ({busy = false, busyMessage = null, bytesExpected = -1, bytesReceived = -1} = {}) =>  {\n        // console.log(\"show busy\", busyMessage);\n        setTimeout(() => this.props.onBusy({busy: false}), 20000);\n        this.props.onBusy({busy: true, busyMessage, bytesExpected, bytesReceived});\n    };\n\n    handleMidiInputEvent = batchMessages(\n        messages => {\n\n            let bytes = messages.reduce((accumulator, element) => accumulator + element.length, 0);\n\n            this.setState(\n                produce(\n                    draft => {\n\n                        draft.bytes = new Uint8Array(bytes);\n                        let bin_index = 0;\n\n                        for (let m of messages) {\n\n                            draft.bytes.set(m, bin_index);\n                            bin_index += m.length;\n\n                            if (isSysexData(m)) {\n                                draft.data = mergeDeep(draft.data || {}, parseSysexDump(m));\n                            } else {\n                                console.log(\"MIDI message is not a sysex message\")\n                            }\n                        }\n                    }\n                )\n            );\n\n            // this.addInfoMessage(`${messages.length} messages received (${bytes} bytes)`);\n            // this.props.onBusy(false);\n            this.props.onBusy({busy: false});\n        },\n        (n) => {\n            // console.log(n);\n            this.props.onBusy({busy: true, bytesReceived: n});\n        },\n        1000\n    );\n\n    /**\n     *\n     * @param files\n     * @returns {Promise<void>}\n     */\n    async readFiles(files) {\n        await Promise.all(files.map(\n            async file => {\n                if (file.size > MAX_FILE_SIZE) {\n                    console.warn(`${file.name}: file too big, ${file.size}`);\n                } else {\n                    this.showBusy({busy: true, busyMessage: \"loading file...\"});\n                    const data = new Uint8Array(await new Response(file).arrayBuffer());\n                    if (isSysexData(data)) {\n                        this.setState(\n                            produce(draft => {\n                                draft.bytes = data;\n                                draft.data = mergeDeep(draft.data || {}, parseSysexDump(data));\n                                this.props.onBusy({busy: false});\n                            })\n                        );\n                        // this.addInfoMessage(\"sysfile decoded\");\n                        // } else {\n                        //     console.log(\"readFiles: not a sysfile\", hs(data.slice(0, 5)));\n                    }\n                    this.props.onBusy({busy: false});\n                    // non sysex files are ignored\n                }\n                // too big files are ignored\n            }\n        ));\n    }\n\n    onChangeFile = (e) => {\n        console.log(\"onChangeFile\", e);\n        var file = e.target.files[0];\n        console.log(file);\n        this.readFiles([file]);\n    };\n\n    onInputFile = (e) => {\n        console.log(\"onInputFile\", e);\n        this.inputOpenFileRef.current.click()\n    };\n\n    onDragEnter = () => {\n        this.setState({\n            dropZoneActive: true\n        });\n    };\n\n    onDragLeave= () => {\n        this.setState({\n            dropZoneActive: false\n        });\n    };\n\n    /**\n     * Drop Zone handler\n     * @param files\n     */\n    onDrop = (files) => {\n        // console.log('drop', files);\n        this.setState(\n            {\n                data: null,\n                changed: false,\n                dropZoneActive: false\n            },\n            () => {this.readFiles(files)}   // returned promise from readFiles() is ignored, this is normal.\n        );\n    };\n\n    onOutputConnection = (port_id) => {\n        this.setState(\n            produce(draft => {\n                draft.output = port_id;\n            })\n        );\n    };\n\n    onOutputDisconnection = (port_id) => {\n        this.setState(\n            produce(draft => {\n                draft.output = null;\n            })\n        );\n    };\n\n    sendSysex = (msg, bytesExpected) => {\n        console.log(\"sendSysex\", msg, bytesExpected);\n        if (!this.state.output) {\n            console.warn(\"no output enabled to send the message\");\n            return;\n        }\n        let out = outputById(this.state.output);\n        if (!out) {\n            console.warn(`send: output ${this.state.output} not found`);\n            return;\n        }\n        this.showBusy({busy: true, busyMessage: \"receiving data...\", bytesReceived: 0, bytesExpected});\n        this.setState(\n            {data: null},\n            () => out.sendSysex(SYSEX_SIGNATURE, msg)\n        );\n    };\n\n    sendMessage = (msg) => {\n        this.sendSysex(msg);\n    };\n\n    updatePacer = (messages) => {\n        // for (let m of messages) {\n        //     this.sendSysex(m);\n        // }\n        // this.addInfoMessage(`update${messages.length > 1 ? 's' : ''} sent to Pacer`);\n    };\n\n    /**\n     * @returns {*}\n     */\n    render() {\n\n        const { data, output, dropZoneActive } = this.state;\n\n        const overlayStyle = {\n            position: 'absolute',\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0,\n            paddingTop: '4rem',\n            background: 'rgba(0,0,0,0.4)',\n            textAlign: 'center',\n            color: '#fff',\n            fontSize: '4rem'\n        };\n\n        return (\n\n            <Dropzone\n                disableClick\n                style={{position: \"relative\"}}\n                // accept={accept}\n                onDrop={this.onDrop}\n                onDragEnter={this.onDragEnter}\n                onDragLeave={this.onDragLeave}>\n                {dropZoneActive &&\n                <div style={overlayStyle}>\n                    Drop sysex file...\n                </div>}\n\n                <div className=\"wrapper\">\n\n                    <div className=\"subheader\">\n                        <Midi only={ANY_MIDI_PORT} autoConnect={PACER_MIDI_PORT_NAME}\n                              portsRenderer={(groupedPorts, clickHandler) => <PortsGrid groupedPorts={groupedPorts} clickHandler={clickHandler} />}\n                              onMidiInputEvent={this.handleMidiInputEvent}\n                              onOutputConnection={this.onOutputConnection}\n                              onOutputDisconnection={this.onOutputDisconnection}\n                              className=\"\" >\n                            <div className=\"no-midi\">Please connect your Pacer to your computer.</div>\n                        </Midi>\n                    </div>\n\n                    <div className=\"content\">\n\n                        <div className=\"instructions\">\n                            A patch is a full dump of the Pacer.\n                        </div>\n\n                        <div className=\"content-row-content first\">\n                            <h2>From Pacer</h2>\n                            <div>\n                                {output && <button className=\"space-right\" onClick={() => this.sendSysex(requestAllPresets(), ALL_PRESETS_EXPECTED_BYTES)}>Read patch from Pacer</button>}\n                            </div>\n                            <div>\n                                {data && <Download data={data} filename={`pacer-preset`} addTimestamp={true} className=\"small\" label=\"Download patch\" />}\n                            </div>\n                        </div>\n\n                        <div className=\"content-row-content first\">\n                            <h2>To Pacer</h2>\n                            <div>\n                                {/*{output && <button className=\"space-right\" onClick={() => this.sendSysex(requestAllPresets())}>Read all presets from Pacer</button>}*/}\n                                <input ref={this.inputOpenFileRef} type=\"file\" style={{display:\"none\"}} onChange={this.onChangeFile} />\n                                <button onClick={this.onInputFile}>Load patch from file</button>\n                            </div>\n                            <div>\n                                {data && outputIsPacer(output) && <button onClick={() => this.updatePacer()}>Send patch to Pacer</button>}\n                            </div>\n                        </div>\n\n                        <div className=\"content-row-content\">\n\n                            <div className=\"instructions\">\n                                Presets marked \"no data\" are ignored. They will NOT erase the preset config in your Pacer.\n                            </div>\n\n                            <h2>Patch content:</h2>\n                            <div className=\"patch-content\">\n                            {\n                                Array.from(Array(24+1).keys()).map(\n                                index => {\n                                    let id = presetIndexToXY(index);\n                                    let show = data && data[TARGET_PRESET] && data[TARGET_PRESET][index];\n                                    let name = show ? data[TARGET_PRESET][index][\"name\"] : \"\";\n\n                                    if (index === 0) return null;\n\n                                    return (\n                                        <div key={index}>\n                                            {/*<div className=\"right-align\">{index}</div>*/}\n                                            <div>{id}</div>\n                                            {show ? <div>{name}</div> : <div className=\"placeholder\">no data</div>}\n                                        </div>\n                                    );\n                                })\n                            }\n                            </div>\n\n                        </div>\n\n                    </div>\n\n                </div>\n\n            </Dropzone>\n        );\n    }\n}\n\nexport default Patch;\n","import React, {Component} from 'react';\nimport './App.css';\nimport { HashRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport TestSender from \"./pages/TestSender\";\nimport Preset from \"./pages/Preset\";\nimport Monitor from \"./pages/Monitor\";\nimport Footer from \"./components/Footer\";\nimport Global from \"./pages/Global\";\nimport DumpDecoder from \"./pages/DumpDecoder\";\nimport PresetMidi from \"./pages/PresetMidi\";\nimport * as QueryString from \"query-string\";\nimport Patch from \"./pages/Patch\";\nimport {produce} from \"immer\";\n\nconst MenuLink = ({ label, to, activeOnlyWhenExact }) => (\n    <Route\n        path={to}\n        exact={activeOnlyWhenExact}\n        children={({ match }) => (\n            <div className={match ? \"header-link active\" : \"header-link\"}>\n                <Link to={to}>{label}</Link>\n            </div>\n        )}\n    />\n);\n\nconst NoMatch = () =>\n    <div className=\"content home full-width\">\n        <div className=\"instructions\">\n            Invalid URL\n        </div>\n    </div>;\n\n\nclass App extends Component {\n\n    state = {\n        busy: false,\n        busyMessage: \"please wait\",\n        bytesExpected: -1,\n        // bytesReceived: -1,\n        progress: -1    // 0..100\n    };\n\n    // initBusy = (busy, busyMessage, bytesExpected, bytesReceived) => {\n    //     this.setState({ busy, busyMessage, bytesExpected, bytesReceived });\n    // };\n\n    /**\n     *\n     * @param busy\n     * @param busyMessage\n     * @param bytesExpected\n     * @param bytesReceived\n     */\n    onBusy = ({busy = false, busyMessage = null, bytesExpected = -1, bytesReceived = -1} = {}) => {\n\n        // console.log(\"app.onBusy\", busy, busyMessage, bytesExpected, bytesReceived);\n\n        let show = busy !== this.state.busy;\n        show = show || (busyMessage !== null && busyMessage !== this.state.busyMessage);\n        show = show || (bytesExpected > 0 && bytesExpected !== this.state.bytesExpected);\n\n        // let progressString = \"\";\n        // if (bytesExpected > 0) {\n            // show progress in %\n        let progress = -1;\n        if (this.state.bytesExpected > 0 && bytesReceived > 0) {\n            progress = Math.round(bytesReceived / this.state.bytesExpected * 100 / 5) * 5;\n            show = show || ((progress >= 0) && (progress !== this.state.progress));\n        }\n        // } else {\n        //     // show progress in bytes\n        //     let progress = 0;\n        //     if (bytesReceived > 0) {\n        //         progress = Math.round(bytesReceived / this.state.bytesExpected * 100 / 5) * 5;\n        //         // console.log(\"progress\", draft.bytesExpected, bytesReceived, progress);\n        //         show = show || ((progress >= 0) && (progress !== this.state.progress));\n        //     }\n        // }\n\n        // console.log(\"show\", show, busyMessage);\n\n        if (show) {\n            // console.log(\"busy setstate\", this.state, busy, busyMessage, bytesExpected, bytesReceived, progress);\n            this.setState(\n                produce(draft => {\n                    if (draft.busy !== busy) draft.busy = busy;\n\n                    if (busyMessage !== null) draft.busyMessage = busyMessage;\n\n                    if (bytesExpected > 0 && bytesExpected !== draft.bytesExpected) draft.bytesExpected = bytesExpected;\n\n                    if (busy === false) {\n                        draft.bytesExpected = -1;\n                        progress = -1;\n                    } else {\n\n                        // console.log(\"draft.busyMessage\", draft.busyMessage);\n\n                        if (bytesExpected > 0) draft.bytesExpected = bytesExpected;\n\n                        // if (bytesReceived > 0) {\n                        //     let progress = Math.round(bytesReceived / draft.bytesExpected * 100 / 5) * 5;\n                        if (draft.progress !== progress) {\n                            draft.progress = progress;\n                            // console.log(\"progress\", draft.bytesExpected, bytesReceived, progress);\n                        }\n                        // console.log(\"progress\", draft.bytesExpected, bytesReceived, progress);\n                        // }\n\n                    }\n\n                    // let m = { type, message };\n                    // let len = draft.statusMessages.push(m);\n                    // if (len > MAX_STATUS_MESSAGES) draft.statusMessages.shift();\n                })\n            );\n        }\n\n        // if (busy !== this.state.busy) this.setState({ busy, bytesReceived });\n        // this.setState({ busy, bytesReceived });\n    };\n\n    /**\n     * Main app render\n     * @returns {*}\n     */\n    render() {\n        const { busy, busyMessage, progress } = this.state;\n\n        const q =  QueryString.parse(window.location.search);\n        const debug = q.debug ? q.debug === '1' : false;\n\n        return (\n            <Router>\n                <div className=\"app\">\n\n                    <header className=\"header\">\n                        <MenuLink activeOnlyWhenExact={true} to=\"/\" label=\"Home\" />\n                        <MenuLink to=\"/preset\" label=\"Preset Controls\" />\n                        <MenuLink to=\"/presetmidi\" label=\"Preset Name & MIDI\" />\n                        <MenuLink to=\"/global\" label=\"Global config\" />\n                        <MenuLink to=\"/patch\" label=\"Patch\" />\n                        {/*<MenuLink to=\"/patches\" label=\"Patches\" />*/}\n                        {/*<MenuLink to=\"/files\" label=\"Files\" />*/}\n                        {/*<MenuLink to=\"/chords\" label=\"Chords\" />*/}\n                        <MenuLink to=\"/monitor\" label=\"MIDI monitor\" />\n                        <MenuLink to=\"/dumpdecoder\" label=\"Dump decoder\" />\n                        {debug && <MenuLink to=\"/testsender\" label=\"Debug\" />}\n                        {!busy && <div className=\"spacer\"> </div>}\n                        {busy && <div className=\"busy\">{busyMessage}{progress >= 0 && <div>{progress} %</div>}</div>}\n                        <div className=\"header-app-name\">Pacer editor 0.5.3</div>\n                    </header>\n\n                        <Switch>\n                            <Route exact={true} path=\"/\" render={\n                                props => (\n                                    <Home />\n                                )\n                            }/>\n                            <Route path=\"/preset\" render={\n                                props => (\n                                    <Preset onBusy={this.onBusy} debug={debug} />\n                                )\n                            }/>\n                            <Route path=\"/presetmidi\" render={\n                                props => (\n                                    <PresetMidi onBusy={this.onBusy} debug={debug} />\n                                )\n                            }/>\n                            <Route path=\"/global\" render={\n                                props => (\n                                    <Global onBusy={this.onBusy} debug={debug} />\n                                )\n                            }/>\n{/*\n                            <Route path=\"/chords\" render={\n                                props => (\n                                    <Chords onBusy={this.onBusy} debug={debug} />\n                                )\n                            }/>\n*/}\n{/*\n                            <Route path=\"/patches\" render={\n                                props => (\n                                    <Patches onBusy={this.onBusy} debug={debug} />\n                                )\n                            }/>\n*/}\n                            <Route path=\"/patch\" render={\n                                props => (\n                                    <Patch onBusy={this.onBusy} debug={debug} />\n                                )\n                            }/>\n                            {/*<Route path=\"/files\" render={*/}\n                                {/*props => (*/}\n                                    {/*<Files onBusy={this.onBusy} debug={debug} />*/}\n                                {/*)*/}\n                            {/*}/>*/}\n                            <Route path=\"/monitor\" render={\n                                props => (\n                                    <Monitor onBusy={this.onBusy} debug={debug} />\n                                )\n                            }/>\n                            <Route path=\"/dumpdecoder\" render={\n                                props => (\n                                    <DumpDecoder onBusy={this.onBusy} debug={debug} />\n                                )\n                            }/>\n                            {debug &&\n                            <Route path=\"/testsender\" render={\n                                props => (\n                                    <TestSender onBusy={this.onBusy} debug={debug} />\n                                )\n                            }/>\n                            }\n                            <Route component={NoMatch} />\n                        </Switch>\n\n                    <Footer />\n\n                </div>\n            </Router>\n\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nfunction noop() {}\nif (process.env.NODE_ENV !== 'development') {\n    console.log = noop;\n    console.warn = noop;\n    console.error = noop;\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}