{"version":3,"sources":["pages/Home.js","utils/hexstring.js","pacer/index.js","utils/sysex.js","utils/ports.js","components/DumpSysex.js","components/Midi.js","components/MidiPort.js","pages/TestSender.js","components/PresetSelector.js","components/ControlSelector.js","components/ControlStepsEditor.js","components/ControlModeEditor.js","components/Status.js","pages/Preset.js","utils/midi.js","pages/Monitor.js","components/Footer.js","pages/Global.js","pages/DumpDecoder.js","components/MidiSettingsEditor.js","components/PresetNameEditor.js","pages/PresetMidi.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","className","href","target","rel","src","alt","Component","h","v","undefined","str","len","char","s","c","n","length","padZero","toString","toUpperCase","hs","data","Array","from","map","join","fromHexString","string","sep","replace","Uint8Array","i","parseInt","substr","sortObject","obj","arr","prop","hasOwnProperty","push","key","value","sort","b","localeCompare","SYSEX_SIGNATURE","SYSEX_HEADER","COMMAND_SET","COMMAND_GET","TARGET_PRESET","TARGETS","_TARGETS","Object","defineProperty","CONTROL_NAME","CONTROL_STOMPSWITCH_1","CONTROL_STOMPSWITCH_6","CONTROL_STOMPSWITCH_A","CONTROL_FOOTSWITCH_4","CONTROL_EXPRESSION_PEDAL_1","CONTROL_EXPRESSION_PEDAL_2","CONTROL_MIDI","CONTROL_ALL","CONTROLS","_CONTROLS","STOMPSWITCHES_TOP","STOMPSWITCHES_BOTTOM","FOOTSWITCHES","EXPPEDALS","MSG_CTRL_OFF","MSG_TYPES","_MSG_TYPES","MSG_TYPES_FULLNAME_SW","_MSG_TYPES_FULLNAME_S","MSG_TYPES_FULLNAME_SW_SORTED","MSG_TYPES_FULLNAME_MIDI_SORTED","_MSG_TYPES_FULLNAME_E","_MSG_TYPES_FULLNAME_M","MSG_TYPES_DATA_HELP","_MSG_TYPES_DATA_HELP","COLORS","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","CONTROL_MODE_ELEMENT","CONTROL_MODES","_CONTROL_MODES","checksum","bytes","reduce","previousValue","currentValue","requestPreset","index","msg","cs","concat","requestPresetObj","SYSEX_START","SYSEX_END","CMD","TGT","IDX","OBJ","ELM","isObject","item","isArray","mergeDeep","_len","arguments","sources","_key","source","shift","assign","apply","isSysexData","byteLength","parseSysexMessage","obj_type","message","cmd","tgt","idx","console","warn","log","String","fromCharCode","slice","getPresetName","steps","e","config","channel","msg_type","active","getControlStep","mode_cfg","control_mode","getControlMode","led_cfg","data_len","step","cfg","d","getControlLED","getMidiSetting","parseSysexDump","presets","indexOf","k","manufacturer_id","NEKTAR_TECHNOLOGY_INC","getControlUpdateSysexMessages","presetIndex","controlId","msgs","_arr","keys","_i","changed","buildControlStepSysex","mode","buildControlModeSysex","getMidiSettingUpdateSysexMessages","settings","_arr2","_i2","setting","buildMidiSettingsSysex","portById","id","p","WebMidi","inputs","find","outputs","inputById","outputById","inputName","name","outputName","PresetName","_ref","MidiTable","_ref2","colSpan","t","Note","MidiSettings","_ref3","DumpSysex_MidiTable","ControlTable","_ref4","Controls","_ref5","controls","DumpSysex_ControlTable","Preset","_ref6","Math","floor","presetIndexToXY","DumpSysex_PresetName","DumpSysex_Controls","DumpSysex_MidiSettings","Presets","_ref7","DumpSysex_Preset","DumpSysex","_ref8","DumpSysex_Presets","Midi","state","input","output","connectInput","port","_this","props","onMidiInputEvent","hasListener","addListener","onInputConnection","disconnectInput","removeListener","onInputDisconnection","connectOutput","setState","onOutputConnection","disconnectOutput","port_id","onOutputDisconnection","autoConnectInput","autoConnect","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","type","match","RegExp","err","return","autoConnectOutput","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","registerInputs","r","only","filter","registerOutputs","unRegisterInputs","unRegisterOutputs","handleMidiConnectEvent","group","groupEnd","togglePort","prev","midiOn","this","_this2","_this$state","children","inputRenderer","outputRenderer","defaultProps","classname","MidiPorts","isSelected","selected","clickHandler","react_switch_default","onChange","checked","height","width","TestSender","messages","customMessage","updateCustomMessage","event","sendCustomMessage","sendSysex","handleMidiInputEvent","produce","draft","renderPort","components_MidiPort","setOutput","out","sendMessage","Midi_Midi","onClick","disabled","size","placeholder","src_components_DumpSysex","Selector","PresetSelector","currentPreset","react","PresetSelector_Selector","letter","digit","xy","charCodeAt","Control","ControlSelector","currentControl","ControlSelector_Control","LEDMidi","current_value","defaultValue","LEDColor","LEDNum","MidiNote","note","Step","d0","d1","d2","updateCallback","ControlStepsEditor_MidiNote","ControlStepsEditor_LEDColor","led_active_color","led_inactive_color","ControlStepsEditor_LEDNum","led_num","ControlStepsEditor_LEDMidi","led_midi_ctrl","ControlStepsEditor","onStepUpdate","stepIndex","dataType","dataIndex","onUpdate","ControlStepsEditor_Step","ControlModeEditor","Status","MAX_STATUS_MESSAGES","isVal","statusMessages","addStatusMessage","m","addInfoMessage","addWarningMessage","addErrorMessage","onDrop","files","readFiles","selectPreset","selectControl","updateControlStep","updateControlMode","pId","cId","updatePacer","Promise","all","asyncToGenerator","regenerator_default","mark","_callee","file","wrap","_context","t0","Response","arrayBuffer","t1","sent","stop","_x2","_this3","showEditor","updateMessages","src_components_PresetSelector","src_components_ControlSelector","src_components_ControlStepsEditor","src_components_ControlModeEditor","es","src_components_Status","MESSAGE","128","144","160","176","192","208","224","CONTROLER","32","33","34","36","37","38","39","40","42","43","44","45","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","91","92","93","94","95","96","97","98","99","100","101","120","121","122","123","124","125","126","127","MAX_MESSAGES","Monitor","unshift","pop","parseMidi","info2","info3","messageCode","velocity","controlNumber","controlValue","program","pitchBend","pitchBendMultiplier","Footer","aria-label","title","viewBox","version","aria-hidden","fillRule","Global","DumpDecoder","onBusy","Setting","MidiSettingsEditor_MidiNote","MidiSettingsEditor","onSettingUpdate","settingIndex","MidiSettingsEditor_Setting","PresetNameEditor","onNameUpdate","PresetMidi","updateMidiSettings","updatePresetName","buildPresetNameSysex","components_PresetNameEditor","src_components_MidiSettingsEditor","MenuLink","label","to","activeOnlyWhenExact","Route","path","exact","Link","App","busy","HashRouter","App_MenuLink","Switch","render","src_pages_Home","src_pages_Preset","pages_PresetMidi","pages_Global","src_pages_Monitor","src_pages_DumpDecoder","src_pages_TestSender","src_components_Footer","Boolean","window","location","hostname","noop","error","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f44a9dd4.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport \"./Home.css\";\n\n\nclass Home extends Component {\n\n\n    render() {\n\n        return (\n            <div className=\"content\">\n\n                <h1>Requirements</h1>\n\n                <div className=\"doc\">\n                    <p>This application requires a browser that support\n                        the <a href=\"http://webaudio.github.io/web-midi-api/\" target=\"_blank\" rel=\"noopener noreferrer\">Web MIDI API</a>.</p>\n\n                    <p>Currently, only <span className=\"strong\">Chrome</span> and <span className=\"strong\">Opera</span> support this standard.\n                        This application will therefore <span className=\"italic\">not</span> work in Firefox, Safari, IE or Edge.</p>\n                </div>\n\n                <h1>Limitations</h1>\n\n                <div className=\"doc\">\n                    <p>The current version of this editor isn't able to edit the Global configuration of the Pacer.</p>\n                    <p>This editor does not offer patches management either.</p>\n{/*\n                    <p>The current version only allows you to edit:</p>\n                    <p>\n                        <ul>\n                            <li>The steps associated with a preset control</li>\n                            <li>The MIDI settings of a preset</li>\n                        </ul>\n                    </p>\n                    <p><i>To be completed...</i></p>\n*/}\n                </div>\n\n{/*\n                <h2>Usage</h2>\n\n                <div className=\"doc\">\n                    <ol>\n                        <li>Connect your Pacer to your computer</li>\n                    </ol>\n                </div>\n*/}\n\n                <h1>MIDI in your browser</h1>\n\n                <div className=\"doc\">\n                    <div>\n                        <p>You need to allow your browser to use your MIDI device:</p>\n                        <img src=\"help-01.png\" alt=\"\" />\n                    </div>\n                    <div>\n                        <p>In case you didn't allow the use of MIDI device and want to change that, you can right-click on the URL icon and change the setting:</p>\n                        <img src=\"help-02.png\" alt=\"\" />\n                    </div>\n                </div>\n\n                <h1>FAQ</h1>\n\n                <div className=\"doc\">\n                    <p><i>To be completed...</i></p>\n                </div>\n\n                <h1>Contribute</h1>\n\n                <div className=\"doc\">\n                    <p>This editor is an Open Source project. You are welcome to contribute.</p>\n                    <p>The source-code is hosted\n                    by GitHub: <a href=\"https://github.com/francoisgeorgy/pacer-editor\" target=\"_blank\" rel=\"noopener noreferrer\">pacer-editor</a></p>\n                    <p>To contribute your bug fixes, new features, etc.: 1) fork the project, 2) create a pull-request.</p>\n                </div>\n\n                <h1>Thanks</h1>\n\n                <div className=\"doc\">\n                    Thank you to the Nektar support service for having provided precious informations regarding the SysEx data format of the Pacer.\n                    This editor would not have been possible without their support.\n                </div>\n\n            </div>\n        );\n    }\n\n}\n\nexport default Home;\n","\n/*\nString.prototype.padZero = function (len, c) {\n    var s = '', c = c || '0', len = (len || 2) - this.length;\n    while (s.length < len) s += c;\n    return s + this;\n};\n*/\n\nexport const padZero = (str, len, char) => {\n    let s = '';\n    let c = char || '0';\n    let n = (len || 2) - str.length;\n    while (s.length < n) s += c;\n    return s + str;\n};\n\nexport const h = v => {\n    return (v === null || v === undefined) ? \"\" : padZero(v.toString(16).toUpperCase(), 2);\n};\n\nexport const hs = data => (data === null || data === undefined) ? \"\" : (Array.from(data).map(n => h(n))).join(\" \");    // Array.from() is necessary to get a non-typed array\n\n\n/**\n *\n * @param string\n * @param sep\n * @returns {*}\n */\nexport const fromHexString = function(string, sep) {\n    let s = sep ? string.replace(sep, '') : string;\n    if ((s.length % 2) > 0) {\n        return null;\n    }\n    if (s.length === 0) return null;\n    let a = new Uint8Array(s.length / 2);\n    for (let i=0; i < (s.length / 2); i++) {\n        a[i] = parseInt(s.substr(i * 2, 2), 16);\n    }\n    return a;\n};\n","\nfunction sortObject(obj) {\n    let arr = [];\n    for (let prop in obj) {\n        if (obj.hasOwnProperty(prop)) {\n            arr.push({\n                'key': prop,\n                'value': obj[prop]\n            });\n        }\n    }\n    arr.sort((a, b) => a.value.localeCompare(b.value));\n    return arr;\n}\n\nexport const PACER_MIDI_PORT_NAME = \"Pacer midi1\";          // can be a regex\nexport const PACER_MIDI_INPUT_PORT_NAME = \"Pacer midi1\";\nexport const PACER_MIDI_OUTPUT_PORT_NAME = \"Pacer midi1\";\n\nexport const SYSEX_SIGNATURE = [0x00, 0x01, 0x77];\nexport const SYSEX_HEADER = [0x7F];\n\nexport const COMMAND_SET = 0x01;\nexport const COMMAND_GET = 0x02;\n\nexport const TARGET_PRESET = 0x01;\nexport const TARGET_GLOBAL = 0x05;\nexport const TARGET_BACKUP = 0x07;\n\nexport const TARGETS = {\n    [TARGET_PRESET]: \"preset\",\n    [TARGET_GLOBAL]: \"global\",\n    [TARGET_BACKUP]: \"full backup\"\n};\n\n\nexport const CONTROL_NAME = 0x01;\nexport const CONTROL_STOMPSWITCH_1 = 0x0D;\nexport const CONTROL_STOMPSWITCH_2 = 0x0E;\nexport const CONTROL_STOMPSWITCH_3 = 0x0F;\nexport const CONTROL_STOMPSWITCH_4 = 0x10;\nexport const CONTROL_STOMPSWITCH_5 = 0x11;\nexport const CONTROL_STOMPSWITCH_6 = 0x12;\nexport const CONTROL_RESERVED = 0x13;\nexport const CONTROL_STOMPSWITCH_A = 0x14;\nexport const CONTROL_STOMPSWITCH_B = 0x15;\nexport const CONTROL_STOMPSWITCH_C = 0x16;\nexport const CONTROL_STOMPSWITCH_D = 0x17;\nexport const CONTROL_FOOTSWITCH_1 = 0x18;\nexport const CONTROL_FOOTSWITCH_2 = 0x19;\nexport const CONTROL_FOOTSWITCH_3 = 0x1A;\nexport const CONTROL_FOOTSWITCH_4 = 0x1B;\nexport const CONTROL_EXPRESSION_PEDAL_1 = 0x36;\nexport const CONTROL_EXPRESSION_PEDAL_2 = 0x37;\nexport const CONTROL_MIDI = 0x7E;\nexport const CONTROL_ALL = 0x7F;\n\n\n// objects:\nexport const CONTROLS = {\n    [CONTROL_NAME]: \"name\",\n    [CONTROL_STOMPSWITCH_1]: \"1\",\n    [CONTROL_STOMPSWITCH_2]: \"2\",\n    [CONTROL_STOMPSWITCH_3]: \"3\",\n    [CONTROL_STOMPSWITCH_4]: \"4\",\n    [CONTROL_STOMPSWITCH_5]: \"5\",\n    [CONTROL_STOMPSWITCH_6]: \"6\",\n    [CONTROL_RESERVED]: \"RESERVED\",\n    [CONTROL_STOMPSWITCH_A]: \"A\",\n    [CONTROL_STOMPSWITCH_B]: \"B\",\n    [CONTROL_STOMPSWITCH_C]: \"C\",\n    [CONTROL_STOMPSWITCH_D]: \"D\",\n    [CONTROL_FOOTSWITCH_1]: \"FS 1\",\n    [CONTROL_FOOTSWITCH_2]: \"FS 2\",\n    [CONTROL_FOOTSWITCH_3]: \"FS 3\",\n    [CONTROL_FOOTSWITCH_4]: \"FS 4\",\n    [CONTROL_EXPRESSION_PEDAL_1]: \"EXP 1\",\n    [CONTROL_EXPRESSION_PEDAL_2]: \"EXP 2\",\n    [CONTROL_MIDI]: \"MIDI configuration\",\n    [CONTROL_ALL]: \"ALL\"\n};\n\nexport const CONTROLS_FULLNAME = {\n    0x01: \"Preset Name\",\n    0x0D: \"Stompswitch 1\",\n    0x0E: \"Stompswitch 2\",\n    0x0F: \"Stompswitch 3\",\n    0x10: \"Stompswitch 4\",\n    0x11: \"Stompswitch 5\",\n    0x12: \"Stompswitch 6\",\n    0x13: \"RESERVED\",\n    0x14: \"Stompswitch A\",\n    0x15: \"Stompswitch B\",\n    0x16: \"Stompswitch C\",\n    0x17: \"Stompswitch D\",\n    0x18: \"Footswitch 1\",\n    0x19: \"Footswitch  2\",\n    0x1A: \"Footswitch  3\",\n    0x1B: \"Footswitch  4\",\n    0x36: \"Expression Pedal 1\",\n    0x37: \"Expression Pedal 2\",\n    0x7E: \"MIDI configuration\",\n    0x7F: \"ALL\"\n};\n\n// subsets of CONTROLS keys:\nexport const STOMPSWITCHES = [0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x14, 0x15, 0x16, 0x17];\nexport const STOMPSWITCHES_TOP = [0x14, 0x15, 0x16, 0x17];\nexport const STOMPSWITCHES_BOTTOM = [0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12];\nexport const FOOTSWITCHES = [0x18, 0x19, 0x1A, 0x1B];\nexport const EXPPEDALS = [0x36, 0x37];\n\n// message types:\nexport const MSG_AD_MIDICC = 0x00;\nexport const MSG_AD_NRPNC = 0x03;\nexport const MSG_AD_NRPNF = 0x04;\nexport const MSG_AD_PITCH = 0x01;\nexport const MSG_AD_ATCHAN = 0x02;\nexport const MSG_DAWFUNC = 0x7E;\nexport const MSG_CTRL_OFF = 0x61;\n\nexport const MSG_SW_MIDI_CC_TGGLE = 0x47;\nexport const MSG_SW_MIDI_CC = 0x40;\nexport const MSG_SW_MIDI_CC_STEP = 0x48;\nexport const MSG_SW_NOTE = 0x43;\nexport const MSG_SW_NOTE_TGGLE = 0x44;\nexport const MSG_SW_PRG_BANK = 0x45;\nexport const MSG_SW_PRG_STEP = 0x46;\nexport const MSG_SW_NRPN_COARSE = 0x57;\nexport const MSG_SW_NRPN_FINE = 0x58;\nexport const MSG_SW_MMC = 0x55;\nexport const MSG_SW_RELAY = 0x59;\nexport const MSG_SW_PRESET_SELECT = 0x62;\nexport const MSG_SW_PRESET_INC_DEC = 0x56;\nexport const MSG_SW_STEP_SELECT = 0x63;\nexport const MSG_SW_STEP_INC_DEC = 0x64;\n\nexport const MSG_ENC_CC = 0x12;\nexport const MSG_ENC_MIDICC_REL = 0x11;\nexport const MSG_ENC_NRPNC = 0x15;\nexport const MSG_ENC_NRPNF = 0x16;\nexport const MSG_ENC_PITCH = 0x13;\nexport const MSG_ENC_ATCHAN = 0x14;\nexport const MSG_ENC_PROGRAM = 0x10;\nexport const MSG_ENC_PRESETSELECT = 0x17;\nexport const MSG_ENC_STEPSELECT = 0x18;\n\nexport const MSG_LOAD_CC = 0x65;\n\nexport const MSG_TYPES = {\n\n    [MSG_AD_MIDICC]: \"CC\",\n    [MSG_AD_NRPNC]: \"NRPN C\",\n    [MSG_AD_NRPNF]: \"NRPN F\",\n    [MSG_AD_PITCH]: \"PITCH\",\n    [MSG_AD_ATCHAN]: \"AT CHAN\",\n    [MSG_DAWFUNC]: \"DAW FUNC\",\n    [MSG_CTRL_OFF]: \"CTRL_OFF\",\n\n    [MSG_SW_MIDI_CC_TGGLE]: \"CC TOGGLE\",\n    [MSG_SW_MIDI_CC]: \"CC\",\n    [MSG_SW_MIDI_CC_STEP]: \"CC STEP\",\n    [MSG_SW_NOTE]: \"NOTE\",\n    [MSG_SW_NOTE_TGGLE]: \"NOTE TOGGLE\",\n    [MSG_SW_PRG_BANK]: \"PRG BANK\",\n    [MSG_SW_PRG_STEP]: \"PRG STEP\",\n    [MSG_SW_NRPN_COARSE]: \"NRPN COARSE\",\n    [MSG_SW_NRPN_FINE]: \"NRPN FINE\",\n    [MSG_SW_MMC]: \"MMC\",\n    [MSG_SW_RELAY]: \"RELAY\",\n    [MSG_SW_PRESET_SELECT]: \"PRESET SELECT\",\n    [MSG_SW_PRESET_INC_DEC]: \"PRESET INC DEC\",\n    [MSG_SW_STEP_SELECT]: \"STEP SELECT\",\n    [MSG_SW_STEP_INC_DEC]: \"STEP INC DEC\",\n\n    [MSG_ENC_CC]: \"CC\",\n    [MSG_ENC_MIDICC_REL]: \"CC REL\",\n    [MSG_ENC_NRPNC]: \"NRPN C\",\n    [MSG_ENC_NRPNF]: \"NRPN F\",\n    [MSG_ENC_PITCH]: \"PITCH\",\n    [MSG_ENC_ATCHAN]: \"AT CHAN\",\n    [MSG_ENC_PROGRAM]: \"PRG\",\n    [MSG_ENC_PRESETSELECT]: \"PRESET SEL\",\n    [MSG_ENC_STEPSELECT]: \"STEP SEL\",\n\n    [MSG_LOAD_CC]: \"CC\"\n};\n\n// Message types for stompswitches\nexport const MSG_TYPES_FULLNAME_SW = {\n\n    // [MSG_AD_MIDICC]: \"MIDI CC\",\n    // [MSG_AD_NRPNC]: \"MIDI NRPN Coarse\",\n    // [MSG_AD_NRPNF]: \"MIDI NRPN Fine\",\n    // [MSG_AD_PITCH]: \"Pitch Bend\",\n    // [MSG_AD_ATCHAN]: \"AT CHAN\",\n    // [MSG_DAWFUNC]: \"DAW FUNC\",\n    [MSG_CTRL_OFF]: \"OFF\",\n\n    [MSG_SW_MIDI_CC_TGGLE]: \"CC Toggle\",\n    [MSG_SW_MIDI_CC]: \"CC Trigger\",\n    [MSG_SW_MIDI_CC_STEP]: \"CC Step\",\n    [MSG_SW_NOTE]: \"Note\",\n    [MSG_SW_NOTE_TGGLE]: \"Note Toggle\",\n    [MSG_SW_PRG_BANK]: \"Program & Bank\",\n    [MSG_SW_PRG_STEP]: \"Program Step\",\n    [MSG_SW_NRPN_COARSE]: \"NRPN Coarse\",\n    [MSG_SW_NRPN_FINE]: \"NRPN Fine\",\n    [MSG_SW_MMC]: \"MIDI Machine Control\",\n    [MSG_SW_RELAY]: \"Relay Outputs\",\n    [MSG_SW_PRESET_SELECT]: \"Preset Select\",\n    [MSG_SW_PRESET_INC_DEC]: \"Preset Inc/Dec\",\n    [MSG_SW_STEP_SELECT]: \"Step Select\",\n    [MSG_SW_STEP_INC_DEC]: \"Step Inc/Dec\",\n\n    // [MSG_ENC_CC]: \"CC\",\n    // [MSG_ENC_MIDICC_REL]: \"CC REL\",\n    // [MSG_ENC_NRPNC]: \"MIDI NRPN Coarse\",\n    // [MSG_ENC_NRPNF]: \"MIDI NRPN Fine\",\n    // [MSG_ENC_PITCH]: \"Pitch Bend\",\n    // [MSG_ENC_ATCHAN]: \"AT CHAN\",\n    // [MSG_ENC_PROGRAM]: \"PRG\",\n    // [MSG_ENC_PRESETSELECT]: \"PRESET SEL\",\n    // [MSG_ENC_STEPSELECT]: \"STEP SEL\",\n    //\n    // [MSG_LOAD_CC]: \"CC\"\n\n};\n\nexport const MSG_TYPES_FULLNAME_SW_SORTED = sortObject(MSG_TYPES_FULLNAME_SW);\n\n\nexport const MSG_TYPES_FULLNAME_ENC = {\n\n    // [MSG_AD_MIDICC]: \"MIDI CC\",\n    // [MSG_AD_NRPNC]: \"MIDI NRPN Coarse\",\n    // [MSG_AD_NRPNF]: \"MIDI NRPN Fine\",\n    // [MSG_AD_PITCH]: \"Pitch Bend\",\n    // [MSG_AD_ATCHAN]: \"AT CHAN\",\n    // [MSG_DAWFUNC]: \"DAW FUNC\",\n    [MSG_CTRL_OFF]: \"OFF\",\n    //\n    // [MSG_SW_MIDICC_TGGLE]: \"MIDI CC Toggle\",\n    // [MSG_SW_MIDICC]: \"CC\",\n    // [MSG_SW_MIDICC_STEP]: \"CC STEP\",\n    // [MSG_SW_NOTE]: \"MIDI Note\",\n    // [MSG_SW_NOTE_TGGLE]: \"MIDI Note Toggle\",\n    // [MSG_SW_PRGBANK]: \"PRG BANK\",\n    // [MSG_SW_PRG_STEP]: \"PRG STEP\",\n    // [MSG_SW_NRPNCOARSE]: \"MIDI NRPN Coarse\",\n    // [MSG_SW_NRPNFINE]: \"MIDI NRPN Fine\",\n    // [MSG_SW_MMC]: \"MMC\",\n    // [MSG_SW_RELAY]: \"RELAY\",\n    // [MSG_SW_PRESETSELECT]: \"PRESET SELECT\",\n    // [MSG_SW_PRESETINCDEC]: \"PRESET INC DEC\",\n    // [MSG_SW_STEPSELECT]: \"STEP SELECT\",\n    // [MSG_SW_STEPINCDEC]: \"STEP INC DEC\",\n\n    [MSG_ENC_CC]: \"CC\",\n    [MSG_ENC_MIDICC_REL]: \"CC REL\",\n    [MSG_ENC_NRPNC]: \"NRPN Coarse\",\n    [MSG_ENC_NRPNF]: \"NRPN Fine\",\n    [MSG_ENC_PITCH]: \"Pitch Bend\",\n    [MSG_ENC_ATCHAN]: \"AT Chan.\",\n    [MSG_ENC_PROGRAM]: \"Program\",\n    [MSG_ENC_PRESETSELECT]: \"Preset Sel\",\n    [MSG_ENC_STEPSELECT]: \"Step Sel\",\n\n    // [MSG_LOAD_CC]: \"CC\"\n\n};\n\n\n// Preset Midi Settings\nexport const MSG_TYPES_FULLNAME_MIDI = {\n\n    [MSG_LOAD_CC]: \"Load CC\",\n    [MSG_SW_NOTE]: \"MIDI Note\",\n    [MSG_SW_PRG_BANK]: \"Program & Bank\",\n    [MSG_SW_NRPN_COARSE]: \"NRPN Coarse\",\n    [MSG_SW_NRPN_FINE]: \"NRPN Fine\",\n    [MSG_SW_MMC]: \"MIDI Machine Control\",\n    [MSG_SW_RELAY]: \"Relay Outputs\",\n    [MSG_DAWFUNC]: \"DAW Func.\",\n    [MSG_CTRL_OFF]: \"OFF\"\n\n    // [MSG_AD_MIDICC]: \"CC\",\n    // [MSG_AD_NRPNC]: \"NRPN Coarse\",\n    // [MSG_AD_NRPNF]: \"NRPN Fine\",\n    // [MSG_AD_PITCH]: \"Pitch Bend\",\n    // [MSG_AD_ATCHAN]: \"AT Chan.\",\n    //\n    // [MSG_SW_MIDICC_TGGLE]: \"MIDI CC Toggle\",\n    // [MSG_SW_MIDICC]: \"CC\",\n    // [MSG_SW_MIDICC_STEP]: \"CC STEP\",\n    // [MSG_SW_NOTE_TGGLE]: \"MIDI Note Toggle\",\n    // [MSG_SW_PRG_STEP]: \"PRG STEP\",\n    // [MSG_SW_PRESETSELECT]: \"PRESET SELECT\",\n    // [MSG_SW_PRESETINCDEC]: \"PRESET INC DEC\",\n    // [MSG_SW_STEPSELECT]: \"STEP SELECT\",\n    // [MSG_SW_STEPINCDEC]: \"STEP INC DEC\",\n\n\n    // [MSG_ENC_CC]: \"CC\",\n    // [MSG_ENC_MIDICC_REL]: \"CC REL\",\n    // [MSG_ENC_NRPNC]: \"MIDI NRPN Coarse\",\n    // [MSG_ENC_NRPNF]: \"MIDI NRPN Fine\",\n    // [MSG_ENC_PITCH]: \"Pitch Bend\",\n    // [MSG_ENC_ATCHAN]: \"AT CHAN\",\n    // [MSG_ENC_PROGRAM]: \"PRG\",\n    // [MSG_ENC_PRESETSELECT]: \"PRESET SEL\",\n    // [MSG_ENC_STEPSELECT]: \"STEP SEL\",\n};\n\n\nexport const MSG_TYPES_FULLNAME_MIDI_SORTED = sortObject(MSG_TYPES_FULLNAME_MIDI);\n\n\n\n\nexport const MSG_TYPES_DATA_HELP = {\n\n    [MSG_AD_MIDICC]: [\"\", \"\", \"\"],\n    [MSG_AD_NRPNC]: [\"\", \"\", \"\"],\n    [MSG_AD_NRPNF]: [\"\", \"\", \"\"],\n    [MSG_AD_PITCH]: [\"\", \"\", \"\"],\n    [MSG_AD_ATCHAN]: [\"\", \"\", \"\"],\n    [MSG_DAWFUNC]: [\"function\", \"not used\", \"not used\"],\n    [MSG_CTRL_OFF]: [\"\", \"\", \"\"],\n\n    [MSG_SW_MIDI_CC_TGGLE]: [\"controller\", \"value 1\", \"value 2\"],\n    [MSG_SW_MIDI_CC]: [\"controller\", \"down\", \"up\"],\n    [MSG_SW_MIDI_CC_STEP]: [\"controller\", \"start\", \"end\"],\n    [MSG_SW_NOTE]: [\"note\", \"velocity\", \"not used\"],\n    [MSG_SW_NOTE_TGGLE]: [\"note\", \"velocity\", \"not used\"],\n    [MSG_SW_PRG_BANK]: [\"program\", \"bank LSB\", \"bank MSB\"],\n    [MSG_SW_PRG_STEP]: [\"not used\", \"start\", \"end\"],\n    [MSG_SW_NRPN_COARSE]: [\"value\", \"NRPN LSB\", \"NRPN MSB\"],\n    [MSG_SW_NRPN_FINE]: [\"value\", \"NRPN LSB\", \"NRPN MSB\"],\n    [MSG_SW_MMC]: [\"device\", \"command\", \"not used\"],\n    [MSG_SW_RELAY]: [\"mode\", \"relay #\", \"not used\"],\n    [MSG_SW_PRESET_SELECT]: [\"preset\", \"not used\", \"not used\"],\n    [MSG_SW_PRESET_INC_DEC]: [\"inc/dec\", \"not used\", \"not used\"],\n    [MSG_SW_STEP_SELECT]: [\"target\", \"step\", \"not used\"],\n    [MSG_SW_STEP_INC_DEC]: [\"target\", \"inc/dec\", \"not used\"],\n\n    [MSG_ENC_CC]: [\"\", \"\", \"\"],\n    [MSG_ENC_MIDICC_REL]: [\"\", \"\", \"\"],\n    [MSG_ENC_NRPNC]: [\"\", \"\", \"\"],\n    [MSG_ENC_NRPNF]: [\"\", \"\", \"\"],\n    [MSG_ENC_PITCH]: [\"\", \"\", \"\"],\n    [MSG_ENC_ATCHAN]: [\"\", \"\", \"\"],\n    [MSG_ENC_PROGRAM]: [\"\", \"\", \"\"],\n    [MSG_ENC_PRESETSELECT]: [\"\", \"\", \"\"],\n    [MSG_ENC_STEPSELECT]: [\"\", \"\", \"\"],\n\n    [MSG_LOAD_CC]: [\"controller\", \"value\", \"not used\"]\n};\n\n\n\nexport const CONTROL_ELEMENT = {\n    // 0x00: \"\",\n\n    0x01: \"step 1: channel\",\n    0x02: \"step 1: message type\",\n    0x03: \"step 1: data 1\",\n    0x04: \"step 1: data 2\",\n    0x05: \"step 1: data 3\",\n    0x06: \"step 1: step active\",\n\n    0x07: \"step 2: channel\",\n    0x08: \"step 2: message type\",\n    0x09: \"step 2: data 1\",\n    0x0A: \"step 2: data 2\",\n    0x0B: \"step 2: data 3\",\n    0x0C: \"step 2: step active\",\n\n    0x0D: \"step 3: channel\",\n    0x0E: \"step 3: message type\",\n    0x0F: \"step 3: data 1\",\n    0x10: \"step 3: data 2\",\n    0x11: \"step 3: data 3\",\n    0x12: \"step 3: step active\",\n\n    0x13: \"step 4: channel\",\n    0x14: \"step 4: message type\",\n    0x15: \"step 4: data 1\",\n    0x16: \"step 4: data 2\",\n    0x17: \"step 4: data 3\",\n    0x18: \"step 4: step active\",\n\n    0x19: \"step 5: channel\",\n    0x1A: \"step 5: message type\",\n    0x1B: \"step 5: data 1\",\n    0x1C: \"step 5: data 2\",\n    0x1D: \"step 5: data 3\",\n    0x1E: \"step 5: step active\",\n\n    0x1F: \"step 6: channel\",\n    0x20: \"step 6: message type\",\n    0x21: \"step 6: data 1\",\n    0x22: \"step 6: data 2\",\n    0x23: \"step 6: data 3\",\n    0x24: \"step 6: step active\",\n\n    // 0x25: \"\",\n    // 0x26: \"\",\n    // 0x27: \"\",\n    // 0x28: \"\",\n    // 0x29: \"\",\n    // 0x2A: \"\",\n    // 0x2B: \"\",\n    // 0x2C: \"\",\n    // 0x2D: \"\",\n    // 0x2E: \"\",\n    // 0x2F: \"\",\n    // 0x30: \"\",\n    // 0x31: \"\",\n    // 0x32: \"\",\n    // 0x33: \"\",\n    // 0x34: \"\",\n    // 0x35: \"\",\n    // 0x36: \"\",\n    // 0x37: \"\",\n    // 0x38: \"\",\n    // 0x39: \"\",\n    // 0x3A: \"\",\n    // 0x3B: \"\",\n    // 0x3C: \"\",\n    // 0x3D: \"\",\n    // 0x3E: \"\",\n    // 0x3F: \"\",\n    // 0x40: \"\",\n    // 0x41: \"\",\n    // 0x42: \"\",\n    // 0x43: \"\",\n\n    0x40: \"control mode\",\n    0x41: \"LED MIDI Ctrl\",\n    0x42: \"LED On Color\",\n    0x43: \"LED Off Color\",\n\n    // 0x44: \"\",\n    // 0x45: \"\",\n    // 0x46: \"\",\n    // 0x47: \"\",\n    // 0x48: \"\",\n    // 0x49: \"\",\n    // 0x4A: \"\",\n    // 0x4B: \"\",\n    // 0x4C: \"\",\n    // 0x4D: \"\",\n    // 0x4E: \"\",\n    // 0x4F: \"\",\n    // 0x50: \"\",\n    // 0x51: \"\",\n    // 0x52: \"\",\n    // 0x53: \"\",\n    // 0x54: \"\",\n    // 0x55: \"\",\n    // 0x56: \"\",\n    // 0x57: \"\",\n    // 0x58: \"\",\n    // 0x59: \"\",\n    // 0x5A: \"\",\n    // 0x5B: \"\",\n    // 0x5C: \"\",\n    // 0x5D: \"\",\n    // 0x5E: \"\",\n    // 0x5F: \"\",\n\n    // 0x60: \"control mode\",\n    // 0x61: \"LED MIDI Ctrl\",\n    // 0x62: \"LED On Color\",\n    // 0x63: \"LED Off Color\",\n\n    // 0x64: \"\",\n    // 0x65: \"\",\n    // 0x66: \"\",\n    // 0x67: \"\",\n    // 0x68: \"\",\n    // 0x69: \"\",\n    // 0x6A: \"\",\n    // 0x6B: \"\",\n    // 0x6C: \"\",\n    // 0x6D: \"\",\n    // 0x6E: \"\",\n    // 0x6F: \"\",\n    // 0x70: \"\",\n    // 0x71: \"\",\n    // 0x72: \"\",\n    // 0x73: \"\",\n    // 0x74: \"\",\n    // 0x75: \"\",\n    // 0x76: \"\",\n    // 0x77: \"\",\n    // 0x78: \"\",\n    // 0x79: \"\",\n    // 0x7A: \"\",\n    // 0x7B: \"\",\n    // 0x7C: \"\",\n    // 0x7D: \"\",\n    // 0x7E: \"\",\n\n    0x7F: \"ALL\"\n};\n\nexport const MIDI_ELEMENT = {\n    // 0x00: \"\",\n    0x01: \"setting 1: channel\",\n    0x02: \"setting 1: message type\",\n    0x03: \"setting 1: data 1\",\n    0x04: \"setting 1: data 2\",\n    0x05: \"setting 1: data 3\",\n    // 0x06: \"\",\n\n    0x07: \"setting 2: channel\",\n    0x08: \"setting 2: message type\",\n    0x09: \"setting 2: data 1\",\n    0x0A: \"setting 2: data 2\",\n    0x0B: \"setting 2: data 3\",\n    // 0x0C: \"\",\n\n    0x0D: \"setting 3: channel\",\n    0x0E: \"setting 3: message type\",\n    0x0F: \"setting 3: data 1\",\n    0x10: \"setting 3: data 2\",\n    0x11: \"setting 3: data 3\",\n    // 0x12: \"\",\n\n    0x13: \"setting 4: channel\",\n    0x14: \"setting 4: message type\",\n    0x15: \"setting 4: data 1\",\n    0x16: \"setting 4: data 2\",\n    0x17: \"setting 4: data 3\",\n    // 0x18: \"\",\n\n    0x19: \"setting 5: channel\",\n    0x1A: \"setting 5: message type\",\n    0x1B: \"setting 5: data 1\",\n    0x1C: \"setting 5: data 2\",\n    0x1D: \"setting 5: data 3\",\n    // 0x1E: \"\",\n\n    0x1F: \"setting 6: channel\",\n    0x20: \"setting 6: message type\",\n    0x21: \"setting 6: data 1\",\n    0x22: \"setting 6: data 2\",\n    0x23: \"setting 6: data 3\",\n    // 0x24: \"\",\n\n    0x25: \"setting 7: channel\",\n    0x26: \"setting 7: message type\",\n    0x27: \"setting 7: data 1\",\n    0x28: \"setting 7: data 2\",\n    0x29: \"setting 7: data 3\",\n    // 0x2A: \"\",\n\n    0x2B: \"setting 8: channel\",\n    0x2C: \"setting 8: message type\",\n    0x2D: \"setting 8: data 1\",\n    0x2E: \"setting 8: data 2\",\n    0x2F: \"setting 8: data 3\",\n    0x30: \"\",\n\n    0x31: \"setting 9: channel\",\n    0x32: \"setting 9: message type\",\n    0x33: \"setting 9: data 1\",\n    0x34: \"setting 9: data 2\",\n    0x35: \"setting 9: data 3\",\n    // 0x36: \"\",\n\n    0x37: \"setting 10: channel\",\n    0x38: \"setting 10: message type\",\n    0x39: \"setting 10: data 1\",\n    0x3A: \"setting 10: data 2\",\n    0x3B: \"setting 10: data 3\",\n    // 0x3C: \"\",\n\n    0x3D: \"setting 11: channel\",\n    0x3E: \"setting 11: message type\",\n    0x3F: \"setting 11: data 1\",\n    0x40: \"setting 11: data 2\",\n    0x41: \"setting 11: data 3\",\n    // 0x42: \"\",\n\n    0x43: \"setting 12: channel\",\n    0x44: \"setting 12: message type\",\n    0x45: \"setting 12: data 1\",\n    0x46: \"setting 12: data 2\",\n    0x47: \"setting 12: data 3\",\n    // 0x48: \"\",\n\n    0x49: \"setting 13: channel\",\n    0x4A: \"setting 13: message type\",\n    0x4B: \"setting 13: data 1\",\n    0x4C: \"setting 13: data 2\",\n    0x4D: \"setting 13: data 3\",\n    // 0x4E: \"\",\n\n    0x4F: \"setting 14: channel\",\n    0x50: \"setting 14: message type\",\n    0x51: \"setting 14: data 1\",\n    0x52: \"setting 14: data 2\",\n    0x53: \"setting 14: data 3\",\n    // 0x54: \"\",\n\n    0x55: \"setting 15: channel\",\n    0x56: \"setting 15: message type\",\n    0x57: \"setting 15: data 1\",\n    0x58: \"setting 15: data 2\",\n    0x59: \"setting 15: data 3\",\n    // 0x5A: \"\",\n\n    0x5B: \"setting 16: channel\",\n    0x5C: \"setting 16: message type\",\n    0x5D: \"setting 16: data 1\",\n    0x5E: \"setting 16: data 2\",\n    0x5F: \"setting 16: data 3\",\n    // 0x60: \"\",\n\n    // 0x61: \"\",\n    // 0x62: \"\",\n    // 0x63: \"\",\n    // 0x64: \"\",\n    // 0x65: \"\",\n    // 0x66: \"\",\n    // 0x67: \"\",\n    // 0x68: \"\",\n    // 0x69: \"\",\n    // 0x6A: \"\",\n    // 0x6B: \"\",\n    // 0x6C: \"\",\n    // 0x6D: \"\",\n    // 0x6E: \"\",\n    // 0x6F: \"\",\n    // 0x70: \"\",\n    // 0x71: \"\",\n    // 0x72: \"\",\n    // 0x73: \"\",\n    // 0x74: \"\",\n    // 0x75: \"\",\n    // 0x76: \"\",\n    // 0x77: \"\",\n    // 0x78: \"\",\n    // 0x79: \"\",\n    // 0x7A: \"\",\n    // 0x7B: \"\",\n    // 0x7C: \"\",\n    // 0x7D: \"\",\n    // 0x7E: \"\",\n\n    0x7F: \"ALL\"\n};\n\nexport const COLORS = {\n    0x00 : \"Off\",\n    0x01 : \"1A Pink\",\n    0x02 : \"1B Dim Pink\",\n    0x03 : \"2A Red\",\n    0x04 : \"2B Dim Red\",\n    0x05 : \"3A Orange\",\n    0x06 : \"3B Dim Orange\",\n    0x07 : \"4A Amber\",\n    0x08 : \"4B Dim Amber\",\n    0x09 : \"5A Yellow\",\n    0x0A : \"5B Dim Yellow\",\n    0x0B : \"6A Lime\",\n    0x0C : \"6B Dim Lime\",\n    0x0D : \"7A Green\",\n    0x0E : \"7B Dim Green\",\n    0x0F : \"8A Teal\",\n    0x10 : \"8B Dim Teal\",\n    0x11 : \"9A Blue\",\n    0x12 : \"9B Dim Blue\",\n    0x13 : \"10A Lavender\",\n    0x14 : \"10B Dim Lavender\",\n    0x15 : \"11A Purple\",\n    0x16 : \"11B Dim Purple\",\n    0x17 : \"12A White\",\n    0x18 : \"12B Dim White\",\n};\n\n\nexport const CONTROL_MODE_ELEMENT = 0x60;\n\nexport const CONTROL_MODE_ALL = 0x00;\nexport const CONTROL_MODE_EXT_STEP = 0x01;\nexport const CONTROL_MODE_SEQUENCE = 0x02;\n\nexport const CONTROL_MODES = {\n    [CONTROL_MODE_ALL]: \"All\",\n    [CONTROL_MODE_EXT_STEP]: \"External Step Select\",\n    [CONTROL_MODE_SEQUENCE]: \"Sequence\",\n};\n\n\nexport function checksum(bytes) {\n    if (bytes === null || bytes === undefined || bytes.length === 0) return 128;\n    let sum = Uint8Array.from(bytes).reduce((previousValue, currentValue) => previousValue + currentValue);\n    return 128 - (sum % 128);\n}\n\n\n/**\n * return the sysex message to send to the Pacer to request some data\n */\nexport function requestPreset(index) {\n    let msg = [COMMAND_GET, TARGET_PRESET, index, CONTROL_ALL];\n    let cs = checksum(msg);\n    msg.push(cs);\n    return SYSEX_HEADER.concat(msg);\n}\n\n/**\n * return the sysex message to send to the Pacer to request some data\n */\nexport function requestPresetObj(index, obj) {\n    // TODO: replace numbers by constants\n    let msg = [\n        COMMAND_GET,\n        TARGET_PRESET,\n        index,      // preset #\n        obj         // (control)\n    ];\n    let cs = checksum(msg);\n    msg.push(cs);\n    return SYSEX_HEADER.concat(msg);\n}\n\n// ============================================================================\n\n/**\n * Example: 23 => \"D5\"\n * @param index\n * @returns {string}\n */\nexport const presetIndexToXY = index => {\n    if (index === 0) return \"CUR\";\n    //TODO: check valid range\n    let b = Math.floor((index - 1) / 6);\n    let i = (index - 1) % 6 + 1;\n    return String.fromCharCode(b + 65) + i.toString();\n};\n\n/**\n * Exampe: \"D5\" => 23\n * @param xy\n * @returns {number}\n */\nexport const presetXYToIndex = xy => {\n    // if (xy === \"CUR\") return 0;\n    //TODO: check valid range\n    let bank = xy.charCodeAt(0) - 65;\n    let num = parseInt(xy[1], 10);\n    return bank * 6 + num;\n};\n","import {NEKTAR_TECHNOLOGY_INC} from \"midi-manufacturers\";\nimport {h, hs} from \"./hexstring\";\nimport {\n    TARGETS,\n    CONTROLS,\n    checksum,\n    SYSEX_HEADER,\n    COMMAND_SET,\n    COMMAND_GET,\n    CONTROL_NAME,\n    CONTROL_STOMPSWITCH_1,\n    CONTROL_STOMPSWITCH_A,\n    CONTROL_EXPRESSION_PEDAL_1,\n    CONTROL_MIDI,\n    CONTROL_STOMPSWITCH_6,\n    CONTROL_FOOTSWITCH_4, CONTROL_EXPRESSION_PEDAL_2, TARGET_PRESET, CONTROL_MODE_ELEMENT\n} from \"../pacer\";\nexport const SYSEX_START = 0xF0;\nexport const SYSEX_END = 0xF7;\n\n// offsets from start of sysex data, right after SYSEX_START\nconst CMD = 4;\nconst TGT = 5;\nconst IDX = 6;\nconst OBJ = 7;\nconst ELM = 8;\n\n/**\n * https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge/34749873#34749873\n * Simple object check.\n * @param item\n * @returns {boolean}\n */\nfunction isObject(item) {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\n/**\n * https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge/34749873#34749873\n * Deep merge two objects.\n * @param target\n * @param ...sources\n */\nexport function mergeDeep(target, ...sources) {\n    if (!sources.length) return target;\n    const source = sources.shift();\n\n    if (isObject(target) && isObject(source)) {\n        for (const key in source) {\n            if (isObject(source[key])) {\n                if (!target[key]) Object.assign(target, { [key]: {} });\n                mergeDeep(target[key], source[key]);\n            } else {\n                Object.assign(target, { [key]: source[key] });\n            }\n        }\n    }\n\n    return mergeDeep(target, ...sources);\n}\n\n/**\n *\n * @param data Uint8Array\n */\nfunction isSysexData(data) {\n    // let view = new Uint8Array(data);\n    // if (view[0] !== SYSEX_START) return false;\n    // if (view[view.byteLength - 1] !== SYSEX_END) return false;\n    if (data[0] !== SYSEX_START) return false;\n    if (data[data.byteLength - 1] !== SYSEX_END) return false;\n    return true;\n}\n\n/*\nfunction getManufacturerName(id) {\n    return id in midi_name ? midi_name[id] : \"manufacturer unknown\";\n}\n*/\n\nfunction getControlStep(data) {\n\n    // console.log(\"getControlStep\", hs(data));\n\n    // 01 01 0F 00      midi channel\n    // 02 01 47 00      message type\n    // 03 01 44 00      data 1\n    // 04 01 55 00      data 2\n    // 05 01 66 00      data 3\n    // 06 01 01         active\n\n    // the second byte is the length of the data that follows\n\n    //FIXME: use length\n\n    return {\n        index: (data[0] - 1) / 6 + 1,\n        config: {\n            channel: data[2],\n            msg_type: data[6],\n            data: [data[10], data[14], data[18]],\n            active: data[22]\n        }\n    };\n}\n\n\nfunction getControlMode(data) {\n    return {\n        control_mode: data[1]\n    };\n}\n\n\nfunction getControlLED(data) {\n\n    // console.log(\"getControlLED\", hs(data));\n\n    // 54 01 00     54 == LED, 01 == 1 byte of data, 00 = data itself\n\n    //\n    // 40 01 00 00\n    // 41 01 7F 00\n    // 42 01 7F 00\n    // 43 01 00\n    // 68 F7\n\n    // 0x40\t<data>-MIDICtrl\tStep 1: LED MIDI Ctrl\n    // 0x41\t<data>-Color\tStep 1: LED Active Color\n    // 0x42\t<data>-Color\tStep 1: LED Inactive Color\n    // 0x43\t<data>-LEDNum\tStep 1: LED num\n\n    let cfg = {steps:{}};\n\n    let data_len;\n    let bytes;\n    let step;\n\n    let i = 0;\n    while (i<data.length) {\n        let d = data[i];\n        // let step = \"\" + ((d - 0x40) / 4 + 1);\n        // if (i===0) console.log(`getControlLED: [${h(d)}], step ${step}`);\n        if (i===0) {\n            step = \"\" + ((d - 0x40) / 4 + 1);\n            // console.log(`getControlLED: [${h(d)}], step ${step}`);\n        }\n        // if (!(step in cfg.steps)) cfg.steps[step] = {led:{}};\n        if (!(step in cfg.steps)) cfg.steps[step] = {};\n        switch (d) {\n            case 0x40:\n            case 0x44:\n            case 0x48:\n            case 0x4C:\n            case 0x50:\n            case 0x54:\n                i++;\n                data_len = data[i];\n                // console.log(`getControlLED: ${data_len} data byte(s)`);\n                i++;\n                if (data_len === 1) {\n                    bytes = data[i];\n                } else {\n                    bytes = Array.from(data.slice(i, i + data_len));\n                }\n                // console.log(`getControlLED: data bytes=[${hs(bytes)}]`);\n                i += data_len;\n                // cfg.steps[step][\"led\"].midi_ctrl = bytes;\n                cfg.steps[step][\"led_midi_ctrl\"] = bytes;\n                break;\n            case 0x41:\n            case 0x45:\n            case 0x49:\n            case 0x4D:\n            case 0x51:\n            case 0x55:\n                i++;\n                data_len = data[i];\n                // console.log(`getControlLED: ${data_len} data byte(s)`);\n                i++;\n                if (data_len === 1) {\n                    bytes = data[i];\n                } else {\n                    bytes = Array.from(data.slice(i, i + data_len));\n                }\n                // console.log(`getControlLED: data bytes=[${hs(bytes)}]`);\n                i += data_len;\n                // cfg.steps[step][\"led\"].active_color = bytes;\n                cfg.steps[step][\"led_active_color\"] = bytes;\n                break;\n            case 0x42:\n            case 0x46:\n            case 0x4A:\n            case 0x4E:\n            case 0x52:\n            case 0x56:\n                i++;\n                data_len = data[i];\n                // console.log(`getControlLED: ${data_len} data byte(s)`);\n                i++;\n                if (data_len === 1) {\n                    bytes = data[i];\n                } else {\n                    bytes = Array.from(data.slice(i, i + data_len));\n                }\n                // console.log(`getControlLED: data bytes=[${hs(bytes)}]`);\n                i += data_len;\n                // cfg.steps[step][\"led\"].inactive_color = bytes;\n                cfg.steps[step][\"led_inactive_color\"] = bytes;\n                break;\n            case 0x43:\n            case 0x47:\n            case 0x4B:\n            case 0x4F:\n            case 0x53:\n            case 0x57:\n                i++;\n                data_len = data[i];\n                // console.log(`getControlLED: ${data_len} data byte(s)`);\n                i++;\n                if (data_len === 1) {\n                    bytes = data[i];\n                } else {\n                    bytes = Array.from(data.slice(i, i + data_len));\n                }\n                // console.log(`getControlLED: data bytes=[${hs(bytes)}]`);\n                i += data_len;\n                // cfg.steps[step][\"led\"].num = bytes;\n                cfg.steps[step][\"led_num\"] = bytes;\n                break;\n            case 0x7F:\n                // console.log(`getControlLED: end if data`);\n                i = data.length;\n                break;\n            default:\n                // console.log(`getControlLED: ignore byte ${h(d)}`);\n                i++;\n                break;\n        }\n    }\n\n    // console.log(\"getControlLED\", cfg);\n    return cfg;\n}\n\n\nfunction getMidiSetting(data) {\n\n    // console.log(\"getMidiSetting\", hs(data));\n\n    // 01 01 00 00\n    // 02 01 61 00\n    // 03 01 00 00\n    // 04 01 00 00\n    // 05 01 00 0A\n\n    return {\n        index: (data[0] - 1) / 6 + 1,       // e.g.: 7 --> 1, ..., 0x2B 43 --> 8\n        config: {\n            channel: data[2],\n            msg_type: data[6],\n            data: [data[10], data[14], data[18]]\n        }\n    };\n}\n\n\nfunction getPresetName(data) {\n\n    console.log(\"getPresetName\", hs(data));\n\n    // 01 05 4E 4F 54 45 53 69\n\n    const len = data[1];\n\n    return String.fromCharCode.apply(null, data.slice(2, 2 + len));\n\n/*\n    return {\n        index: (data[0] - 1) / 6 + 1,       // e.g.: 7 --> 1, ..., 0x2B 43 --> 8\n        config: {\n            channel: data[2],\n            msg_type: data[6],\n            data: [data[10], data[14], data[18]]\n        }\n    };\n*/\n}\n\n\n/**\n * Parse a single sysex message\n * @param data\n * @returns {*}\n */\nfunction parseSysexMessage(data) {\n\n    // console.log(\"parseSysex\", hs(data));\n\n    //TODO: verify checksum\n\n    const message = {};\n\n    let cmd = data[CMD];\n    let tgt = data[TGT];\n    let idx = data[IDX];\n    let obj = data[OBJ];\n\n    switch (cmd) {\n        case COMMAND_SET:\n            break;\n        case COMMAND_GET:\n            break;\n        default:\n            console.warn(`parseSysexMessage: invalid command (${h(cmd)})`);\n            return null;\n    }\n\n    if (!(tgt in TARGETS)) {\n        console.warn(\"parseSysexMessage: invalid target\", h(tgt), tgt, TARGETS);\n        return null;\n    }\n\n    message[tgt] = {};\n\n    if (idx >= 0x19 && idx <= 0x7E) {\n        console.warn(\"parseSysexMessage: invalid/ignored idx\", idx);\n    }\n\n    message[tgt][idx] = {};\n\n    if (!(obj in CONTROLS)) {\n        console.warn(\"parseSysexMessage: invalid/ignored object\", h(obj));\n        return null;\n    }\n\n    let obj_type;\n    if (obj === CONTROL_NAME) {\n        obj_type = \"name\";\n    } else if ((obj >= CONTROL_STOMPSWITCH_1 && obj <= CONTROL_STOMPSWITCH_6) ||\n        (obj >= CONTROL_STOMPSWITCH_A && obj <= CONTROL_FOOTSWITCH_4) ||\n        (obj >= CONTROL_EXPRESSION_PEDAL_1 && obj <= CONTROL_EXPRESSION_PEDAL_2)) {\n        obj_type = \"control\";\n    } else if (obj === CONTROL_MIDI) {\n        obj_type = \"midi\";\n    } else {\n        console.warn('parseSysexMessage: invalid obj', obj);\n        return null;\n    }\n\n    // console.log(`target=${TARGET[tgt]} (${h(tgt)}), idx=${h(idx)}, object=${OBJECT[obj]} (${h(obj)}), type=${obj_type}`);\n    // console.log(`${TARGETS[tgt]} ${h(idx)} : ${CONTROLS[obj]} ${obj_type}`);\n\n    if (obj_type === \"name\") {\n\n        // NAME\n        message[tgt][idx][\"name\"] = getPresetName(data.slice(ELM));\n\n    }\n\n    if (obj_type === \"control\") {\n\n        message[tgt][idx][\"controls\"] = {\n            [obj]: {\n                steps: {}\n            }\n        };\n\n        // which element?\n        let e = data[ELM];\n\n        if (e >= 0x01 && e <= 0x24) {\n\n            // STEPS\n            if (data.length > ELM+22) {\n                let s = getControlStep(data.slice(ELM, ELM + 23));\n                message[tgt][idx][\"controls\"][obj][\"steps\"][s.index] = s.config;\n            } else {\n                console.warn(`parseSysexMessage: data does not contains steps. data.length=${data.length}`, hs(data));\n            }\n\n        } else if (e === CONTROL_MODE_ELEMENT) {\n\n            // CONTROL MODE\n            // console.log('parseSysexMessage: CONTROL MODE');\n\n            let mode_cfg = getControlMode(data.slice(ELM, data.length-1));\n            message[tgt][idx][\"controls\"][obj] = mergeDeep(message[tgt][idx][\"controls\"][obj], mode_cfg);\n\n        } else if (e >= 0x40 && e <= 0x57) {\n\n            // LED\n            // console.log('parseSysexMessage: LED');\n\n            let led_cfg = getControlLED(data.slice(ELM, data.length-1));\n            message[tgt][idx][\"controls\"][obj] = mergeDeep(message[tgt][idx][\"controls\"][obj], led_cfg);\n\n        } else if (e === 0x7F) {\n\n            // ALL\n            // console.log('parseSysexMessage: ALL');\n\n        } else {\n            console.warn(`parseSysexMessage: unknown element: ${h(e)}`);\n            return null;\n        }\n\n    }\n\n    if (obj_type === \"midi\") {\n\n        // F0 00 01 77 7F 01 01 01\n        // 7E\n        //\n        // 25 01 00 00\n        // 26 01 61 00\n        // 27 01 00 00\n        // 28 01 00 00\n        // 29 01 00 56\n        //\n        // F7\n\n        // F0 00 01 77 7F 01 01 05\n        // 7E\n        //\n        // 07 01 02 00\n        // 08 01 65 00\n        // 09 01 7B 00\n        // 0A 01 7F 00\n        // 0B 01 00 68\n        //\n        // F7\n\n        message[tgt][idx][\"midi\"] = {\n            // settings: {}\n        };\n\n        // which element?\n        let e = data[ELM];\n\n        if (e >= 0x01 && e <= 0x60) {\n\n            // if (e === 0x06 || e === 0x06 || e === 0x06 || e === 0x06 || e === 0x06 || )\n\n            // console.log(ELM, data.length);  // ELM == 8\n\n            // SETTINGS\n            if (data.length > ELM+19) {\n                let s = getMidiSetting(data.slice(ELM, ELM + 20));\n                message[tgt][idx][\"midi\"][s.index] = s.config;\n            } else {\n                console.warn(`parseSysexMessage: data does not contains steps. data.length=${data.length}`, hs(data));\n            }\n\n        } else {\n            console.warn(`parseSysexMessage: unknown element: ${h(e)}`);\n            return null;\n        }\n\n    }\n\n    // console.log('MESSAGE', message);\n    return message;\n\n} // parseSysex()\n\n\n/**\n * Parse a sysex dump. A dump can contains multiple sysex messages.\n * Return a array of presets.\n * @param data ArrayBuffer\n */\nfunction parseSysexDump(data) {\n\n    // console.log(\"parseSysexDump\", hs(data));\n\n    if (data === null) return null;\n\n    let presets = {};   // Collection of presets. The key is the preset's index. The value is the preset.\n    // let global = {};    // global conf\n\n    let i = 0;\n    let cont = true;\n    while (cont) {\n\n        i = data.indexOf(SYSEX_START, i);\n        if (i < 0) break;\n\n        i++;\n\n        let k = data.indexOf(SYSEX_END, i);\n\n        let manufacturer_id = (Array.from(data.slice(i, i+3)).map(n => h(n))).join(\" \");    // Array.from() is necessary to get a non-typed array\n        if (manufacturer_id !== NEKTAR_TECHNOLOGY_INC) {\n            console.log(\"parseSysexDump: file does not contain a Nektar Pacer patch\", i, k, manufacturer_id, \"-\", hs(data));\n            return null;\n        }\n\n        if (data[i+3] !== 0x7F) {\n            console.warn(`parseSysexDump: invalid byte after manufacturer id: ${data[i+1 +3]}`);\n            return null;\n        }\n\n        let config = parseSysexMessage(data.slice(i, k));  // data.slice(i, k) are the data between SYSEX_START and SYSEX_END\n\n        if (config) {\n            mergeDeep(presets, config);\n        }\n\n    } // while\n\n    // console.log(JSON.stringify(presets));\n\n    return presets;\n}\n\n\n/**\n * Return an array of sysex messages to update a control's steps.\n * @param presetIndex\n * @param controlId\n * @param steps\n * @returns {*}\n */\nfunction buildControlStepSysex(presetIndex, controlId, steps) {\n\n    // console.log(`buildControlStepSysex(${presetIndex}, ${controlId}, ...)`);\n\n    let msgs = [];\n\n    for (let i of Object.keys(steps)) {\n\n        let step = steps[i];\n\n        if (!step.changed) continue;\n\n        // start with command and target:\n        let msg = [\n            COMMAND_SET,\n            TARGET_PRESET,\n            presetIndex,\n            controlId];\n\n        // add data:\n        msg.push((i-1)*6 + 1, 1, step.channel, 0x00);\n        msg.push((i-1)*6 + 2, 1, step.msg_type, 0x00);\n        msg.push((i-1)*6 + 3, 1, step.data[0], 0x00);\n        msg.push((i-1)*6 + 4, 1, step.data[1], 0x00);\n        msg.push((i-1)*6 + 5, 1, step.data[2], 0x00);\n        msg.push((i-1)*6 + 6, 1, step.active);\n\n        // add checksum:\n        msg.push(checksum(msg));\n\n        // inject header and add to list of messages:\n        msgs.push(SYSEX_HEADER.concat(msg));\n    }\n\n    // console.log(\"buildControlStepSysex\", msgs);\n\n    return msgs;\n}\n\nfunction buildControlModeSysex(presetIndex, controlId, mode) {\n\n    // console.log(`buildControlStepMode(${presetIndex}, ${controlId}, ...)`);\n\n    // start with command and target:\n    let msg = [\n        COMMAND_SET,\n        TARGET_PRESET,\n        presetIndex,\n        controlId,\n        CONTROL_MODE_ELEMENT,\n        0x01,   // 1 byte of data\n        mode\n    ];\n\n    // add checksum:\n    msg.push(checksum(msg));\n\n    // console.log(\"buildControlModeSysex\", msg);\n\n    // inject header and return the result:\n    return SYSEX_HEADER.concat(msg);\n}\n\n\nfunction getControlUpdateSysexMessages(presetIndex, controlId, data) {\n    let msgs = buildControlStepSysex(presetIndex, controlId, data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"steps\"]);\n    if (data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"changed\"]) {\n        msgs.push(buildControlModeSysex(presetIndex, controlId, data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"control_mode\"]));\n    }\n    return msgs;\n}\n\n\n\nfunction buildMidiSettingsSysex(presetIndex, settings) {\n\n    // console.log(`buildMidiSettingStepSysex(${presetIndex}, ...)`);\n\n    let msgs = [];\n\n    for (let i of Object.keys(settings)) {\n\n        let setting = settings[i];\n\n        if (!setting.changed) continue;\n\n        // start with command and target:\n        let msg = [\n            COMMAND_SET,\n            TARGET_PRESET,\n            presetIndex,\n            CONTROL_MIDI];\n\n        // add data:\n        msg.push((i-1)*6 + 1, 1, setting.channel, 0x00);\n        msg.push((i-1)*6 + 2, 1, setting.msg_type, 0x00);\n        msg.push((i-1)*6 + 3, 1, setting.data[0], 0x00);\n        msg.push((i-1)*6 + 4, 1, setting.data[1], 0x00);\n        msg.push((i-1)*6 + 5, 1, setting.data[2], 0x00);\n        msg.push((i-1)*6 + 6, 1, setting.active);\n\n        // add checksum:\n        msg.push(checksum(msg));\n\n        // inject header and add to list of messages:\n        msgs.push(SYSEX_HEADER.concat(msg));\n    }\n\n    // console.log(\"buildControlStepSysex\", msgs);\n\n    return msgs;\n}\n\n\nfunction buildPresetNameSysex(presetIndex, data) {\n\n    if (!data[TARGET_PRESET][presetIndex].changed) return null;\n\n    // start with command and target:\n    let msg = [\n        COMMAND_SET,\n        TARGET_PRESET,\n        presetIndex,\n        CONTROL_NAME,\n        0x00            // when setting the name this byte can be anything\n    ];\n\n    const s = data[TARGET_PRESET][presetIndex][\"name\"];\n\n    // add data:\n    msg.push(s.length);\n\n    for (let i=0; i < s.length; i++) {\n        msg.push(s.charCodeAt(i));\n    }\n\n    // add checksum:\n    msg.push(checksum(msg));\n\n    // inject header and return result:\n    return SYSEX_HEADER.concat(msg)\n}\n\n\nfunction getMidiSettingUpdateSysexMessages(presetIndex, data) {\n    return buildMidiSettingsSysex(presetIndex, data[TARGET_PRESET][presetIndex][\"midi\"]);\n}\n\n\nexport {\n    isSysexData,\n    parseSysexDump,\n    getControlUpdateSysexMessages,\n    getMidiSettingUpdateSysexMessages,\n    buildPresetNameSysex\n};\n\n","import WebMidi from \"webmidi\";\n\nfunction portById(id) {\n    let p = WebMidi.inputs.find(item => item.id === id);\n    if (p) {\n        return p;\n    } else {\n        return WebMidi.outputs.find(item => item.id === id);\n    }\n}\n\nfunction inputById(id) {\n    return WebMidi.inputs.find(item => item.id === id);\n}\n\nfunction outputById(id) {\n    return WebMidi.outputs.find(item => item.id === id);\n}\n\n/**\n * Return webmidi input name from input id\n * @param id\n */\nfunction inputName(id) {\n    let i = inputById(id);\n    return i ? i.name : null;\n}\n\nfunction outputName(id) {\n    let i = outputById(id);\n    return i ? i.name : null;\n}\n\n\nexport {\n    portById,\n    inputById,\n    inputName,\n    outputName,\n    outputById\n}\n","import React from \"react\";\nimport \"./DumpSysex.css\";\nimport {\n    MSG_SW_NOTE,\n    CONTROLS,\n    TARGET_PRESET,\n    MSG_TYPES,\n    presetIndexToXY\n} from \"../pacer\";\nimport {h, hs} from \"../utils/hexstring\";\nimport \"./DumpSysex.css\";\nimport * as Note from \"tonal-note\";\n\nconst PresetName = ({ name }) => {\n    console.log(\"presetname\", name);\n    return (\n    <div className=\"dump-preset-name\">Preset name: {name}</div>\n    );\n};\n\n\nconst MidiTable = ({ settings }) => {\n    if (settings === null || settings === undefined) return null;\n    return (\n        <div className=\"dump-control\">\n            <table>\n                <tbody>\n                <tr>\n                    <td colSpan={6} className=\"name\">MIDI settings</td>\n                </tr>\n                {Object.keys(settings).map(i => {\n                    let t = MSG_TYPES[settings[i][\"msg_type\"]];\n                    if (settings[i][\"msg_type\"] === MSG_SW_NOTE) {\n                        t = t + ' ' + Note.fromMidi(settings[i][\"data\"][0], true) + ' vel. ' + settings[i][\"data\"][1];\n                    }\n                    return (\n                        <tr key={i}>\n                            <td>settings {i}</td>\n                            <td>ch. {h(settings[i][\"channel\"])}</td>\n                            <td>msg {h(settings[i][\"msg_type\"])}</td>\n                            <td>{t}</td>\n                            <td>{hs(settings[i][\"data\"])}</td>\n                            {/*<td>{settings[i][\"msg_type\"] === MSG_SW_NOTE ? Note.fromMidi(settings[i][\"data\"][0], true) : \"  \"}</td>*/}\n                            <td>{settings[i][\"active\"] ? \"active\" : \"OFF\"}</td>\n                        </tr>\n                    )}\n                )}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nconst MidiSettings = ({ settings }) => {\n    if (settings === null) return null;\n    return (\n        <div>\n            <MidiTable settings={settings} />\n        </div>\n    );\n};\n\nconst ControlTable = ({ obj, config }) => {\n    if (config === null || config === undefined) return null;\n    return (\n        <div className=\"dump-control\">\n            <table>\n                <tbody>\n                    <tr>\n                        <td colSpan={6} className=\"name\">{CONTROLS[obj]}</td>\n                    </tr>\n                    {Object.keys(config[\"steps\"]).map(i => {\n                        let t = MSG_TYPES[config[\"steps\"][i][\"msg_type\"]];\n                        if (config[\"steps\"][i][\"msg_type\"] === MSG_SW_NOTE) {\n                            t = t + ' ' + Note.fromMidi(config[\"steps\"][i][\"data\"][0], true) + ' vel. ' + config[\"steps\"][i][\"data\"][1];\n                        }\n                        return (\n                            <tr key={`${obj}.${i}`}>\n                                <td>step {i}</td>\n                                <td>ch. {h(config[\"steps\"][i][\"channel\"])}</td>\n                                <td>msg {h(config[\"steps\"][i][\"msg_type\"])}</td>\n                                <td>{t}</td>\n                                <td>{hs(config[\"steps\"][i][\"data\"])}</td>\n                                {/*<td>{config[\"steps\"][i][\"msg_type\"] === MSG_SW_NOTE ? Note.fromMidi(config[\"steps\"][i][\"data\"][0], true) : \"  \"}</td>*/}\n                                <td>{config[\"steps\"][i][\"active\"] ? \"active\" : \"OFF\"}</td>\n                            </tr>\n                        )}\n                    )}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nconst Controls = ({ controls }) => {\n    if (controls === null || controls === undefined) return null;\n    return (\n        <div className=\"dump-controls\">\n            {Object.keys(controls).map(obj => <ControlTable key={obj} obj={obj} config={controls[obj]} />)}\n        </div>\n    );\n};\n\nconst Preset = ({ index, data }) => {\n    if (data === null || data === undefined) return null;\n    return (\n        <div>\n            <h3>Preset {presetIndexToXY(parseInt(index, 10))} (#{index})</h3>\n            <PresetName name={data[\"name\"]} />\n            <Controls controls={data[\"controls\"]} />\n            <MidiSettings settings={data[\"midi\"]} />\n            {/*<pre>{JSON.stringify(data, null, 4)}</pre>*/}\n            {/*<pre>{JSON.stringify(data, null, 4)}</pre>*/}\n        </div>\n    );\n};\n\nconst Presets = ({ presets }) => {\n    if (presets === null || presets === undefined) return null;\n    return (\n        <div>\n            {Object.keys(presets).map(idx => <Preset key={idx} index={idx} data={presets[idx]} />)}\n        </div>\n    );\n};\n\nconst DumpSysex = ({ data }) => {\n    return (\n        <div className=\"dump code\">\n            {\n                // _.map(data, (value, key) => <Preset name={key} data={value} />)\n                data && <Presets presets={data[TARGET_PRESET]} />\n            }\n{/*\n            {\n                JSON.stringify(data, null, 4)\n            }\n*/}\n        </div>\n    );\n};\n\n\nexport default DumpSysex;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport * as WebMidi from \"webmidi\";\nimport {inputById, portById} from \"../utils/ports\";\n\n\nconst propTypes = {\n    classname: PropTypes.string,\n    only: PropTypes.string,                 // regex applied to port.name\n    autoConnect: PropTypes.string,          // regex applied to port.name\n    inputRenderer: PropTypes.func,\n    outputRenderer: PropTypes.func,\n    onMidiInputEvent: PropTypes.func,\n    onMidiOutputEvent: PropTypes.func,\n    onInputConnection: PropTypes.func,      // callback with port.id as parameter\n    onOutputConnection: PropTypes.func,     // callback with port.id as parameter\n    onInputDisconnection: PropTypes.func,   // callback with port.id as parameter\n    onOutputDisconnection: PropTypes.func,  // callback with port.id as parameter\n    setOutput: PropTypes.func,              // callback with port.id as parameter\n    children: PropTypes.node\n};\n\nconst defaultProps = {\n    classname: '',\n    only: \".*\"\n};\n\n/**\n *\n * @param props\n * @constructor\n */\nexport default class Midi extends Component {\n\n    //TODO: allow specification of channel and message types to listen to\n\n    state = {\n        inputs: [],         // array of MIDI inputs (copied from WebMidi object)\n        outputs: [],        // array of MIDI outputs (copied from WebMidi object)\n        input: null,        // MIDI output port enabled\n        output: null,       // MIDI output port enabled\n    };\n\n    connectInput = port => {\n        if (this.props.onMidiInputEvent) {\n            if (port) {\n                if (port.hasListener('midimessage', 'all', this.props.onMidiInputEvent)) {\n                    console.warn(`Midi.connectInput: sysex messages on all channels listener already connected`);\n                } else {\n                    console.log(`Midi.connectInput: add listener for sysex messages on all channels`);\n                    port.addListener('midimessage', 'all', this.props.onMidiInputEvent);\n                    if (this.props.onInputConnection) {\n                        this.props.onInputConnection(port.id);\n                    }\n                }\n            }\n        }\n    };\n\n    disconnectInput = port => {\n        if (port) {\n            port.removeListener();\n            console.log(`disconnectInput: input ${port.id} disconnected`);\n            if (this.props.onInputDisconnection) {\n                this.props.onInputDisconnection(port.id);\n            }\n        }\n    };\n\n    connectOutput = port => {\n        if (port) {\n            this.setState({output: port.id});\n            console.log(`connectOutput: output ${port.id} connected`);\n            if (this.props.onOutputConnection) {\n                this.props.onOutputConnection(port.id);\n            }\n        }\n    };\n\n    disconnectOutput = () => {\n        if (this.state.output) {\n            let port_id = this.state.output;\n            this.setState({output: null});\n            console.log(`disconnectOutput: output ${port_id} disconnected`);\n            if (this.props.onOutputDisconnection) {\n                this.props.onOutputDisconnection(port_id);\n            }\n        }\n\n    };\n\n    autoConnectInput = () => {\n\n        if (this.props.autoConnect) {\n\n            console.log(`Midi.autoConnectInput: autoConnect ${this.props.autoConnect}`, this.state.inputs);\n\n            if (this.state.input === null) {\n\n                for (let port of this.state.inputs) {      //WebMidi.inputs) {\n\n                    console.log(`Midi.autoConnectInput: port ${port.name} ${port.id}`);\n\n                    if (port.type === 'input' && port.name.match(new RegExp(this.props.autoConnect, 'i'))) {\n\n                        console.log(`Midi.autoConnectInput: connect ${port.name}`);\n\n                        this.setState({input: port.id});\n\n                        this.connectInput(port);\n\n                        // if (port.hasListener('noteon', 'all', this.props.onMidiInputEvent)) {\n                        //     console.warn(`Midi.autoConnectInput: autoConnect: listener already connected`);\n                        // } else {\n                        //     console.log(`Midi.autoConnectInput: autoConnect: add listener`);\n                        //     port.addListener('noteon', 'all', this.props.onMidiInputEvent);\n                        // }\n                        break;\n                    }\n                }\n\n            } else {\n                console.log(`Midi.autoConnectInput: autoConnect skipped, already connected`);\n            }\n        }\n    };\n\n    autoConnectOutput = () => {\n\n        if (this.props.autoConnect) {\n\n            console.log(`Midi.autoConnectOutput: autoConnect ${this.props.autoConnect}`);\n\n            if (this.state.output === null) {\n\n                for (let port of this.state.outputs) {\n\n                    console.log(`Midi.autoConnectOutput: port ${port.name} ${port.id}`);\n\n                    if (port.type === 'output' && port.name.match(new RegExp(this.props.autoConnect, 'i'))) {\n\n                        console.log(`Midi.autoConnectOutput: autoConnect: auto-connect ${port.name}`);\n\n                        // this.setState({output: port.id});\n                        this.connectOutput(port);\n\n                        break;\n                    }\n                }\n\n            } else {\n                console.log(`Midi.autoConnectOutput: autoConnect skipped, already connected`);\n            }\n        }\n    };\n\n    registerInputs = () => {\n        const r = new RegExp(this.props.only, 'i');\n        console.log(`Midi.registerInputs matching /${this.props.only}/i`, WebMidi.inputs, WebMidi.inputs.filter(port => port.name.match(r)));\n        this.setState({ inputs: WebMidi.inputs.filter(port => port.name.match(r)) }, () => this.autoConnectInput());\n    };\n\n    registerOutputs = () => {\n        const r = new RegExp(this.props.only, 'i');\n        console.log(`Midi.registerOutputs matching /${this.props.only}/i`, WebMidi.outputs, WebMidi.outputs.filter(port => port.name.match(r)));\n        this.setState({ outputs: WebMidi.outputs.filter(port => port.name.match(r)) }, () => this.autoConnectOutput());\n    };\n\n    unRegisterInputs = () => {\n        console.log(\"Midi.unRegisterInputs\");\n        this.disconnectInput(portById(this.state.input));\n        this.setState({ inputs: [], input: null });\n    };\n\n    unRegisterOutputs = () => {\n        console.log(\"Midi.unRegisterOutputs\");\n        this.setState({ outputs: [], output: null });\n    };\n\n    handleMidiConnectEvent = e => {\n\n        console.group(`Midi: handleMidiConnectEvent: ${e.port.type} ${e.type}: ${e.port.name}`, e);\n\n        // TODO: is disconnect event, remove the existing input listeners\n        /*\n        if (e.type === \"disconnected\") {\n            // console.log(`must disconnect ${e.port} ${e.port.id}`);\n            this.disconnectInput(e.port.id);\n        }\n        */\n\n        if (e.port.name.match(new RegExp(this.props.only, 'i'))) {\n\n            if (e.port.type === 'input') {\n                // console.log(`ignore MIDI input connect event`);\n                console.log(\"Midi.handleMidiConnectEvent: call registerInputs\");\n                this.registerInputs();\n            }\n\n            if (e.port.type === 'output') {\n                console.log(\"Midi.handleMidiConnectEvent: call registerOutputs\");\n                this.registerOutputs();\n            }\n\n        } else {\n\n            console.log(`Midi.handleMidiConnectEvent: port ignored: ${e.port.name}`);\n\n        }\n\n        // Note: if we don't display the events, than the UI will not be updated if we don't update the state.\n\n        console.groupEnd();\n\n    };\n\n    togglePort = (port_id) => {\n        let p = portById(port_id);\n        if (p.type === 'input') {\n            console.log(\"toggle input\", port_id);\n            let prev = this.state.input;\n            if (this.state.input) {\n                this.disconnectInput(portById(this.state.input));\n                // this.setState({ input: null });\n            }\n            if (port_id !== prev) {\n                this.connectInput(inputById(port_id));\n                // this.setState({ input: port_id });\n            }\n            this.setState({ input: port_id === prev ? null : port_id });\n        } else {\n            console.log(\"toggle output\", port_id);\n            // There is nothing to \"connect\" for an output port since this type of port does not generate any event.\n            // if (this.state.output) this.disconnectOutput(this.state.output);\n            if (this.state.output) {\n                this.disconnectOutput();\n            } else {\n                this.connectOutput(portById(port_id));\n            }\n            // this.setState({ output: port_id === this.state.output ? null : port_id });\n        }\n    };\n\n    midiOn = err => {\n        if (err) {\n            console.warn(\"Midi.midiOn: WebMidi could not be enabled.\", err);\n        } else {\n            console.log(\"Midi.midiOn: WebMidi enabled\");\n            WebMidi.addListener(\"connected\", this.handleMidiConnectEvent);\n            WebMidi.addListener(\"disconnected\", this.handleMidiConnectEvent);\n\n            /*\n            if (WebMidi.hasListener(\"connected\", this.handleMidiConnectEvent)) {\n                console.log(\"MidiPorts.componentDidMount: handleMidiConnectEvent already set on 'connected' event\");\n            } else {\n                WebMidi.addListener(\"connected\", this.handleMidiConnectEvent);\n            }\n            if (WebMidi.hasListener(\"disconnected\", this.handleMidiConnectEvent)) {\n                console.log(\"MidiPorts.componentDidMount: handleMidiConnectEvent already set on 'disconnected' event\");\n            } else {\n                WebMidi.addListener(\"disconnected\", this.handleMidiConnectEvent);\n            }\n            */\n        }\n    };\n\n    componentDidMount() {\n        console.log(`Midi: component did mount: WebMidi.enabled=${WebMidi.enabled}`);\n        if (WebMidi.enabled) {\n            console.log(`Midi: component did mount: already enabled, register ports`);\n            this.registerInputs();\n            this.registerOutputs();\n        } else {\n            console.log(\"Midi: component did mount: Calling WebMidi.enable\");\n            WebMidi.enable(this.midiOn, true);  // true to enable sysex support\n        }\n    }\n\n    componentWillUnmount() {\n        console.log(\"Midi: component will unmount: unregister ports\");\n        this.unRegisterInputs();\n        this.unRegisterOutputs();\n    }\n\n    render() {\n\n        let {inputs, outputs} = this.state;\n\n        if (inputs.length === 0 && outputs.length === 0) {\n            return (\n                <div className={this.props.className}>\n                    {this.props.children}\n                </div>\n            );\n        } else {\n            return (\n                <div className={this.props.className}>\n                    {inputs.map(port => this.props.inputRenderer(port, port.id === this.state.input, this.togglePort))}\n                    {outputs.map(port => this.props.outputRenderer(port, port.id === this.state.output, this.togglePort))}\n                </div>\n            );\n        }\n    }\n\n}\n\nMidi.propTypes = propTypes;\nMidi.defaultProps = defaultProps;\n","import React, {Component} from \"react\";\nimport \"./MidiPort.css\";\nimport Switch from \"react-switch\";\n\nclass MidiPorts extends Component {\n\n    render() {\n\n        let port = this.props.port;\n        let isSelected = this.props.selected;\n        let clickHandler = this.props.clickHandler;\n\n        // console.log(\"MidiPort.render\", port.type, port.name, isSelected);\n\n        //TODO: display MIDI channel when connected\n        return (\n            <div key={port.id} className={isSelected ? `port ${port.type} enabled` : `port ${port.type}`}>\n                {/*<div className={\"port-description\"}>*/}\n                    <div className=\"port-type\">{port.type === 'input' ? 'IN' : 'OUT'}</div>\n                    <div className=\"port-name\">{port.name} </div>\n                    <div className=\"port-switch\">\n                        <Switch\n                            onChange={() => clickHandler(port.id)}\n                            checked={isSelected}\n                            className=\"react-switch\"\n                            id=\"normal-switch\"\n                            height={20} width={42}\n                        />\n                    </div>\n                {/*</div>*/}\n            </div>\n        );\n\n/*\n        return (\n            <div key={port.id} className={isSelected ? `port ${port.type} enabled` : `port ${port.type}`}>\n                <div className={\"port-description\"}>\n                    <div className=\"type\">{port.type} {port.type === 'input' ? 'from' : 'to'}</div>\n                    <div className=\"port-name\">{port.name}</div>\n                </div>\n                <div className={\"port-state\"}>\n                    <Switch\n                        onChange={() => clickHandler(port.id)}\n                        checked={isSelected}\n                        className=\"react-switch\"\n                        id=\"normal-switch\"\n                        height={20} width={42}\n                    />\n                    <span className={isSelected ? \"port-usage selected\" : \"port-usage\"}\n                          onClick={() => clickHandler(port.id)}>{isSelected ? \"enabled\" : \"disabled\"}</span>\n                </div>\n            </div>\n        );\n*/\n    }\n\n}\n\nexport default MidiPorts;\n","import React, {Component} from 'react';\nimport {isSysexData, mergeDeep, parseSysexDump} from \"../utils/sysex\";\nimport {requestPreset, requestPresetObj, SYSEX_SIGNATURE} from \"../pacer/index\";\nimport {outputById} from \"../utils/ports\";\nimport {fromHexString, h, hs} from \"../utils/hexstring\";\nimport \"./TestSender.css\";\nimport {produce} from \"immer\";\nimport DumpSysex from \"../components/DumpSysex\";\nimport {checksum, PACER_MIDI_PORT_NAME, SYSEX_HEADER} from \"../pacer\";\nimport Midi from \"../components/Midi\";\nimport MidiPort from \"../components/MidiPort\";\n\nclass TestSender extends Component {\n\n    state = {\n        output: null,           // MIDI output port used for output\n        data: null,\n        messages: [\n            requestPreset(0),\n            requestPresetObj(5, 0x0D)\n        ],\n        customMessage: \"\"\n    };\n\n    updateCustomMessage = (event) => {\n        let s = (event.target.value.toUpperCase().match(/[0-9A-F ]+/g) || []).join('');\n        // let h = '';\n        // for (let i=0; i<s.length; i++) {\n        //     if ((i > 0) && (i % 2 === 0)) h += ' ';\n        //     h += s[i];\n        // }\n        this.setState({\n            customMessage: s\n        });\n    };\n\n    sendCustomMessage = () => {\n        let data = Array.from(fromHexString(this.state.customMessage, / /g));\n        if (data && data.length > 0) {\n            data.push(checksum(data));\n            this.sendSysex(SYSEX_HEADER.concat(data));\n        }\n    };\n\n    handleMidiInputEvent = (event) => {\n        // console.log(\"TestSender.handleMidiInputEvent\", event, event.data);\n        // if (event instanceof MIDIMessageEvent) {\n        if (isSysexData(event.data)) {\n            this.setState(\n                produce(draft => {\n                    draft.data = mergeDeep(draft.data || {}, parseSysexDump(event.data));\n                    // this.props.onBusy(false);\n                })\n            )\n        } else {\n            console.log(\"MIDI message is not a sysex message\")\n        }\n        // }\n    };\n\n    renderPort = (port, selected, clickHandler) => {\n        if (port === undefined || port === null) return null;\n        return (\n            <MidiPort key={port.id} port={port} selected={selected} clickHandler={clickHandler} />\n        )\n    };\n\n    setOutput = (port_id) => {\n        this.setState({output: port_id});\n    };\n\n    sendSysex = msg => {\n        console.log(\"sendSysex\", msg);\n        if (!this.state.output) return;\n        let out = outputById(this.state.output);\n        if (!out) {\n            console.warn(`send: output ${this.state.output} not found`);\n            return;\n        }\n        this.setState(\n            {data: null},\n            () => out.sendSysex(SYSEX_SIGNATURE, msg)\n        );\n    };\n\n    sendMessage = (msg) => {\n        this.sendSysex(msg);\n    };\n\n    /**\n     * @returns {*}\n     */\n    render() {\n\n        // console.log(\"SendTester.render\", this.props);\n\n        const { data, messages, customMessage } = this.state;\n\n        // console.log(\"SendTester.render\", messages, customMessage.length % 2);\n\n        const cs = checksum(fromHexString(customMessage, / /g));\n\n        return (\n            <div className=\"wrapper\">\n                <div className=\"content\">\n                    <div className=\"content-row step-1\">\n{/*\n                        <div className=\"background\">\n                            Connect\n                        </div>\n                        <div className=\"content-row-header\">\n                            1\n                        </div>\n*/}\n                        <div className=\"content-row-content row-middle-aligned\">\n                            <Midi only={PACER_MIDI_PORT_NAME} autoConnect={PACER_MIDI_PORT_NAME}\n                                  inputRenderer={this.renderPort} outputRenderer={this.renderPort}\n                                  onMidiInputEvent={this.handleMidiInputEvent}\n                                  onOutputConnection={this.setOutput}\n                                  className=\"sub-header\" >\n                                <div className=\"no-midi\">Please connect your Pacer to your computer.</div>\n                            </Midi>\n                        </div>\n                    </div>\n                    <div className=\"content-row step-2\">\n{/*\n                        <div className=\"background\">\n                            Send\n                        </div>\n                        <div className=\"content-row-header\">\n                            2\n                        </div>\n*/}\n                        <div className=\"content-row-content\">\n                            <h2>Test messages:</h2>\n                            <div>\n                            {messages.map((msg, i) =>\n                                <div key={i} className=\"send-message\">\n                                    <button onClick={() => this.sendMessage(msg)}>send</button>\n                                    <span className=\"code light\">{ hs(SYSEX_SIGNATURE.concat(msg.slice(0, 1))) } </span>\n                                    <span className=\"code\">{ hs(msg.slice(1, -1)) } </span>\n                                    <span className=\"code light\"> {hs(msg.slice(-1))}</span>\n                                </div>\n                            )}\n                            </div>\n                            <h2>Custom message:</h2>\n                            <div>\n                                <div className=\"send-message\">\n                                    <button onClick={this.sendCustomMessage} disabled={customMessage.length === 0}>send</button>\n                                    <span className=\"code light\">{hs(SYSEX_SIGNATURE)} {hs(SYSEX_HEADER)} </span>\n                                    <input type=\"text\" className=\"code\" size=\"30\" value={customMessage}\n                                           placeholder={\"hex digits only\"} onChange={this.updateCustomMessage} />\n                                    <span className=\"code light\"> {h(cs)}</span>\n                                </div>\n                            </div>\n\n                        </div>\n                    </div>\n                    <div className=\"content-row step-3\">\n{/*\n                        <div className=\"background\">\n                            Receive\n                        </div>\n                        <div className=\"content-row-header\">\n                            3\n                        </div>\n*/}\n                        <div className=\"content-row-content\">\n                            <h2>Response:</h2>\n                            <div className=\"message code\">\n                                {/*{data && JSON.stringify(data)}*/}\n                                <DumpSysex data={data} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"help\">\n                    <h3>Help</h3>\n                </div>\n\n            </div>\n\n        );\n    }\n}\n\nexport default TestSender;\n","import React, {Fragment} from \"react\";\nimport \"./PresetSelector.css\";\nimport \"./selector.css\";\nimport {presetXYToIndex} from \"../pacer\";\n\nconst Selector = ({ name, id, selected, onClick }) =>\n    <div className={selected ? \"selector selected\" : \"selector\"} onClick={() => onClick(id)}>{name}</div>;\n\n\n/*\nconst PresetSelectors = ({ currentPreset, onClick }) =>\n    <div className=\"preset-selectors\">\n        {\n            Array.from(Array(6).keys()).map(\n                digit => {\n                    return (\n                        <Fragment>{\n                            ['A', 'B', 'C', 'D'].map(\n                                letter => {\n                                    let name = letter + (digit + 1);\n                                    let id = presetXYToIndex(name);\n                                    return <PresetSelector name={name} id={id} selected={id === currentPreset} onClick={onClick} key={id} />\n                                })\n                        }</Fragment>)\n                }\n            )\n        }\n    </div>;\n*/\n\n//FIXME: allow the selection of preset #0 (CUR)\n\nconst PresetSelector = ({ currentPreset, onClick }) =>\n    <Fragment>\n        <div className=\"preset-selectors\">\n            <Selector name={\"0\"} id={0} selected={0 === currentPreset} onClick={onClick} key={0} />\n        {\n            ['A', 'B', 'C', 'D'].map(\n                letter => {\n                    return (\n                        <Fragment key={letter}>\n                        {\n                            (letter !== 'A') && <div></div>\n                        }\n                        {\n                            Array.from(Array(6).keys()).map(\n                                digit => {\n                                    let name = letter + (digit + 1);\n                                    let id = presetXYToIndex(name);\n                                    return <Selector name={name} id={id} selected={id === currentPreset} onClick={onClick} key={id} />\n                                })\n                        }</Fragment>)\n                }\n            )\n        }\n        </div>\n    </Fragment>;\n\n/*\n\n    with CSS grid\n\nconst PresetSelectors = ({ currentPreset }) =>\n    <div>\n        <h2>Preset:</h2>\n        <div className=\"selectors\">\n            {\n                ['A', 'B', 'C', 'D'].map(\n                    e => {\n                        return Array.from(Array(6).keys()).map(\n                            i => {\n                                let id = e + (i+1);\n                                console.log(id, currentPreset);\n                                return <PresetSelector name={id} selected={id === currentPreset} />\n                            }\n                        )\n                    }\n                )\n            }\n        </div>\n    </div>;\n*/\n\nexport default PresetSelector;\n","import React from \"react\";\nimport {FOOTSWITCHES, STOMPSWITCHES_TOP, STOMPSWITCHES_BOTTOM, EXPPEDALS, CONTROLS} from \"../pacer\";\nimport \"./ControlSelector.css\";\n\nconst Control = ({ name, id, selected, onClick }) =>\n    <div className={selected ? \"selector selected\" : \"selector\"} onClick={() => onClick(id)}>\n        <div className=\"name\">{name}</div>\n    </div>;\n\n\nconst ControlSelector = ({ currentControl, onClick }) =>\n    <div className=\"controls\">\n        {\n            FOOTSWITCHES.map(\n                key => <Control key={key} name={CONTROLS[key]} id={key} selected={key === currentControl} onClick={onClick} />\n            )\n        }\n        {\n            EXPPEDALS.map(\n                key => <Control key={key} name={CONTROLS[key]} id={key} selected={key === currentControl} onClick={onClick} />\n            )\n        }\n        <div className=\"no-control\">&nbsp;</div>\n        {\n            STOMPSWITCHES_TOP.map(\n                key => <Control key={key} name={CONTROLS[key]} id={key} selected={key === currentControl} onClick={onClick} />\n            )\n        }\n        <div className=\"no-control\">&nbsp;</div>\n        {\n            STOMPSWITCHES_BOTTOM.map(\n                key => <Control key={key} name={CONTROLS[key]} id={key} selected={key === currentControl} onClick={onClick} />\n            )\n        }\n    </div>;\n\n\nexport default ControlSelector;\n","import React, {Component, Fragment} from 'react';\nimport {\n    COLORS,\n    MSG_CTRL_OFF,\n    MSG_SW_NOTE,\n    MSG_SW_NOTE_TGGLE, MSG_TYPES_DATA_HELP,\n    MSG_TYPES_FULLNAME_SW,\n    MSG_TYPES_FULLNAME_SW_SORTED\n} from \"../pacer\";\nimport * as Note from \"tonal-note\";\nimport \"./ControlStepsEditor.css\";\n\nconst LEDMidi = ({ current_value, onChange }) => {\n    return (\n        <select defaultValue={current_value} onChange={(event) => onChange(event.target.value)}>\n            <option value=\"0\">0</option>\n            <option value=\"1\">1</option>\n        </select>\n    );\n};\n\nconst LEDColor = ({ current_value, onChange }) => {\n    return (\n        <select defaultValue={current_value} onChange={(event) => onChange(event.target.value)}>\n            {\n                Object.keys(COLORS).map(\n                    key => {\n                        // let n = Note.fromMidi(i, true);\n                        return <option key={key} value={key}>{COLORS[key]}</option>\n                    })\n            }\n        </select>\n    );\n};\n\nconst LEDNum = ({ current_value, onChange }) => {\n    return (\n        <select defaultValue={current_value} onChange={(event) => onChange(event.target.value)}>\n            <option value=\"0\">default</option>\n            <option value=\"1\">bottom</option>\n            <option value=\"2\">middle</option>\n            <option value=\"3\">top</option>\n        </select>\n    );\n};\n\n/*\nconst LED = ({ config, onChange }) => {\n    if ((config === undefined) || (config === null)) return <div> </div>;\n    return (\n        <div>\n            <input name=\"\" type=\"checkbox\" checked={config.midi_ctrl} onChange={(event) => onChange(event.target.value)} />\n            <LEDColor current_value={config.active_color} />\n            <LEDColor current_value={config.inactive_color} />\n            <LEDNum current_value={config.num} />\n        </div>\n    );\n};\n*/\n\nconst MidiNote = ({ note, onChange }) => {\n    // console.log(`MidiNote ${note}`, typeof note);\n    return (\n        <select onChange={(event) => onChange(event.target.value)} defaultValue={note}>\n            {\n                Array.from(Array(127).keys()).map(\n                    i => {\n                        let n = Note.fromMidi(i, true);\n                        return <option key={i} value={i}>{n}</option>\n                    })\n            }\n        </select>\n    );\n};\n\nconst Step = ({ index, config, updateCallback }) => {\n\n    let inactive = config.msg_type === MSG_CTRL_OFF;\n\n    if (inactive) {\n        return (\n            <Fragment>\n                <div className=\"step-row-header\">Step {index}:</div>\n                <div>\n                    <select onChange={(event) => updateCallback(\"msg_type\", null, event.target.value)} defaultValue={config.msg_type}>\n                        {\n                            Object.keys(MSG_TYPES_FULLNAME_SW).map(\n                                key => {\n                                    // let n = Note.fromMidi(i, true);\n                                    return <option key={key} value={key}>{MSG_TYPES_FULLNAME_SW[key]}</option>\n                                })\n                        }\n                    </select>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n            </Fragment>\n        );\n    }\n\n    let d0, d1, d2;\n    if ((config.msg_type === MSG_SW_NOTE) || (config.msg_type === MSG_SW_NOTE_TGGLE)) {\n        d0 = <MidiNote note={config.data[0]} onChange={(value) => updateCallback(\"data\", 0, value)} />;\n        d1 = <input type=\"text\" value={config.data[1]} onChange={(event) => updateCallback(\"data\", 1, event.target.value)} />;\n        d2 = '';\n    } else {\n        d0 = <input type=\"text\" value={config.data[0]} onChange={(event) => updateCallback(\"data\", 0, event.target.value)} />;\n        d1 = <input type=\"text\" value={config.data[1]} onChange={(event) => updateCallback(\"data\", 1, event.target.value)} />;\n        d2 = <input type=\"text\" value={config.data[2]} onChange={(event) => updateCallback(\"data\", 2, event.target.value)} />;\n    }\n\n    return (\n        <Fragment>\n            <div className=\"step-row-header\">Step {index}:</div>\n            <div>\n                <select onChange={(event) => updateCallback(\"msg_type\", null, event.target.value)} defaultValue={config.msg_type}>\n                {\n                    MSG_TYPES_FULLNAME_SW_SORTED.map(\n                        v => {\n                            return <option key={v.key} value={v.key}>{v.value}</option>\n                        })\n                }\n                </select>\n            </div>\n            <div>{d0}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][0]}</div></div>\n            <div>{d1}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][1]}</div></div>\n            <div>{d2}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][2]}</div></div>\n            <div>\n                <LEDColor current_value={config.led_active_color} onChange={(value) => updateCallback(\"led_active_color\", null, value)} />\n            </div>\n            <div>\n                <LEDColor current_value={config.led_inactive_color} onChange={(value) => updateCallback(\"led_inactive_color\", null, value)} />\n            </div>\n            <div>\n                <LEDNum current_value={config.led_num} onChange={(value) => updateCallback(\"led_num\", null, value)} />\n            </div>\n            <div>\n{/*\n                <input type=\"checkbox\" checked={config.led_midi_ctrl} onChange={(event) => {\n                        console.log(\"led_midi_ctrl\", event.target.value);\n                        updateCallback(\"led_midi_ctrl\", null, event.target.value === 'on' ? 1 : 0)\n                    }\n                } />\n*/}\n                <LEDMidi current_value={config.led_midi_ctrl} onChange={(value) => updateCallback(\"led_midi_ctrl\", null, value)} />\n            </div>\n            <div>\n                <select onChange={(event) => updateCallback(\"channel\", null, event.target.value)} defaultValue={config.channel}>\n                    {\n                        Array.from(Array(16).keys()).map(i => <option key={i} value={i}>{i}</option>)\n                    }\n                </select>\n            </div>\n        </Fragment>\n    );\n};\n\nclass ControlStepsEditor extends Component {\n\n    onStepUpdate = (stepIndex, dataType, dataIndex, value) => {\n        console.log(`ControlStepsEditor.onStepUpdate`, stepIndex, dataType, dataIndex, value);\n        this.props.onUpdate(stepIndex, dataType, dataIndex, value);    // stepIndex, dataIndex, value\n    };\n\n    render() {\n\n        const steps = this.props.steps;\n\n        // console.log(\"ControlStepsEditor.render\", steps);\n\n        return (\n            <div className=\"steps\">\n                <div></div>\n                <div className=\"step-col-header\">Type</div>\n                <div className=\"step-col-header\">Data 1</div>\n                <div className=\"step-col-header\">Data 2</div>\n                <div className=\"step-col-header\">Data 3</div>\n                <div className=\"step-col-header\">LED On</div>\n                <div className=\"step-col-header\">LED Off</div>\n                <div className=\"step-col-header\">LED Num</div>\n                <div className=\"step-col-header\">LED MIDI</div>\n                <div className=\"step-col-header\">MIDI Ch.</div>\n                {Object.keys(steps).map(i =>\n                    <Step key={i} index={i} config={steps[i]} updateCallback={(dataType, dataIndex, value) => this.onStepUpdate(i, dataType, dataIndex, value)} />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default ControlStepsEditor;\n","import React, {Component} from \"react\";\nimport {CONTROL_MODES} from \"../pacer\";\nimport\"./ControlModeEditor.css\";\n\nclass ControlModeEditor extends Component {\n\n    render() {\n        return (\n            <div className=\"control-mode\">\n                <span className=\"step-row-header\">Control mode:</span>\n                <select onChange={(event) => this.props.onUpdate(event.target.value)} defaultValue={this.props.mode}>\n                    {\n                        Object.keys(CONTROL_MODES).map(\n                            key => {\n                                return <option key={key} value={key}>{CONTROL_MODES[key]}</option>\n                            })\n                    }\n                </select>\n            </div>\n        );\n    }\n\n}\n\nexport default ControlModeEditor;\n","import React from \"react\";\nimport \"./Status.css\";\n\nconst Status = ({ messages }) =>\n    <div className=\"status\">\n        {\n            messages.map(\n                (msg, i) => <div key={i} className={`status-${msg.type}`}>{msg.message}</div>\n            )\n        }\n    </div>;\n\n\nexport default Status;\n","import React, {Component, Fragment} from 'react';\nimport PresetSelector from \"../components/PresetSelector\";\nimport {\n    getControlUpdateSysexMessages,\n    isSysexData,\n    mergeDeep,\n    parseSysexDump\n} from \"../utils/sysex\";\nimport ControlSelector from \"../components/ControlSelector\";\nimport {MSG_CTRL_OFF, PACER_MIDI_PORT_NAME, requestPresetObj, SYSEX_SIGNATURE, TARGET_PRESET} from \"../pacer\";\nimport {hs} from \"../utils/hexstring\";\nimport {produce} from \"immer\";\nimport {inputName, outputById, outputName} from \"../utils/ports\";\nimport ControlStepsEditor from \"../components/ControlStepsEditor\";\nimport Midi from \"../components/Midi\";\nimport MidiPort from \"../components/MidiPort\";\nimport Dropzone from \"react-dropzone\";\nimport \"./Preset.css\";\nimport ControlModeEditor from \"../components/ControlModeEditor\";\nimport Status from \"../components/Status\";\n\nconst MAX_FILE_SIZE = 5 * 1024*1024;\n\nconst MAX_STATUS_MESSAGES = 40;\n\nfunction isVal(v) {\n    return v !== undefined && v !== null && v !== '';\n}\n\nclass Preset extends Component {\n\n    state = {\n        output: null,       // MIDI output port used for output\n        presetIndex: null,\n        controlId: null,\n        changed: false,     // true when the control has been edited\n        data: null,\n        statusMessages: []\n    };\n\n    addStatusMessage = (type, message) => {\n        this.setState(\n            produce(draft => {\n                let m = { type, message };\n                // let len = draft.statusMessages.unshift(m);\n                // if (len > MAX_STATUS_MESSAGES) draft.statusMessages.pop();\n                let len = draft.statusMessages.push(m);\n                if (len > MAX_STATUS_MESSAGES) draft.statusMessages.shift();\n            })\n        );\n    };\n\n    addInfoMessage= message => {\n        this.addStatusMessage(\"info\", message);\n    };\n\n    addWarningMessage= message => {\n        this.addStatusMessage(\"warning\", message);\n    };\n\n    addErrorMessage= message => {\n        this.addStatusMessage(\"error\", message);\n    };\n\n    /**\n     *\n     * @param files\n     * @returns {Promise<void>}\n     */\n    async readFiles(files) {\n        await Promise.all(files.map(\n            async file => {\n                if (file.size > MAX_FILE_SIZE) {\n                    console.warn(`readFiles: ${file.name}: file too big, ${file.size}`);\n                    this.addWarningMessage(\"file too big\");\n                } else {\n                    const data = new Uint8Array(await new Response(file).arrayBuffer());\n                    if (isSysexData(data)) {\n                        this.setState(\n                            produce(draft => {\n                                // draft.data = mergeDeep(draft.data || {}, parseSysexDump(data));\n                                draft.data = parseSysexDump(data);\n                                // this.props.onBusy(false);\n                                let pId = Object.keys(draft.data[TARGET_PRESET])[0];\n                                let cId = Object.keys(draft.data[TARGET_PRESET][pId][\"controls\"])[0];\n                                draft.presetIndex = parseInt(pId, 10);\n                                draft.controlId = parseInt(cId, 10);\n                            })\n                        );\n                        this.addInfoMessage(\"sysfile decoded\");\n                    } else {\n                        this.addWarningMessage(\"not a sysfile\");\n                        console.log(\"readFiles: not a sysfile\", hs(data.slice(0, 5)));\n                    }\n                    // non sysex files are ignored\n                }\n                // too big files are ignored\n            }\n        ));\n    }\n\n    /**\n     * Drop Zone handler\n     * @param files\n     */\n    onDrop = (files) => {\n        console.log('drop', files);\n        // this.props.onBusy(true);\n        this.setState(\n            {data: null},\n            () => {this.readFiles(files)}\n        );\n        // this.readFiles(files);  // returned promise is ignored, this is normal.\n    };\n\n    selectPreset = (id) => {\n        // console.log(`selectPreset ${id}`);\n        // if the user selects another preset or control, then clear the data in the state\n        if (id !== this.state.presetIndex) {\n            this.setState({\n                presetIndex: id,\n                data: null\n            });\n        } else {\n            this.setState({\n                presetIndex: id\n            });\n        }\n        if (isVal(id) && this.state.controlId) {\n            this.sendSysex(requestPresetObj(id, this.state.controlId));\n        }\n    };\n\n    selectControl = (id) => {\n        // console.log(`selectControl ${id}`);\n        // if the user selects another preset or control, then clear the data in the state\n        if (id !== this.state.presetIndex) {\n            this.setState({\n                controlId: id,\n                data: null\n            });\n        } else {\n            this.setState({\n                controlId: id\n            });\n        }\n        if (isVal(this.state.presetIndex) && id) {\n            this.sendSysex(requestPresetObj(this.state.presetIndex, id));\n        }\n    };\n\n    /**\n     * dataIndex is only used when dataType == \"data\"\n     */\n    updateControlStep = (controlId, stepIndex, dataType, dataIndex, value) => {\n        console.log(\"Presets.updateControlStep\", controlId, stepIndex, dataIndex, value);\n        let v = parseInt(value, 10);\n        this.setState(\n            produce(draft => {\n                if (dataType === \"data\") {\n                    draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"steps\"][stepIndex][\"data\"][dataIndex] = v;\n                } else {\n                    draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"steps\"][stepIndex][dataType] = v;\n                }\n                if (dataType === \"msg_type\") {\n                    console.log('msg_type', dataType, value);\n                    if (v === MSG_CTRL_OFF) {\n                        console.log('set active 0');\n                        draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"steps\"][stepIndex][\"active\"] = 0;\n                    } else {\n                        console.log('set active 1');\n                        draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"steps\"][stepIndex][\"active\"] = 1;\n                    }\n                }\n                draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"steps\"][stepIndex][\"changed\"] = true;\n                draft.changed = true;\n            })\n        );\n    };\n\n    /**\n     * dataIndex is only used when dataType == \"data\"\n     */\n    updateControlMode = (controlId, value) => {\n        console.log(\"Presets.updateControlMode\", controlId, value);\n        let v = parseInt(value, 10);\n        this.setState(\n            produce(draft => {\n                draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"control_mode\"] = v;\n                draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"changed\"] = true;\n                draft.changed = true;\n            })\n        );\n    };\n\n    /**\n     *\n     */\n    handleMidiInputEvent = (event) => {\n        // console.log(\"Presets.handleMidiInputEvent\", event, event.data);\n        // if (event instanceof MIDIMessageEvent) {\n        if (isSysexData(event.data)) {\n            this.setState(\n                produce(draft => {\n                    draft.data = mergeDeep(draft.data || {}, parseSysexDump(event.data));\n\n                    //TODO: factorise this code:\n                    let pId = Object.keys(draft.data[TARGET_PRESET])[0];\n                    let cId = Object.keys(draft.data[TARGET_PRESET][pId][\"controls\"])[0];\n                    draft.presetIndex = parseInt(pId, 10);\n                    draft.controlId = parseInt(cId, 10);\n\n                    // this.props.onBusy(false);\n                })\n            );\n            this.addInfoMessage(`sysex received (${event.data.length} bytes)`);\n        } else {\n            console.log(\"MIDI message is not a sysex message\")\n        }\n        // }\n    };\n\n    renderPort = (port, selected, clickHandler) => {\n        if (port === undefined || port === null) return null;\n        return (\n            <MidiPort key={port.id} port={port} selected={selected} clickHandler={clickHandler} />\n        )\n    };\n\n    onInputConnection = (port_id) => {\n        this.addInfoMessage(`input ${inputName(port_id)} connected`);\n    };\n\n    onInputDisconnection = (port_id) => {\n        this.addInfoMessage(`input ${inputName(port_id)} disconnected`);\n    };\n\n    onOutputConnection = (port_id) => {\n        this.setState(\n            produce(draft => {\n                draft.output = port_id;\n            })\n        );\n        this.addInfoMessage(`output ${outputName(port_id)} connected`);\n    };\n\n    onOutputDisconnection = (port_id) => {\n        this.addInfoMessage(`output ${outputName(port_id)} disconnected`);\n    };\n\n    sendSysex = msg => {\n        console.log(\"sendSysex\", msg);\n        if (!this.state.output) return;\n        let out = outputById(this.state.output);\n        if (!out) {\n            console.warn(`send: output ${this.state.output} not found`);\n            return;\n        }\n        // this.setState(\n        //     // {data: null},\n        //     () => out.sendSysex(SYSEX_SIGNATURE, msg)\n        // );\n        out.sendSysex(SYSEX_SIGNATURE, msg);\n    };\n\n    updatePacer = (messages) => {\n        for (let m of messages) {\n            this.sendSysex(m);\n        }\n        this.addInfoMessage(`update${messages.length > 1 ? 's' : ''} sent to Pacer`);\n    };\n\n    render() {\n\n        const { presetIndex, controlId, data, changed } = this.state;\n\n        let showEditor = false;\n\n        if (data) {\n\n            showEditor = true;\n\n            if (!(TARGET_PRESET in data)) {\n                console.log(`Presets: invalid data`, data);\n                showEditor = false;\n            }\n\n            if (showEditor && !(presetIndex in data[TARGET_PRESET])) {\n                console.log(`Presets: preset ${presetIndex} not found in data`);\n                showEditor = false;\n            }\n\n            if (showEditor && !(\"controls\" in data[TARGET_PRESET][presetIndex])) {\n                console.log(`Presets: controls not found in data`);\n                showEditor = false;\n            }\n\n            if (showEditor && !(controlId in data[TARGET_PRESET][presetIndex][\"controls\"])) {\n                console.log(`Presets: control ${controlId} not found in data`);\n                showEditor = false;\n            }\n\n            if (showEditor && !(\"steps\" in data[TARGET_PRESET][presetIndex][\"controls\"][controlId])) {\n                console.log(`Presets: steps not found in data`);\n                showEditor = false;\n            }\n        }\n\n        showEditor = showEditor && (Object.keys(data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"steps\"]).length === 6);\n\n        let updateMessages = [];\n        if (showEditor) {\n            updateMessages = getControlUpdateSysexMessages(presetIndex, controlId, data);\n        }\n\n        // console.log(\"Presets.render\", showEditor, presetIndex, controlId);\n\n        return (\n            <div className=\"wrapper\">\n                <div className=\"content\">\n\n                    <div className=\"content-row step-1\">\n{/*\n                        <div className=\"background\">\n                            Connect\n                        </div>\n                        <div className=\"content-row-header\">\n                            1\n                        </div>\n*/}\n                        <div className=\"content-row-content row-middle-aligned\">\n                            <Midi only={PACER_MIDI_PORT_NAME} autoConnect={PACER_MIDI_PORT_NAME}\n                                  inputRenderer={this.renderPort} outputRenderer={this.renderPort}\n                                  onMidiInputEvent={this.handleMidiInputEvent}\n                                  onInputConnection={this.onInputConnection}\n                                  onInputDisconnection={this.onInputDisconnection}\n                                  onOutputConnection={this.onOutputConnection}\n                                  onOutputDisconnection={this.onOutputDisconnection}\n                                  className=\"sub-header\" >\n                                <div className=\"no-midi\">Please connect your Pacer to your computer.</div>\n                            </Midi>\n                        </div>\n                    </div>\n                    <div className=\"content-row step-2\">\n{/*\n                        <div className=\"background\">\n                            Select\n                        </div>\n                        <div className=\"content-row-header\">\n                            2\n                        </div>\n*/}\n                        <div className=\"content-row-content\">\n\n                            <h2>Choose the preset and the control to edit:</h2>\n\n                            <div className=\"selectors\">\n\n                                <PresetSelector currentPreset={presetIndex} onClick={this.selectPreset} />\n\n                                {isVal(presetIndex) && <ControlSelector currentControl={controlId} onClick={this.selectControl} />}\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"content-row step-3\">\n{/*\n                        <div className=\"background\">\n                            Edit\n                        </div>\n                        <div className=\"content-row-header\">\n                            3\n                        </div>\n*/}\n                        <div className=\"content-row-content\">\n                            {showEditor &&\n                            <Fragment>\n                                <h2>Edit the selected control:</h2>\n                                <ControlStepsEditor controlId={controlId}\n                                                    steps={data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"steps\"]}\n                                                    onUpdate={(stepIndex, dataType, dataIndex, value) => this.updateControlStep(controlId, stepIndex, dataType, dataIndex, value)} />\n                                <ControlModeEditor controlId={controlId}\n                                                   mode={data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"control_mode\"]}\n                                                   onUpdate={(value) => this.updateControlMode(controlId, value)} />\n                            </Fragment>\n                            }\n                        </div>\n                    </div>\n\n                    <div className=\"content-row step-4\">\n{/*\n                        <div className=\"background\">\n                            Write\n                        </div>\n                        <div className=\"content-row-header\">\n                            4\n                        </div>\n*/}\n                        <div className=\"content-row-content\">\n                            {changed &&\n                            <Fragment>\n                                <h2>Send the updated config to the Pacer:</h2>\n                                <div className=\"actions\">\n                                    <button className=\"update\" onClick={() => this.updatePacer(updateMessages)}>Update Pacer</button>\n                                </div>\n                            </Fragment>\n                            }\n                        </div>\n                    </div>\n\n                    <div>\n                        {showEditor && <div className=\"debug\">\n                            <h4>[Debug] update message to send to Pacer:</h4>\n                            <div className=\"message-to-send\">\n                                {updateMessages.map((m, i) => <div key={i} className=\"code\">{hs(m)}</div>)}\n                            </div>\n                        </div>}\n\n{/*\n                        {data && <div className=\"debug\">\n                            <h4>[Debug] sysex data:</h4>\n                            <pre>{JSON.stringify(data, null, 4)}</pre>\n                        </div>}\n*/}\n\n                    </div>\n                </div>\n\n                <div className=\"help\">\n\n                    <Dropzone onDrop={this.onDrop} className=\"drop-zone\">\n                        Drop a binary sysex file here<br />or click to open the file dialog\n                    </Dropzone>\n\n                    <h3>Log:</h3>\n                    <Status messages={this.state.statusMessages} />\n\n                </div>\n\n            </div>\n        );\n    }\n\n}\n\nexport default Preset;\n","export const MESSAGE = {\n    0x80: \"Note Off\",\n    0x90: \"Note On\",\n    0xA0: \"AfterTouch\",\n    0xB0: \"Control Change\",\n    0xC0: \"Program Change\",\n    0xD0: \"Channel Pressure\",\n    0xE0: \"Pitch Wheel\"\n};\n\nexport const CONTROLER = {\n    0: \"Bank Select (coarse)\",\n    1: \"Modulation Wheel (coarse)\",\n    2: \"Breath controller (coarse)\",\n    4: \"Foot Pedal (coarse)\",\n    5: \"Portamento Time (coarse)\",\n    6: \"Data Entry (coarse)\",\n    7: \"Volume (coarse)\",\n    8: \"Balance (coarse)\",\n    10: \"Pan position (coarse)\",\n    11: \"Expression (coarse)\",\n    12: \"Effect Control 1 (coarse)\",\n    13: \"Effect Control 2 (coarse)\",\n    16: \"General Purpose Slider 1\",\n    17: \"General Purpose Slider 2\",\n    18: \"General Purpose Slider 3\",\n    19: \"General Purpose Slider 4\",\n    32: \"Bank Select (fine)\",\n    33: \"Modulation Wheel (fine)\",\n    34: \"Breath controller (fine)\",\n    36: \"Foot Pedal (fine)\",\n    37: \"Portamento Time (fine)\",\n    38: \"Data Entry (fine)\",\n    39: \"Volume (fine)\",\n    40: \"Balance (fine)\",\n    42: \"Pan position (fine)\",\n    43: \"Expression (fine)\",\n    44: \"Effect Control 1 (fine)\",\n    45: \"Effect Control 2 (fine)\",\n    64: \"Hold Pedal (on/off)\",\n    65: \"Portamento (on/off)\",\n    66: \"Sustenuto Pedal (on/off)\",\n    67: \"Soft Pedal (on/off)\",\n    68: \"Legato Pedal (on/off)\",\n    69: \"Hold 2 Pedal (on/off)\",\n    70: \"Sound Variation\",\n    71: \"Sound Timbre\",\n    72: \"Sound Release Time\",\n    73: \"Sound Attack Time\",\n    74: \"Sound Brightness\",\n    75: \"Sound Control 6\",\n    76: \"Sound Control 7\",\n    77: \"Sound Control 8\",\n    78: \"Sound Control 9\",\n    79: \"Sound Control 10\",\n    80: \"General Purpose Button 1 (on/off)\",\n    81: \"General Purpose Button 2 (on/off)\",\n    82: \"General Purpose Button 3 (on/off)\",\n    83: \"General Purpose Button 4 (on/off)\",\n    91: \"Effects Level\",\n    92: \"Tremulo Level\",\n    93: \"Chorus Level\",\n    94: \"Celeste Level\",\n    95: \"Phaser Level\",\n    96: \"Data Button increment\",\n    97: \"Data Button decrement\",\n    98: \"Non-registered Parameter (fine)\",\n    99: \"Non-registered Parameter (coarse)\",\n    100: \"Registered Parameter (fine)\",\n    101: \"Registered Parameter (coarse)\",\n    120: \"All Sound Off\",\n    121: \"All Controllers Off\",\n    122: \"Local Keyboard (on/off)\",\n    123: \"All Notes Off\",\n    124: \"Omni Mode Off\",\n    125: \"Omni Mode On\",\n    126: \"Mono Operation\",\n    127: \"Poly Operation\"\n};\n","import React, {Component} from 'react';\nimport Midi from \"../components/Midi\";\nimport {produce} from \"immer\";\nimport MidiPort from \"../components/MidiPort\";\nimport parseMidi from 'parse-midi';\nimport {hs} from \"../utils/hexstring\";\nimport {CONTROLER, MESSAGE} from \"../utils/midi\";\nimport * as Note from \"tonal-note\";\nimport \"./Monitor.css\";\n\nconst MAX_MESSAGES = 40;\n\nclass Monitor extends Component {\n\n    state = {\n        messages: []\n    };\n\n    handleMidiInputEvent = (event) => {\n        // console.log(\"Monitor.handleMidiInputEvent\", event, event.type, event.data);\n        // if (event instanceof MIDIMessageEvent) {\n        this.setState(\n            produce(draft => {\n                let len = draft.messages.unshift(event.data);\n                if (len > MAX_MESSAGES) draft.messages.pop();\n            })\n        )\n        // }\n    };\n\n    renderPort = (port, selected, clickHandler) => {\n        if (port === undefined || port === null) return null;\n        return (\n            <MidiPort key={port.id} port={port} selected={selected} clickHandler={clickHandler} />\n        )\n    };\n\n    render() {\n\n        return (\n\n            <div className=\"wrapper\">\n                <div className=\"content\">\n                    <div>\n                        <div className=\"content-row step-1\">\n{/*\n                            <div className=\"background\">\n                                Connect\n                            </div>\n                            <div className=\"content-row-header\">\n                                1\n                            </div>\n*/}\n                            <div className=\"content-row-content row-middle-aligned\">\n                                <Midi only=\".*\" autoConnect=\".*\"\n                                      inputRenderer={this.renderPort} outputRenderer={this.renderPort}\n                                      onMidiInputEvent={this.handleMidiInputEvent}\n                                      className=\"sub-header\" >\n                                    <div className=\"no-midi\">Please connect your Pacer or any other MIDI device to your computer.</div>\n                                </Midi>\n                            </div>\n                        </div>\n                        <div className=\"content-row step-2\">\n{/*\n                            <div className=\"background\">\n                                View\n                            </div>\n                            <div className=\"content-row-header\">\n                                2\n                            </div>\n*/}\n                            <div className=\"content-row-content\">\n                                <div>\n                                    <h2>MIDI messages</h2>\n                                    <p>The messages are displayed in reverse chronological order (the most recent on top). Only the last 20 messages are displayed.</p>\n                                </div>\n                                <div className=\"messages\">\n                                    {this.state.messages.map((msg, i) => {      //TODO: display timestamp\n                                        let m = parseMidi(msg);\n                                        // console.log(m, h(m.messageCode));\n                                        let info2 = '';\n                                        let info3 = '';\n                                        switch (m.messageCode) {\n                                            case 0x80:      // {messageCode: 144, channel: 1, messageType: \"noteon\", key: 70, velocity: 21}\n                                            case 0x90:\n                                                info2 = Note.fromMidi(m.key);\n                                                info3 = `velocity: ${m.velocity}`;\n                                                break;\n                                            case 0xA0:  // \"AfterTouch\",\n                                                break;\n                                            case 0xB0:\n                                                info2 = CONTROLER[m.controlNumber];\n                                                info3 = m.controlValue;\n                                                break;\n                                            case 0xC0:          // {messageCode: 192, channel: 4, messageType: \"programchange\", program: 102} \"C0\"\n                                                info2 = `program: ${m.program}`;\n                                                info3 = '';\n                                                break;\n                                            case 0xD0:  // \"Channel Pressure\\\",\\n\"\n                                                break;\n                                            case 0xE0:          // {messageCode: 224, channel: 1, messageType: \"pitchbendchange\", pitchBend: 8283, pitchBendMultiplier: 0.011109754608716884}\n                                                info2 = `bend: ${m.pitchBend}`;\n                                                info3 = `multiplier: ${m.pitchBendMultiplier}`;\n                                                break;\n                                            default:\n                                                break;\n                                        }\n                                        return (\n                                            <div>\n                                                <span className=\"code\">[{hs(msg)}]</span>\n                                                <span className=\"msg-channel\">Channel {m.channel}</span>\n                                                <span className=\"msg-name\">{MESSAGE[m.messageCode]}</span>\n                                                <span className=\"msg-data\">{info2}</span>\n                                                <span className=\"msg-data\">{info3}</span>\n                                            </div>\n                                        );\n                                    })}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n{/*\n\n                <div className=\"help\">\n                    <h3>Help</h3>\n                </div>\n*/}\n            </div>\n        );\n    }\n\n}\n\nexport default Monitor;\n","import React from 'react';\nimport \"./Footer.css\";\n\nconst Footer = () => {\n    return (\n        <div className=\"footer\">\n            <div className=\"gh\">\n                <a href=\"https://github.com/francoisgeorgy/pacer-editor\" target=\"_blank\" rel=\"noopener noreferrer\">Source code available on GitHub</a>\n                <a aria-label=\"Homepage\" title=\"project on github\" href=\"https://github.com/francoisgeorgy/pacer-editor\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    <svg height=\"24\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"24\" aria-hidden=\"true\">\n                        <path fillRule=\"evenodd\" d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z\"></path>\n                    </svg>\n                </a>\n            </div>\n            <div>\n                <p>“Nektar Technology”, the logo and all other Nektar Technology product, technology or service names and\n                    logos are trademarks or registered trademarks of Nektar Technology, Inc.</p>\n                <p>This web site is not endorsed by, directly affiliated with, maintained, or sponsored by Nektar Technology.\n                    This web site is published under <a href=\"https://www.gnu.org/licenses/gpl-3.0.en.html\" target=\"_blank\" rel=\"noopener noreferrer\">GNU General Public License v3</a>\n                </p>\n            </div>\n        </div>\n    );\n};\n\nexport default Footer;\n","import React, {Component} from 'react';\n\nclass Global extends Component {\n\n    render() {\n\n        return (\n            <div className=\"wrapper\">\n                <div className=\"content\">\n                    <div className=\"content-row step-1\">\n{/*\n                        <div className=\"background\">\n                            Connect\n                        </div>\n                        <div className=\"content-row-header\">\n                            1\n                        </div>\n*/}\n                        <div className=\"content-row-content\">\n                        </div>\n                    </div>\n                    <div className=\"content-row step-2\">\n{/*\n                        <div className=\"background\">\n                            Select\n                        </div>\n                        <div className=\"content-row-header\">\n                            2\n                        </div>\n*/}\n                        <div className=\"content-row-content row-middle-aligned\">\n                            <div className=\"sorry\">Sorry, this feature is not implemented yet.</div>\n                        </div>\n                    </div>\n                    <div className=\"content-row step-3\">\n{/*\n                        <div className=\"background\">\n                            Edit\n                        </div>\n                        <div className=\"content-row-header\">\n                            3\n                        </div>\n*/}\n                        <div className=\"content-row-content\">\n                        </div>\n                    </div>\n                    <div className=\"content-row step-4\">\n{/*\n                        <div className=\"background\">\n                            Write\n                        </div>\n                        <div className=\"content-row-header\">\n                            4\n                        </div>\n*/}\n                        <div className=\"content-row-content\">\n                        </div>\n                    </div>\n                </div>\n                <div className=\"help\">\n                    <h3>Help</h3>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default Global;\n","import React, {Component} from 'react';\nimport Dropzone from \"react-dropzone\";\nimport {produce} from \"immer\";\nimport {isSysexData, mergeDeep, parseSysexDump} from \"../utils/sysex\";\nimport DumpSysex from \"../components/DumpSysex\";\nimport './DumpDecoder.css';\nimport {hs} from \"../utils/hexstring\";\nimport Midi from \"../components/Midi\";\nimport MidiPort from \"../components/MidiPort\";\nimport {PACER_MIDI_PORT_NAME} from \"../pacer\";\n\nconst MAX_FILE_SIZE = 5 * 1024*1024;\n\nclass DumpDecoder extends Component {\n\n    state = {\n        data: null\n    };\n\n    /**\n     *\n     * @param files\n     * @returns {Promise<void>}\n     */\n    async readFiles(files) {\n        await Promise.all(files.map(\n            async file => {\n                if (file.size > MAX_FILE_SIZE) {\n                    console.warn(`${file.name}: file too big, ${file.size}`);\n                } else {\n                    const data = new Uint8Array(await new Response(file).arrayBuffer());\n                    if (isSysexData(data)) {\n                        this.setState(\n                            produce(draft => {\n                                draft.data = mergeDeep(draft.data || {}, parseSysexDump(data));\n                                this.props.onBusy(false);\n                            })\n                        )\n                    } else {\n                        console.log(\"readFiles: not a sysfile\", hs(data.slice(0, 5)));\n                    }\n                    // non sysex files are ignored\n                }\n                // too big files are ignored\n            }\n        ));\n    }\n\n    /**\n     * Drop Zone handler\n     * @param files\n     */\n    onDrop = (files) => {\n        console.log('drop', files);\n        this.props.onBusy(true);\n        this.setState({data: null}, () => {this.readFiles(files)});\n        // this.readFiles(files);  // returned promise is ignored, this is normal.\n    };\n\n    handleMidiInputEvent = (event) => {\n        console.log(\"DumpDecoder.handleMidiInputEvent\", event, event.data);\n        // if (event instanceof MIDIMessageEvent) {\n        if (isSysexData(event.data)) {\n            console.log(\"DumpDecoder.handleMidiInputEvent: data is SysEx\");\n            this.setState(\n                produce(draft => {\n                    draft.data = mergeDeep(draft.data || {}, parseSysexDump(event.data));\n                    // this.props.onBusy(false);\n                })\n            )\n        } else {\n            console.log(\"MIDI message is not a sysex message\")\n        }\n        // }\n    };\n\n    renderPort = (port, selected, clickHandler) => {\n        if (port === undefined || port === null) return null;\n        return (\n            <MidiPort key={port.id} port={port} selected={selected} clickHandler={clickHandler} />\n        )\n    };\n\n\n    /**\n     * @returns {*}\n     */\n    render() {\n\n        const { data } = this.state;\n\n        console.log(\"DumpDecoder.render\", this.props);\n\n        return (\n            <div className=\"wrapper\">\n                <div className=\"content\">\n                    <div className=\"content-row step-1\">\n{/*\n                        <div className=\"background\">\n                            Connect\n                        </div>\n                        <div className=\"content-row-header\">\n                            1\n                        </div>\n*/}\n                        <div className=\"content-row-content row-middle-aligned\">\n                            <Midi only={PACER_MIDI_PORT_NAME} autoConnect={PACER_MIDI_PORT_NAME}\n                                  inputRenderer={this.renderPort} outputRenderer={this.renderPort}\n                                  onMidiInputEvent={this.handleMidiInputEvent}\n                                  className=\"sub-header\" >\n                                <div className=\"no-midi\">Please connect your Pacer to your computer.</div>\n                            </Midi>\n                        </div>\n                    </div>\n                    <div className=\"content-row step-2\">\n{/*\n                        <div className=\"background\">\n                            Get dump\n                        </div>\n                        <div className=\"content-row-header\">\n                            2\n                        </div>\n*/}\n\n\n                        <div className=\"content-row-content\">\n                            <h2>Dump:</h2>\n                            {/*<Dropzone onDrop={this.onDrop} className=\"drop-zone\">*/}\n                                {/*Drop a binary sysex file here or click to open the file dialog*/}\n                            {/*</Dropzone>*/}\n                            Send a dump from your Pacer or drop a binary sysex file onto the drop zone on the right.\n                        </div>\n                    </div>\n                    <div className=\"content-row step-3\">\n{/*\n                        <div className=\"background\">\n                            Decode\n                        </div>\n                        <div className=\"content-row-header\">\n                            3\n                        </div>\n*/}\n                        <div className=\"content-row-content\">\n                            <DumpSysex data={data} />\n\n{/*\n                            <div className=\"debug\">\n                                <pre>{JSON.stringify(data, null, 4)}</pre>\n                            </div>\n*/}\n\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"help\">\n                    <Dropzone onDrop={this.onDrop} className=\"drop-zone\">\n                        Drop a binary sysex file here<br />or click to open the file dialog\n                    </Dropzone>\n\n                    {/*<h3>Help</h3>*/}\n                </div>\n\n            </div>\n\n        );\n    }\n}\n\nexport default DumpDecoder;\n","import React, {Component, Fragment} from 'react';\nimport {\n    MSG_CTRL_OFF,\n    MSG_SW_NOTE,\n    MSG_TYPES_FULLNAME_SW,\n    MSG_TYPES_FULLNAME_MIDI_SORTED,\n    MSG_TYPES_DATA_HELP\n} from \"../pacer\";\nimport * as Note from \"tonal-note\";\nimport \"./MidiSettingsEditor.css\";\n\nconst MidiNote = ({ note, onChange }) => {\n    // console.log(`MidiNote ${note}`, typeof note);\n    return (\n        <select onChange={(event) => onChange(event.target.value)} defaultValue={note}>\n            {\n                Array.from(Array(127).keys()).map(\n                    i => {\n                        let n = Note.fromMidi(i, true);\n                        return <option key={i} value={i}>{n}</option>\n                    })\n            }\n        </select>\n    );\n};\n\nconst Setting = ({ index, config, updateCallback }) => {\n\n    let inactive = config.msg_type === MSG_CTRL_OFF;\n\n    if (inactive) {\n        return (\n            <Fragment>\n                <div className=\"setting-row-header\">setting {index}:</div>\n                <div>\n                    <select onChange={(event) => updateCallback(\"msg_type\", null, event.target.value)} defaultValue={config.msg_type}>\n                        {\n                            Object.keys(MSG_TYPES_FULLNAME_SW).map(\n                                key => {\n                                    // let n = Note.fromMidi(i, true);\n                                    return <option key={key} value={key}>{MSG_TYPES_FULLNAME_SW[key]}</option>\n                                })\n                        }\n                    </select>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n            </Fragment>\n        );\n    }\n\n    let d0, d1, d2;\n    if (config.msg_type === MSG_SW_NOTE) {\n        // d0 = `note ${Note.fromMidi(config.data[0], true)}`;\n        d0 = <MidiNote note={config.data[0]} onChange={(value) => updateCallback(\"data\", 0, value)} />;\n        d1 = <input type=\"text\" value={config.data[1]} onChange={(event) => updateCallback(\"data\", 1, event.target.value)} />;\n        d2 = '';\n    } else {\n        d0 = <input type=\"text\" value={config.data[0]} onChange={(event) => updateCallback(\"data\", 0, event.target.value)} />;\n        d1 = <input type=\"text\" value={config.data[1]} onChange={(event) => updateCallback(\"data\", 1, event.target.value)} />;\n        d2 = <input type=\"text\" value={config.data[2]} onChange={(event) => updateCallback(\"data\", 2, event.target.value)} />;\n    }\n\n    return (\n        <Fragment>\n            <div className=\"setting-row-header\">Setting {index}:</div>\n            <div>\n                <select onChange={(event) => updateCallback(\"msg_type\", null, event.target.value)} defaultValue={config.msg_type}>\n                {\n                    MSG_TYPES_FULLNAME_MIDI_SORTED.map(\n                        v => {\n                            return <option key={v.key} value={v.key}>{v.value}</option>\n                        })\n                }\n                </select>\n            </div>\n            <div>{d0}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][0]}</div></div>\n            <div>{d1}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][1]}</div></div>\n            <div>{d2}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][2]}</div></div>\n            <div>\n                <select onChange={(event) => updateCallback(\"channel\", null, event.target.value)} defaultValue={config.channel}>\n                    {\n                        Array.from(Array(16).keys()).map(i => <option key={i} value={i}>{i}</option>)\n                    }\n                </select>\n            </div>\n        </Fragment>\n    );\n};\n\nclass MidiSettingsEditor extends Component {\n\n    onSettingUpdate = (settingIndex, dataType, dataIndex, value) => {\n        // console.log(`MidiSettingsEditor.onSettingUpdate`, settingIndex, dataType, dataIndex, value);\n        this.props.onUpdate(settingIndex, dataType, dataIndex, value);\n    };\n\n    render() {\n\n        const settings = this.props.settings;\n\n        // console.log(\"MidiSettingsEditor.render\", settings);\n\n        return (\n            <div className=\"settings\">\n                <div></div>\n                <div className=\"setting-col-header\">Type</div>\n                <div className=\"setting-col-header\">Data 1</div>\n                <div className=\"setting-col-header\">Data 2</div>\n                <div className=\"setting-col-header\">Data 3</div>\n                <div className=\"setting-col-header\">MIDI Ch.</div>\n                {Object.keys(settings).map(i =>\n                    <Setting key={i} index={i} config={settings[i]} updateCallback={(dataType, dataIndex, value) => this.onSettingUpdate(i, dataType, dataIndex, value)} />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default MidiSettingsEditor;\n","import React, {Component} from 'react';\n// import \"./PresetNameEditor.css\";\n\nclass PresetNameEditor extends Component {\n\n    onNameUpdate = (event) => {\n        console.log(`PresetNameEditor.onSettingUpdate`, event.target.value);\n        this.props.onUpdate(event.target.value.length > 5 ? event.target.value.substr(0, 5) : event.target.value);\n    };\n\n    render() {\n\n        const name = this.props.name;\n\n        console.log(\"PresetNameEditor.render\", name);\n\n        return (\n            <div className=\"preset-name\">\n                <p>The preset name is limited to 5 characters.</p>\n                <span className=\"strong\">Name:</span> <input value={name} onChange={this.onNameUpdate} size={8} />\n            </div>\n        );\n    }\n}\n\nexport default PresetNameEditor;\n","import React, {Component, Fragment} from 'react';\nimport PresetSelector from \"../components/PresetSelector\";\nimport {\n    buildPresetNameSysex,\n    getMidiSettingUpdateSysexMessages,\n    isSysexData,\n    mergeDeep,\n    parseSysexDump\n} from \"../utils/sysex\";\nimport Midi from \"../components/Midi\";\nimport MidiPort from \"../components/MidiPort\";\nimport Dropzone from \"react-dropzone\";\nimport \"./Preset.css\";\nimport Status from \"../components/Status\";\nimport {produce} from \"immer\";\nimport {\n    MSG_CTRL_OFF,\n    PACER_MIDI_PORT_NAME,\n    requestPreset,\n    SYSEX_SIGNATURE,\n    TARGET_PRESET\n} from \"../pacer\";\nimport {hs} from \"../utils/hexstring\";\nimport MidiSettingsEditor from \"../components/MidiSettingsEditor\";\nimport {inputName, outputById, outputName} from \"../utils/ports\";\nimport PresetNameEditor from \"../components/PresetNameEditor\";\n\nconst MAX_FILE_SIZE = 5 * 1024*1024;\n\nconst MAX_STATUS_MESSAGES = 40;\n\nclass PresetMidi extends Component {\n\n    state = {\n        output: null,       // MIDI output port used for output\n        presetIndex: null,  //\n        // controlId: \"\",      //\n        changed: false,     // true when the control has been edited\n        data: null,\n        statusMessages: []\n    };\n\n    addStatusMessage = (type, message) => {\n        this.setState(\n            produce(draft => {\n                let m = { type, message };\n                // let len = draft.statusMessages.unshift(m);\n                // if (len > MAX_STATUS_MESSAGES) draft.statusMessages.pop();\n                let len = draft.statusMessages.push(m);\n                if (len > MAX_STATUS_MESSAGES) draft.statusMessages.shift();\n            })\n        );\n    };\n\n    addInfoMessage= message => {\n        this.addStatusMessage(\"info\", message);\n    };\n\n    addWarningMessage= message => {\n        this.addStatusMessage(\"warning\", message);\n    };\n\n    addErrorMessage= message => {\n        this.addStatusMessage(\"error\", message);\n    };\n\n    /**\n     *\n     * @param files\n     * @returns {Promise<void>}\n     */\n    async readFiles(files) {\n        await Promise.all(files.map(\n            async file => {\n                if (file.size > MAX_FILE_SIZE) {\n                    console.warn(`readFiles: ${file.name}: file too big, ${file.size}`);\n                    this.addWarningMessage(\"file too big\");\n                } else {\n                    const data = new Uint8Array(await new Response(file).arrayBuffer());\n                    if (isSysexData(data)) {\n                        this.setState(\n                            produce(draft => {\n                                // draft.data = mergeDeep(draft.data || {}, parseSysexDump(data));\n                                draft.data = parseSysexDump(data);\n                                let pId = Object.keys(draft.data[TARGET_PRESET])[0];\n                                // let cId = Object.keys(draft.data[TARGET_PRESET][pId][\"controls\"])[0];\n                                draft.presetIndex = parseInt(pId, 10);\n                                // console.log(\"PresetMidi.readFiles: preset index\", pId, draft.presetIndex);\n                                // draft.controlId = parseInt(cId, 10);\n                                // this.props.onBusy(false);\n                            })\n                        );\n                        this.addInfoMessage(\"sysfile decoded\");\n                    } else {\n                        this.addWarningMessage(\"not a sysfile\");\n                        console.log(\"readFiles: not a sysfile\", hs(data.slice(0, 5)));\n                    }\n                    // non sysex files are ignored\n                }\n                // too big files are ignored\n            }\n        ));\n    }\n\n    /**\n     * Drop Zone handler\n     * @param files\n     */\n    onDrop = (files) => {\n        console.log('drop', files);\n        // this.props.onBusy(true);\n        this.setState({data: null}, () => {this.readFiles(files)});\n        // this.readFiles(files);  // returned promise is ignored, this is normal.\n    };\n\n    selectPreset = (id) => {\n        console.log(`selectPreset ${id}`);\n        if (id !== this.state.presetIndex) {\n            this.setState({\n                presetIndex: id,\n                data: null\n            });\n        } else {\n            this.setState({\n                presetIndex: id\n            });\n        }\n        // this.props.onBusy(true);\n        this.sendSysex(requestPreset(id));\n    };\n\n    /**\n     * dataIndex is only used when dataType == \"data\"\n     */\n    updateMidiSettings = (settingIndex, dataType, dataIndex, value) => {\n        console.log(\"PresetMidi.updateMidiSettings\", settingIndex, dataIndex, value);\n        let v = parseInt(value, 10);\n        this.setState(\n            produce(draft => {\n                if (dataType === \"data\") {\n                    draft.data[TARGET_PRESET][draft.presetIndex][\"midi\"][settingIndex][\"data\"][dataIndex] = v;\n                } else {\n                    draft.data[TARGET_PRESET][draft.presetIndex][\"midi\"][settingIndex][dataType] = v;\n                }\n                if (dataType === \"msg_type\") {\n                    console.log('msg_type', dataType, value);\n                    if (v === MSG_CTRL_OFF) {\n                        console.log('set active 0');\n                        draft.data[TARGET_PRESET][draft.presetIndex][\"midi\"][settingIndex][\"active\"] = 0;\n                    } else {\n                        console.log('set active 1');\n                        draft.data[TARGET_PRESET][draft.presetIndex][\"midi\"][settingIndex][\"active\"] = 1;\n                    }\n                }\n                draft.data[TARGET_PRESET][draft.presetIndex][\"midi\"][settingIndex][\"changed\"] = true;\n                draft.changed = true;\n            })\n        );\n    };\n\n    updatePresetName = (name) => {\n        console.log(\"PresetMidi.updateName\", name);\n        if (name === undefined || name === null) return;\n        if (name.length > 5) {\n            console.warn(`PresetMidi.updateName: name too long: ${name}`);\n            return;\n        }\n        this.setState(\n            produce(draft => {\n                draft.data[TARGET_PRESET][draft.presetIndex][\"name\"] = name;    // TODO : buld update message\n                draft.data[TARGET_PRESET][draft.presetIndex][\"changed\"] = true;\n                draft.changed = true;\n            })\n        );\n    };\n\n    /**\n     *\n     */\n    handleMidiInputEvent = (event) => {\n        // console.log(\"PresetMidi.handleMidiInputEvent\", event, event.data);\n        // if (event instanceof MIDIMessageEvent) {\n        if (isSysexData(event.data)) {\n            // this.props.onBusy(true);\n            this.setState(\n                produce(draft => {\n                    draft.data = mergeDeep(draft.data || {}, parseSysexDump(event.data));\n                    let pId = Object.keys(draft.data[TARGET_PRESET])[0];\n                    draft.presetIndex = parseInt(pId, 10);\n                    // console.log(`PresetMidi.handleMidiInputEvent, preset Id from data is ${draft.presetIndex}`);\n                    // this.props.onBusy(false);\n                })\n            );\n            this.addInfoMessage(`sysex received (${event.data.length} bytes)`);\n        } else {\n            console.log(\"MIDI message is not a sysex message\")\n        }\n        // }\n    };\n\n    renderPort = (port, selected, clickHandler) => {\n        if (port === undefined || port === null) return null;\n        return (\n            <MidiPort key={port.id} port={port} selected={selected} clickHandler={clickHandler} />\n        )\n    };\n\n    onInputConnection = (port_id) => {\n        this.addInfoMessage(`input ${inputName(port_id)} connected`);\n    };\n\n    onInputDisconnection = (port_id) => {\n        this.addInfoMessage(`input ${inputName(port_id)} disconnected`);\n    };\n\n    onOutputConnection = (port_id) => {\n        this.setState(\n            produce(draft => {\n                draft.output = port_id;\n            })\n        );\n        this.addInfoMessage(`output ${outputName(port_id)} connected`);\n    };\n\n    onOutputDisconnection = (port_id) => {\n        this.addInfoMessage(`output ${outputName(port_id)} disconnected`);\n    };\n\n    sendSysex = msg => {\n        console.log(\"sendSysex\", msg);\n        if (!this.state.output) {\n            console.warn(\"no output enabled to send the message\", this.state);\n            return;\n        }\n        let out = outputById(this.state.output);\n        if (!out) {\n            console.warn(`send: output ${this.state.output} not found`);\n            return;\n        }\n        // this.setState(\n        //     // {data: null},\n        //     () => out.sendSysex(SYSEX_SIGNATURE, msg)\n        // );\n        // console.log(`PresetMidi: call out.sendSysex()`, hs(msg));\n        out.sendSysex(SYSEX_SIGNATURE, msg);\n    };\n\n    updatePacer = (messages) => {\n        console.log(\"PresetMidi.updatePacer\");\n        for (let m of messages) {\n            this.sendSysex(m);\n        }\n        this.addInfoMessage(`update${messages.length > 1 ? 's' : ''} sent to Pacer`);\n    };\n\n    render() {\n\n        const { presetIndex, data, changed } = this.state;\n\n        // console.log(\"PresetMidi.render: \", presetIndex);\n\n        let showEditor = false;\n\n        if (data) {\n\n            // console.log(\"data length\", Object.keys(data[TARGET_PRESET][presetIndex][\"midi\"]).length);\n\n            showEditor = true;\n\n            if (!(TARGET_PRESET in data)) {\n                console.log(`PresetMidi: invalid data`, data);\n                showEditor = false;\n            }\n\n            if (showEditor && !(presetIndex in data[TARGET_PRESET])) {\n                // console.log(`PresetMid: preset ${presetIndex} not found in data`);\n                showEditor = false;\n            }\n\n            if (showEditor && !(\"midi\" in data[TARGET_PRESET][presetIndex])) {\n                // console.log(`PresetMidi: midi not found in data`);\n                showEditor = false;\n            }\n\n        }\n\n        showEditor = showEditor && (Object.keys(data[TARGET_PRESET][presetIndex][\"midi\"]).length === 16);\n\n        let updateMessages = [];\n        if (showEditor) {\n            updateMessages = getMidiSettingUpdateSysexMessages(presetIndex, data);\n            let n = buildPresetNameSysex(presetIndex, data);\n            if (n) {\n                updateMessages.push(n);\n            }\n        }\n\n        // console.log(\"PresetMidi.render\", showEditor, presetIndex);\n\n        return (\n            <div className=\"wrapper\">\n                <div className=\"content\">\n\n                    <div className=\"content-row step-1\">\n{/*\n                        <div className=\"background\">\n                            Connect\n                        </div>\n                        <div className=\"content-row-header\">\n                            1\n                        </div>\n*/}\n                        <div className=\"content-row-content row-middle-aligned\">\n                            <Midi only={PACER_MIDI_PORT_NAME} autoConnect={PACER_MIDI_PORT_NAME}\n                                  inputRenderer={this.renderPort} outputRenderer={this.renderPort}\n                                  onMidiInputEvent={this.handleMidiInputEvent}\n                                  onInputConnection={this.onInputConnection}\n                                  onInputDisconnection={this.onInputDisconnection}\n                                  onOutputConnection={this.onOutputConnection}\n                                  onOutputDisconnection={this.onOutputDisconnection}\n                                  className=\"sub-header\" >\n                                <div className=\"no-midi\">Please connect your Pacer to your computer.</div>\n                            </Midi>\n                        </div>\n                    </div>\n                    <div className=\"content-row step-2\">\n{/*\n                        <div className=\"background\">\n                            Select\n                        </div>\n                        <div className=\"content-row-header\">\n                            2\n                        </div>\n*/}\n                        <div className=\"content-row-content\">\n\n                            <h2>Choose the preset to edit:</h2>\n\n                            <div className=\"selectors\">\n                                <PresetSelector currentPreset={presetIndex} onClick={this.selectPreset} />\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"content-row step-3\">\n{/*\n                        <div className=\"background\">\n                            Edit\n                        </div>\n                        <div className=\"content-row-header\">\n                            3\n                        </div>\n*/}\n                        <div className=\"content-row-content\">\n                            {showEditor &&\n                            <Fragment>\n                                <h2>Preset name:</h2>\n                                <PresetNameEditor name={data[TARGET_PRESET][presetIndex][\"name\"]}\n                                                    onUpdate={(name) => this.updatePresetName(name)} />\n                                <h2>Preset MIDI settings:</h2>\n                                <MidiSettingsEditor settings={data[TARGET_PRESET][presetIndex][\"midi\"]}\n                                                    onUpdate={(settingIndex, dataType, dataIndex, value) => this.updateMidiSettings(settingIndex, dataType, dataIndex, value)} />\n                            </Fragment>\n                            }\n                        </div>\n                    </div>\n\n                    <div className=\"content-row step-4\">\n{/*\n                        <div className=\"background\">\n                            Write\n                        </div>\n                        <div className=\"content-row-header\">\n                            4\n                        </div>\n*/}\n                        <div className=\"content-row-content\">\n                            {changed &&\n                            <Fragment>\n                                <h2>Send the updated config to the Pacer:</h2>\n                                <div className=\"actions\">\n                                    <button className=\"update\" onClick={() => this.updatePacer(updateMessages)}>Update Pacer</button>\n                                </div>\n                            </Fragment>\n                            }\n                        </div>\n                    </div>\n\n                    <div>\n                        {showEditor && <div className=\"debug\">\n                            <h4>[Debug] update message to send to Pacer:</h4>\n                            <div className=\"message-to-send\">\n                                {updateMessages.map((m, i) => <div key={i} className=\"code\">{hs(m)}</div>)}\n                            </div>\n                        </div>}\n\n{/*\n                        {data && <div className=\"debug\">\n                            <h4>[Debug] sysex data:</h4>\n                            <pre>{JSON.stringify(data, null, 4)}</pre>\n                        </div>}\n*/}\n\n                    </div>\n                </div>\n\n                <div className=\"help\">\n\n                    <Dropzone onDrop={this.onDrop} className=\"drop-zone\">\n                        Drop a binary sysex file here<br />or click to open the file dialog\n                    </Dropzone>\n\n                    <h3>Log:</h3>\n                    <Status messages={this.state.statusMessages} />\n\n                </div>\n\n            </div>\n        );\n    }\n\n}\n\nexport default PresetMidi;\n","import React, {Component} from 'react';\nimport './App.css';\nimport { HashRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport TestSender from \"./pages/TestSender\";\nimport Preset from \"./pages/Preset\";\nimport Monitor from \"./pages/Monitor\";\nimport Footer from \"./components/Footer\";\nimport Global from \"./pages/Global\";\nimport DumpDecoder from \"./pages/DumpDecoder\";\n// import Chords from \"./pages/Chords\";\nimport PresetMidi from \"./pages/PresetMidi\";\n\n\nconst MenuLink = ({ label, to, activeOnlyWhenExact }) => (\n    <Route\n        path={to}\n        exact={activeOnlyWhenExact}\n        children={({ match }) => (\n            <span className={match ? \"header-link active\" : \"header-link\"}>\n                <Link to={to}>{label}</Link>\n            </span>\n        )}\n    />\n);\n\n\nclass App extends Component {\n\n    state = {\n        busy: false\n    };\n\n    /**\n     *\n     * @param busy boolean\n     */\n    onBusy = (busy) => {\n        this.setState({ busy });\n    };\n\n    /**\n     * Main app render\n     * @returns {*}\n     */\n    render() {\n        const { busy } = this.state;\n\n        return (\n            <Router>\n                <div className=\"app\">\n\n                    <header className=\"header\">\n                        {/*<h1>Pacer Editor</h1>*/}\n                        <MenuLink activeOnlyWhenExact={true} to=\"/\" label=\"Home\" />\n                        <MenuLink to=\"/preset\" label=\"Preset Controls\" />\n                        <MenuLink to=\"/presetmidi\" label=\"Preset Name & MIDI\" />\n                        <MenuLink to=\"/global\" label=\"Global config\" />\n                        {/*<MenuLink to=\"/chords\" label=\"Chords\" />*/}\n                        <MenuLink to=\"/monitor\" label=\"MIDI monitor\" />\n                        <MenuLink to=\"/dumpdecoder\" label=\"Dump decoder\" />\n                        <MenuLink to=\"/testsender\" label=\"Debug\" />\n                        <div className=\"spacer\">\n                        </div>\n                        {busy && <div className=\"busy\">busy</div>}\n                    </header>\n\n                    {/*<div className=\"wrapper\">*/}\n                        {/*<div className=\"content\">*/}\n                            <Switch>\n                                <Route exact={true} path=\"/\" render={\n                                    props => (\n                                        <Home />\n                                    )\n                                }/>\n                                <Route path=\"/preset\" render={\n                                    props => (\n                                        <Preset onBusy={this.onBusy} />\n                                    )\n                                }/>\n                                <Route path=\"/presetmidi\" render={\n                                    props => (\n                                        <PresetMidi onBusy={this.onBusy} />\n                                    )\n                                }/>\n                                <Route path=\"/global\" render={\n                                    props => (\n                                        <Global onBusy={this.onBusy} />\n                                    )\n                                }/>\n{/*\n                                <Route path=\"/chords\" render={\n                                    props => (\n                                        <Chords onBusy={this.onBusy} />\n                                    )\n                                }/>\n*/}\n                                <Route path=\"/monitor\" render={\n                                    props => (\n                                        <Monitor onBusy={this.onBusy} />\n                                    )\n                                }/>\n                                <Route path=\"/dumpdecoder\" render={\n                                    props => (\n                                        <DumpDecoder onBusy={this.onBusy} />\n                                    )\n                                }/>\n                                <Route path=\"/testsender\" render={\n                                    props => (\n                                        <TestSender onBusy={this.onBusy} />\n                                    )\n                                }/>\n                            </Switch>\n                        {/*</div>*/}\n                    {/*</div>*/}\n\n                    <Footer />\n\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nfunction noop() {}\nif (process.env.NODE_ENV !== 'development') {\n    console.log = noop;\n    console.warn = noop;\n    console.error = noop;\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}