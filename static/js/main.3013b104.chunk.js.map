{"version":3,"sources":["pages/Home.js","utils/hexstring.js","pacer/index.js","utils/sysex.js","utils/ports.js","components/DumpSysex.js","components/Midi.js","components/MidiPort.js","pages/TestSender.js","components/PresetSelector.js","components/ControlSelector.js","components/ControlStepsEditor.js","components/ControlModeEditor.js","components/Status.js","pages/Preset.js","utils/midi.js","pages/Monitor.js","components/Footer.js","pages/Global.js","pages/DumpDecoder.js","components/ChordsSelector.js","pages/Chords.js","components/MidiSettingsEditor.js","components/PresetNameEditor.js","pages/PresetMidi.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","className","href","target","rel","src","alt","Component","h","v","undefined","str","len","char","s","c","n","length","padZero","toString","toUpperCase","hs","data","Array","from","map","join","fromHexString","string","sep","replace","Uint8Array","i","parseInt","substr","sortObject","obj","arr","prop","hasOwnProperty","push","key","value","sort","b","localeCompare","SYSEX_SIGNATURE","SYSEX_HEADER","COMMAND_SET","COMMAND_GET","TARGET_PRESET","TARGETS","_TARGETS","Object","defineProperty","CONTROL_NAME","CONTROL_STOMPSWITCH_1","CONTROL_STOMPSWITCH_6","CONTROL_STOMPSWITCH_A","CONTROL_FOOTSWITCH_4","CONTROL_EXPRESSION_PEDAL_1","CONTROL_EXPRESSION_PEDAL_2","CONTROL_MIDI","CONTROLS","_CONTROLS","STOMPSWITCHES_TOP","STOMPSWITCHES_BOTTOM","FOOTSWITCHES","EXPPEDALS","MSG_CTRL_OFF","MSG_TYPES","_MSG_TYPES","MSG_TYPES_FULLNAME_SW","_MSG_TYPES_FULLNAME_S","MSG_TYPES_FULLNAME_SW_SORTED","MSG_TYPES_FULLNAME_MIDI_SORTED","_MSG_TYPES_FULLNAME_E","_MSG_TYPES_FULLNAME_M","MSG_TYPES_DATA_HELP","_MSG_TYPES_DATA_HELP","COLORS","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","CONTROL_MODE_ELEMENT","CONTROL_MODES","_CONTROL_MODES","checksum","bytes","reduce","previousValue","currentValue","requestPresetObj","index","msg","cs","concat","SYSEX_START","SYSEX_END","CMD","TGT","IDX","OBJ","ELM","isObject","item","isArray","mergeDeep","_len","arguments","sources","_key","source","shift","assign","apply","isSysexData","byteLength","parseSysexMessage","obj_type","message","cmd","tgt","idx","console","warn","log","String","fromCharCode","slice","getPresetName","steps","e","config","channel","msg_type","active","getControlStep","mode_cfg","control_mode","getControlMode","led_cfg","data_len","step","cfg","d","getControlLED","getMidiSetting","parseSysexDump","presets","indexOf","k","manufacturer_id","NEKTAR_TECHNOLOGY_INC","getControlUpdateSysexMessages","presetIndex","controlId","msgs","_arr","keys","_i","changed","buildControlStepSysex","mode","buildControlModeSysex","getMidiSettingUpdateSysexMessages","settings","_arr2","_i2","setting","buildMidiSettingStepSysex","portById","id","p","WebMidi","inputs","find","outputs","inputById","outputById","inputName","name","outputName","MidiTable","_ref","colSpan","t","Note","MidiSettings","_ref2","DumpSysex_MidiTable","ControlTable","_ref3","Controls","_ref4","controls","DumpSysex_ControlTable","Preset","_ref5","Math","floor","presetIndexToXY","DumpSysex_Controls","DumpSysex_MidiSettings","Presets","_ref6","DumpSysex_Preset","DumpSysex","_ref7","DumpSysex_Presets","Midi","state","input","output","connectInput","port","_this","props","onMidiInputEvent","hasListener","addListener","onInputConnection","disconnectInput","removeListener","onInputDisconnection","connectOutput","setState","onOutputConnection","disconnectOutput","port_id","onOutputDisconnection","autoConnectInput","autoConnect","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","type","match","err","return","autoConnectOutput","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","registerInputs","r","RegExp","only","filter","registerOutputs","unRegisterInputs","unRegisterOutputs","handleMidiConnectEvent","group","groupEnd","togglePort","prev","midiOn","this","_this2","_this$state","children","inputRenderer","outputRenderer","defaultProps","classname","MidiPorts","isSelected","selected","clickHandler","react_switch_default","onChange","checked","height","width","TestSender","messages","requestPreset","customMessage","updateCustomMessage","event","sendCustomMessage","sendSysex","handleMidiInputEvent","produce","draft","renderPort","components_MidiPort","setOutput","out","sendMessage","Midi_Midi","onClick","disabled","size","placeholder","src_components_DumpSysex","Selector","PresetSelector","currentPreset","react","PresetSelector_Selector","letter","digit","xy","charCodeAt","Control","ControlSelector","currentControl","ControlSelector_Control","LEDMidi","current_value","defaultValue","LEDColor","LEDNum","MidiNote","note","Step","d0","d1","d2","updateCallback","ControlStepsEditor_MidiNote","ControlStepsEditor_LEDColor","led_active_color","led_inactive_color","ControlStepsEditor_LEDNum","led_num","ControlStepsEditor_LEDMidi","led_midi_ctrl","ControlStepsEditor","onStepUpdate","stepIndex","dataType","dataIndex","onUpdate","ControlStepsEditor_Step","ControlModeEditor","Status","MAX_STATUS_MESSAGES","statusMessages","addStatusMessage","m","addInfoMessage","addWarningMessage","addErrorMessage","onDrop","files","readFiles","selectPreset","selectControl","updateControlStep","updateControlMode","updatePacer","Promise","all","asyncToGenerator","regenerator_default","mark","_callee","file","wrap","_context","t0","Response","arrayBuffer","t1","sent","pId","cId","stop","_x2","_this3","showEditor","updateMessages","src_components_PresetSelector","src_components_ControlSelector","src_components_ControlStepsEditor","src_components_ControlModeEditor","es","src_components_Status","MESSAGE","128","144","160","176","192","208","224","CONTROLER","32","33","34","36","37","38","39","40","42","43","44","45","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","91","92","93","94","95","96","97","98","99","100","101","120","121","122","123","124","125","126","127","MAX_MESSAGES","Monitor","unshift","pop","parseMidi","info2","info3","messageCode","velocity","controlNumber","controlValue","program","pitchBend","pitchBendMultiplier","Footer","aria-label","title","viewBox","version","aria-hidden","fillRule","Global","DumpDecoder","onBusy","Chord","scale","Scale","chord","ChordsSelector","ChordsSelector_Chord","Chords","setScale","src_components_ChordsSelector","Setting","MidiSettingsEditor_MidiNote","MidiSettingsEditor","onSettingUpdate","settingIndex","MidiSettingsEditor_Setting","PresetNameEditor","onNameUpdate","PresetMidi","updateMidiSettings","updatePresetName","buildPresetNameSysex","components_PresetNameEditor","src_components_MidiSettingsEditor","JSON","stringify","MenuLink","label","to","activeOnlyWhenExact","Route","path","exact","Link","App","busy","HashRouter","App_MenuLink","Switch","render","src_pages_Home","src_pages_Preset","pages_PresetMidi","pages_Global","src_pages_Chords","src_pages_Monitor","src_pages_DumpDecoder","src_pages_TestSender","src_components_Footer","Boolean","window","location","hostname","noop","error","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3013b104.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport \"./Home.css\";\n\n\nclass Home extends Component {\n\n\n    render() {\n\n        return (\n            <div className=\"content\">\n\n                <h1>Requirements</h1>\n\n                <div className=\"doc\">\n                    <p>This application requires a browser that support\n                        the <a href=\"http://webaudio.github.io/web-midi-api/\" target=\"_blank\" rel=\"noopener noreferrer\">Web MIDI API</a>.</p>\n\n                    <p>Currently, only <span className=\"strong\">Chrome</span> and <span className=\"strong\">Opera</span> support this standard.\n                        This application will therefore <span className=\"italic\">not</span> work in Firefox, Safari, IE or Edge.</p>\n                </div>\n\n                <h1>Limitations</h1>\n\n                <div className=\"doc\">\n                    <p>The current version of this editor isn't able to edit the Global configuration of the Pacer.</p>\n                    <p>This editor does not offer patches management either.</p>\n{/*\n                    <p>The current version only allows you to edit:</p>\n                    <p>\n                        <ul>\n                            <li>The steps associated with a preset control</li>\n                            <li>The MIDI settings of a preset</li>\n                        </ul>\n                    </p>\n                    <p><i>To be completed...</i></p>\n*/}\n                </div>\n\n{/*\n                <h2>Usage</h2>\n\n                <div className=\"doc\">\n                    <ol>\n                        <li>Connect your Pacer to your computer</li>\n                    </ol>\n                </div>\n*/}\n\n                <h1>MIDI in your browser</h1>\n\n                <div className=\"doc\">\n                    <div>\n                        <p>You need to allow your browser to use your MIDI device:</p>\n                        <img src=\"help-01.png\" alt=\"\" />\n                    </div>\n                    <div>\n                        <p>In case you didn't allow the use of MIDI device and want to change that, you can right-click on the URL icon and change the setting:</p>\n                        <img src=\"help-02.png\" alt=\"\" />\n                    </div>\n                </div>\n\n                <h1>FAQ</h1>\n\n                <div className=\"doc\">\n                    <p><i>To be completed...</i></p>\n                </div>\n\n                <h1>Contribute</h1>\n\n                <div className=\"doc\">\n                    <p>This editor is an Open Source project. You are welcome to contribute.</p>\n                    <p>The source-code is hosted\n                    by GitHub: <a href=\"https://github.com/francoisgeorgy/pacer-editor\" target=\"_blank\" rel=\"noopener noreferrer\">pacer-editor</a></p>\n                    <p>To contribute your bug fixes, new features, etc.: 1) fork the project, 2) create a pull-request.</p>\n                </div>\n\n                <h1>Thanks</h1>\n\n                <div className=\"doc\">\n                    Thank you to the Nektar support service for having provided precious informations regarding the SysEx data format of the Pacer.\n                    This editor would not have been possible without their support.\n                </div>\n\n            </div>\n        );\n    }\n\n}\n\nexport default Home;\n","\n/*\nString.prototype.padZero = function (len, c) {\n    var s = '', c = c || '0', len = (len || 2) - this.length;\n    while (s.length < len) s += c;\n    return s + this;\n};\n*/\n\nexport const padZero = (str, len, char) => {\n    let s = '';\n    let c = char || '0';\n    let n = (len || 2) - str.length;\n    while (s.length < n) s += c;\n    return s + str;\n};\n\nexport const h = v => {\n    return (v === null || v === undefined) ? \"\" : padZero(v.toString(16).toUpperCase(), 2);\n};\n\nexport const hs = data => (data === null || data === undefined) ? \"\" : (Array.from(data).map(n => h(n))).join(\" \");    // Array.from() is necessary to get a non-typed array\n\n\n/**\n *\n * @param string\n * @param sep\n * @returns {*}\n */\nexport const fromHexString = function(string, sep) {\n    let s = sep ? string.replace(sep, '') : string;\n    if ((s.length % 2) > 0) {\n        return null;\n    }\n    if (s.length === 0) return null;\n    let a = new Uint8Array(s.length / 2);\n    for (let i=0; i < (s.length / 2); i++) {\n        a[i] = parseInt(s.substr(i * 2, 2), 16);\n    }\n    return a;\n};\n","\nfunction sortObject(obj) {\n    let arr = [];\n    for (let prop in obj) {\n        if (obj.hasOwnProperty(prop)) {\n            arr.push({\n                'key': prop,\n                'value': obj[prop]\n            });\n        }\n    }\n    arr.sort((a, b) => a.value.localeCompare(b.value));\n    return arr;\n}\n\nexport const PACER_MIDI_PORT_NAME = \"Pacer midi1\";          // can be a regex\nexport const PACER_MIDI_INPUT_PORT_NAME = \"Pacer midi1\";\nexport const PACER_MIDI_OUTPUT_PORT_NAME = \"Pacer midi1\";\n\nexport const SYSEX_SIGNATURE = [0x00, 0x01, 0x77];\nexport const SYSEX_HEADER = [0x7F];\n\nexport const COMMAND_SET = 0x01;\nexport const COMMAND_GET = 0x02;\n\nexport const TARGET_PRESET = 0x01;\nexport const TARGET_GLOBAL = 0x05;\nexport const TARGET_BACKUP = 0x07;\n\nexport const TARGETS = {\n    [TARGET_PRESET]: \"preset\",\n    [TARGET_GLOBAL]: \"global\",\n    [TARGET_BACKUP]: \"full backup\"\n};\n\n\nexport const CONTROL_NAME = 0x01;\nexport const CONTROL_STOMPSWITCH_1 = 0x0D;\nexport const CONTROL_STOMPSWITCH_2 = 0x0E;\nexport const CONTROL_STOMPSWITCH_3 = 0x0F;\nexport const CONTROL_STOMPSWITCH_4 = 0x10;\nexport const CONTROL_STOMPSWITCH_5 = 0x11;\nexport const CONTROL_STOMPSWITCH_6 = 0x12;\nexport const CONTROL_RESERVED = 0x13;\nexport const CONTROL_STOMPSWITCH_A = 0x14;\nexport const CONTROL_STOMPSWITCH_B = 0x15;\nexport const CONTROL_STOMPSWITCH_C = 0x16;\nexport const CONTROL_STOMPSWITCH_D = 0x17;\nexport const CONTROL_FOOTSWITCH_1 = 0x18;\nexport const CONTROL_FOOTSWITCH_2 = 0x19;\nexport const CONTROL_FOOTSWITCH_3 = 0x1A;\nexport const CONTROL_FOOTSWITCH_4 = 0x1B;\nexport const CONTROL_EXPRESSION_PEDAL_1 = 0x36;\nexport const CONTROL_EXPRESSION_PEDAL_2 = 0x37;\nexport const CONTROL_MIDI = 0x7E;\nexport const CONTROL_ALL = 0x7F;\n\n\n// objects:\nexport const CONTROLS = {\n    [CONTROL_NAME]: \"name\",\n    [CONTROL_STOMPSWITCH_1]: \"1\",\n    [CONTROL_STOMPSWITCH_2]: \"2\",\n    [CONTROL_STOMPSWITCH_3]: \"3\",\n    [CONTROL_STOMPSWITCH_4]: \"4\",\n    [CONTROL_STOMPSWITCH_5]: \"5\",\n    [CONTROL_STOMPSWITCH_6]: \"6\",\n    [CONTROL_RESERVED]: \"RESERVED\",\n    [CONTROL_STOMPSWITCH_A]: \"A\",\n    [CONTROL_STOMPSWITCH_B]: \"B\",\n    [CONTROL_STOMPSWITCH_C]: \"C\",\n    [CONTROL_STOMPSWITCH_D]: \"D\",\n    [CONTROL_FOOTSWITCH_1]: \"FS 1\",\n    [CONTROL_FOOTSWITCH_2]: \"FS 2\",\n    [CONTROL_FOOTSWITCH_3]: \"FS 3\",\n    [CONTROL_FOOTSWITCH_4]: \"FS 4\",\n    [CONTROL_EXPRESSION_PEDAL_1]: \"EXP 1\",\n    [CONTROL_EXPRESSION_PEDAL_2]: \"EXP 2\",\n    [CONTROL_MIDI]: \"MIDI configuration\",\n    [CONTROL_ALL]: \"ALL\"\n};\n\nexport const CONTROLS_FULLNAME = {\n    0x01: \"Preset Name\",\n    0x0D: \"Stompswitch 1\",\n    0x0E: \"Stompswitch 2\",\n    0x0F: \"Stompswitch 3\",\n    0x10: \"Stompswitch 4\",\n    0x11: \"Stompswitch 5\",\n    0x12: \"Stompswitch 6\",\n    0x13: \"RESERVED\",\n    0x14: \"Stompswitch A\",\n    0x15: \"Stompswitch B\",\n    0x16: \"Stompswitch C\",\n    0x17: \"Stompswitch D\",\n    0x18: \"Footswitch 1\",\n    0x19: \"Footswitch  2\",\n    0x1A: \"Footswitch  3\",\n    0x1B: \"Footswitch  4\",\n    0x36: \"Expression Pedal 1\",\n    0x37: \"Expression Pedal 2\",\n    0x7E: \"MIDI configuration\",\n    0x7F: \"ALL\"\n};\n\n// subsets of CONTROLS keys:\nexport const STOMPSWITCHES = [0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x14, 0x15, 0x16, 0x17];\nexport const STOMPSWITCHES_TOP = [0x14, 0x15, 0x16, 0x17];\nexport const STOMPSWITCHES_BOTTOM = [0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12];\nexport const FOOTSWITCHES = [0x18, 0x19, 0x1A, 0x1B];\nexport const EXPPEDALS = [0x36, 0x37];\n\n// message types:\nexport const MSG_AD_MIDICC = 0x00;\nexport const MSG_AD_NRPNC = 0x03;\nexport const MSG_AD_NRPNF = 0x04;\nexport const MSG_AD_PITCH = 0x01;\nexport const MSG_AD_ATCHAN = 0x02;\nexport const MSG_DAWFUNC = 0x7E;\nexport const MSG_CTRL_OFF = 0x61;\n\nexport const MSG_SW_MIDI_CC_TGGLE = 0x47;\nexport const MSG_SW_MIDI_CC = 0x40;\nexport const MSG_SW_MIDI_CC_STEP = 0x48;\nexport const MSG_SW_NOTE = 0x43;\nexport const MSG_SW_NOTE_TGGLE = 0x44;\nexport const MSG_SW_PRG_BANK = 0x45;\nexport const MSG_SW_PRG_STEP = 0x46;\nexport const MSG_SW_NRPN_COARSE = 0x57;\nexport const MSG_SW_NRPN_FINE = 0x58;\nexport const MSG_SW_MMC = 0x55;\nexport const MSG_SW_RELAY = 0x59;\nexport const MSG_SW_PRESET_SELECT = 0x62;\nexport const MSG_SW_PRESET_INC_DEC = 0x56;\nexport const MSG_SW_STEP_SELECT = 0x63;\nexport const MSG_SW_STEP_INC_DEC = 0x64;\n\nexport const MSG_ENC_CC = 0x12;\nexport const MSG_ENC_MIDICC_REL = 0x11;\nexport const MSG_ENC_NRPNC = 0x15;\nexport const MSG_ENC_NRPNF = 0x16;\nexport const MSG_ENC_PITCH = 0x13;\nexport const MSG_ENC_ATCHAN = 0x14;\nexport const MSG_ENC_PROGRAM = 0x10;\nexport const MSG_ENC_PRESETSELECT = 0x17;\nexport const MSG_ENC_STEPSELECT = 0x18;\n\nexport const MSG_LOAD_CC = 0x65;\n\nexport const MSG_TYPES = {\n\n    [MSG_AD_MIDICC]: \"CC\",\n    [MSG_AD_NRPNC]: \"NRPN C\",\n    [MSG_AD_NRPNF]: \"NRPN F\",\n    [MSG_AD_PITCH]: \"PITCH\",\n    [MSG_AD_ATCHAN]: \"AT CHAN\",\n    [MSG_DAWFUNC]: \"DAW FUNC\",\n    [MSG_CTRL_OFF]: \"CTRL_OFF\",\n\n    [MSG_SW_MIDI_CC_TGGLE]: \"CC TOGGLE\",\n    [MSG_SW_MIDI_CC]: \"CC\",\n    [MSG_SW_MIDI_CC_STEP]: \"CC STEP\",\n    [MSG_SW_NOTE]: \"NOTE\",\n    [MSG_SW_NOTE_TGGLE]: \"NOTE TOGGLE\",\n    [MSG_SW_PRG_BANK]: \"PRG BANK\",\n    [MSG_SW_PRG_STEP]: \"PRG STEP\",\n    [MSG_SW_NRPN_COARSE]: \"NRPN COARSE\",\n    [MSG_SW_NRPN_FINE]: \"NRPN FINE\",\n    [MSG_SW_MMC]: \"MMC\",\n    [MSG_SW_RELAY]: \"RELAY\",\n    [MSG_SW_PRESET_SELECT]: \"PRESET SELECT\",\n    [MSG_SW_PRESET_INC_DEC]: \"PRESET INC DEC\",\n    [MSG_SW_STEP_SELECT]: \"STEP SELECT\",\n    [MSG_SW_STEP_INC_DEC]: \"STEP INC DEC\",\n\n    [MSG_ENC_CC]: \"CC\",\n    [MSG_ENC_MIDICC_REL]: \"CC REL\",\n    [MSG_ENC_NRPNC]: \"NRPN C\",\n    [MSG_ENC_NRPNF]: \"NRPN F\",\n    [MSG_ENC_PITCH]: \"PITCH\",\n    [MSG_ENC_ATCHAN]: \"AT CHAN\",\n    [MSG_ENC_PROGRAM]: \"PRG\",\n    [MSG_ENC_PRESETSELECT]: \"PRESET SEL\",\n    [MSG_ENC_STEPSELECT]: \"STEP SEL\",\n\n    [MSG_LOAD_CC]: \"CC\"\n};\n\n// Message types for stompswitches\nexport const MSG_TYPES_FULLNAME_SW = {\n\n    // [MSG_AD_MIDICC]: \"MIDI CC\",\n    // [MSG_AD_NRPNC]: \"MIDI NRPN Coarse\",\n    // [MSG_AD_NRPNF]: \"MIDI NRPN Fine\",\n    // [MSG_AD_PITCH]: \"Pitch Bend\",\n    // [MSG_AD_ATCHAN]: \"AT CHAN\",\n    // [MSG_DAWFUNC]: \"DAW FUNC\",\n    [MSG_CTRL_OFF]: \"OFF\",\n\n    [MSG_SW_MIDI_CC_TGGLE]: \"CC Toggle\",\n    [MSG_SW_MIDI_CC]: \"CC Trigger\",\n    [MSG_SW_MIDI_CC_STEP]: \"CC Step\",\n    [MSG_SW_NOTE]: \"Note\",\n    [MSG_SW_NOTE_TGGLE]: \"Note Toggle\",\n    [MSG_SW_PRG_BANK]: \"Program & Bank\",\n    [MSG_SW_PRG_STEP]: \"Program Step\",\n    [MSG_SW_NRPN_COARSE]: \"NRPN Coarse\",\n    [MSG_SW_NRPN_FINE]: \"NRPN Fine\",\n    [MSG_SW_MMC]: \"MIDI Machine Control\",\n    [MSG_SW_RELAY]: \"Relay Outputs\",\n    [MSG_SW_PRESET_SELECT]: \"Preset Select\",\n    [MSG_SW_PRESET_INC_DEC]: \"Preset Inc/Dec\",\n    [MSG_SW_STEP_SELECT]: \"Step Select\",\n    [MSG_SW_STEP_INC_DEC]: \"Step Inc/Dec\",\n\n    // [MSG_ENC_CC]: \"CC\",\n    // [MSG_ENC_MIDICC_REL]: \"CC REL\",\n    // [MSG_ENC_NRPNC]: \"MIDI NRPN Coarse\",\n    // [MSG_ENC_NRPNF]: \"MIDI NRPN Fine\",\n    // [MSG_ENC_PITCH]: \"Pitch Bend\",\n    // [MSG_ENC_ATCHAN]: \"AT CHAN\",\n    // [MSG_ENC_PROGRAM]: \"PRG\",\n    // [MSG_ENC_PRESETSELECT]: \"PRESET SEL\",\n    // [MSG_ENC_STEPSELECT]: \"STEP SEL\",\n    //\n    // [MSG_LOAD_CC]: \"CC\"\n\n};\n\nexport const MSG_TYPES_FULLNAME_SW_SORTED = sortObject(MSG_TYPES_FULLNAME_SW);\n\n\nexport const MSG_TYPES_FULLNAME_ENC = {\n\n    // [MSG_AD_MIDICC]: \"MIDI CC\",\n    // [MSG_AD_NRPNC]: \"MIDI NRPN Coarse\",\n    // [MSG_AD_NRPNF]: \"MIDI NRPN Fine\",\n    // [MSG_AD_PITCH]: \"Pitch Bend\",\n    // [MSG_AD_ATCHAN]: \"AT CHAN\",\n    // [MSG_DAWFUNC]: \"DAW FUNC\",\n    [MSG_CTRL_OFF]: \"OFF\",\n    //\n    // [MSG_SW_MIDICC_TGGLE]: \"MIDI CC Toggle\",\n    // [MSG_SW_MIDICC]: \"CC\",\n    // [MSG_SW_MIDICC_STEP]: \"CC STEP\",\n    // [MSG_SW_NOTE]: \"MIDI Note\",\n    // [MSG_SW_NOTE_TGGLE]: \"MIDI Note Toggle\",\n    // [MSG_SW_PRGBANK]: \"PRG BANK\",\n    // [MSG_SW_PRG_STEP]: \"PRG STEP\",\n    // [MSG_SW_NRPNCOARSE]: \"MIDI NRPN Coarse\",\n    // [MSG_SW_NRPNFINE]: \"MIDI NRPN Fine\",\n    // [MSG_SW_MMC]: \"MMC\",\n    // [MSG_SW_RELAY]: \"RELAY\",\n    // [MSG_SW_PRESETSELECT]: \"PRESET SELECT\",\n    // [MSG_SW_PRESETINCDEC]: \"PRESET INC DEC\",\n    // [MSG_SW_STEPSELECT]: \"STEP SELECT\",\n    // [MSG_SW_STEPINCDEC]: \"STEP INC DEC\",\n\n    [MSG_ENC_CC]: \"CC\",\n    [MSG_ENC_MIDICC_REL]: \"CC REL\",\n    [MSG_ENC_NRPNC]: \"NRPN Coarse\",\n    [MSG_ENC_NRPNF]: \"NRPN Fine\",\n    [MSG_ENC_PITCH]: \"Pitch Bend\",\n    [MSG_ENC_ATCHAN]: \"AT Chan.\",\n    [MSG_ENC_PROGRAM]: \"Program\",\n    [MSG_ENC_PRESETSELECT]: \"Preset Sel\",\n    [MSG_ENC_STEPSELECT]: \"Step Sel\",\n\n    // [MSG_LOAD_CC]: \"CC\"\n\n};\n\n\n// Preset Midi Settings\nexport const MSG_TYPES_FULLNAME_MIDI = {\n\n    [MSG_LOAD_CC]: \"Load CC\",\n    [MSG_SW_NOTE]: \"MIDI Note\",\n    [MSG_SW_PRG_BANK]: \"Program & Bank\",\n    [MSG_SW_NRPN_COARSE]: \"NRPN Coarse\",\n    [MSG_SW_NRPN_FINE]: \"NRPN Fine\",\n    [MSG_SW_MMC]: \"MIDI Machine Control\",\n    [MSG_SW_RELAY]: \"Relay Outputs\",\n    [MSG_DAWFUNC]: \"DAW Func.\",\n    [MSG_CTRL_OFF]: \"OFF\"\n\n    // [MSG_AD_MIDICC]: \"CC\",\n    // [MSG_AD_NRPNC]: \"NRPN Coarse\",\n    // [MSG_AD_NRPNF]: \"NRPN Fine\",\n    // [MSG_AD_PITCH]: \"Pitch Bend\",\n    // [MSG_AD_ATCHAN]: \"AT Chan.\",\n    //\n    // [MSG_SW_MIDICC_TGGLE]: \"MIDI CC Toggle\",\n    // [MSG_SW_MIDICC]: \"CC\",\n    // [MSG_SW_MIDICC_STEP]: \"CC STEP\",\n    // [MSG_SW_NOTE_TGGLE]: \"MIDI Note Toggle\",\n    // [MSG_SW_PRG_STEP]: \"PRG STEP\",\n    // [MSG_SW_PRESETSELECT]: \"PRESET SELECT\",\n    // [MSG_SW_PRESETINCDEC]: \"PRESET INC DEC\",\n    // [MSG_SW_STEPSELECT]: \"STEP SELECT\",\n    // [MSG_SW_STEPINCDEC]: \"STEP INC DEC\",\n\n\n    // [MSG_ENC_CC]: \"CC\",\n    // [MSG_ENC_MIDICC_REL]: \"CC REL\",\n    // [MSG_ENC_NRPNC]: \"MIDI NRPN Coarse\",\n    // [MSG_ENC_NRPNF]: \"MIDI NRPN Fine\",\n    // [MSG_ENC_PITCH]: \"Pitch Bend\",\n    // [MSG_ENC_ATCHAN]: \"AT CHAN\",\n    // [MSG_ENC_PROGRAM]: \"PRG\",\n    // [MSG_ENC_PRESETSELECT]: \"PRESET SEL\",\n    // [MSG_ENC_STEPSELECT]: \"STEP SEL\",\n};\n\n\nexport const MSG_TYPES_FULLNAME_MIDI_SORTED = sortObject(MSG_TYPES_FULLNAME_MIDI);\n\n\n\n\nexport const MSG_TYPES_DATA_HELP = {\n\n    [MSG_AD_MIDICC]: [\"\", \"\", \"\"],\n    [MSG_AD_NRPNC]: [\"\", \"\", \"\"],\n    [MSG_AD_NRPNF]: [\"\", \"\", \"\"],\n    [MSG_AD_PITCH]: [\"\", \"\", \"\"],\n    [MSG_AD_ATCHAN]: [\"\", \"\", \"\"],\n    [MSG_DAWFUNC]: [\"function\", \"not used\", \"not used\"],\n    [MSG_CTRL_OFF]: [\"\", \"\", \"\"],\n\n    [MSG_SW_MIDI_CC_TGGLE]: [\"controller\", \"value 1\", \"value 2\"],\n    [MSG_SW_MIDI_CC]: [\"controller\", \"down\", \"up\"],\n    [MSG_SW_MIDI_CC_STEP]: [\"controller\", \"start\", \"end\"],\n    [MSG_SW_NOTE]: [\"note\", \"velocity\", \"not used\"],\n    [MSG_SW_NOTE_TGGLE]: [\"note\", \"velocity\", \"not used\"],\n    [MSG_SW_PRG_BANK]: [\"program\", \"bank LSB\", \"bank MSB\"],\n    [MSG_SW_PRG_STEP]: [\"not used\", \"start\", \"end\"],\n    [MSG_SW_NRPN_COARSE]: [\"value\", \"NRPN LSB\", \"NRPN MSB\"],\n    [MSG_SW_NRPN_FINE]: [\"value\", \"NRPN LSB\", \"NRPN MSB\"],\n    [MSG_SW_MMC]: [\"device\", \"command\", \"not used\"],\n    [MSG_SW_RELAY]: [\"mode\", \"relay #\", \"not used\"],\n    [MSG_SW_PRESET_SELECT]: [\"preset\", \"not used\", \"not used\"],\n    [MSG_SW_PRESET_INC_DEC]: [\"inc/dec\", \"not used\", \"not used\"],\n    [MSG_SW_STEP_SELECT]: [\"target\", \"step\", \"not used\"],\n    [MSG_SW_STEP_INC_DEC]: [\"target\", \"inc/dec\", \"not used\"],\n\n    [MSG_ENC_CC]: [\"\", \"\", \"\"],\n    [MSG_ENC_MIDICC_REL]: [\"\", \"\", \"\"],\n    [MSG_ENC_NRPNC]: [\"\", \"\", \"\"],\n    [MSG_ENC_NRPNF]: [\"\", \"\", \"\"],\n    [MSG_ENC_PITCH]: [\"\", \"\", \"\"],\n    [MSG_ENC_ATCHAN]: [\"\", \"\", \"\"],\n    [MSG_ENC_PROGRAM]: [\"\", \"\", \"\"],\n    [MSG_ENC_PRESETSELECT]: [\"\", \"\", \"\"],\n    [MSG_ENC_STEPSELECT]: [\"\", \"\", \"\"],\n\n    [MSG_LOAD_CC]: [\"controller\", \"value\", \"not used\"]\n};\n\n\n\nexport const CONTROL_ELEMENT = {\n    // 0x00: \"\",\n\n    0x01: \"step 1: channel\",\n    0x02: \"step 1: message type\",\n    0x03: \"step 1: data 1\",\n    0x04: \"step 1: data 2\",\n    0x05: \"step 1: data 3\",\n    0x06: \"step 1: step active\",\n\n    0x07: \"step 2: channel\",\n    0x08: \"step 2: message type\",\n    0x09: \"step 2: data 1\",\n    0x0A: \"step 2: data 2\",\n    0x0B: \"step 2: data 3\",\n    0x0C: \"step 2: step active\",\n\n    0x0D: \"step 3: channel\",\n    0x0E: \"step 3: message type\",\n    0x0F: \"step 3: data 1\",\n    0x10: \"step 3: data 2\",\n    0x11: \"step 3: data 3\",\n    0x12: \"step 3: step active\",\n\n    0x13: \"step 4: channel\",\n    0x14: \"step 4: message type\",\n    0x15: \"step 4: data 1\",\n    0x16: \"step 4: data 2\",\n    0x17: \"step 4: data 3\",\n    0x18: \"step 4: step active\",\n\n    0x19: \"step 5: channel\",\n    0x1A: \"step 5: message type\",\n    0x1B: \"step 5: data 1\",\n    0x1C: \"step 5: data 2\",\n    0x1D: \"step 5: data 3\",\n    0x1E: \"step 5: step active\",\n\n    0x1F: \"step 6: channel\",\n    0x20: \"step 6: message type\",\n    0x21: \"step 6: data 1\",\n    0x22: \"step 6: data 2\",\n    0x23: \"step 6: data 3\",\n    0x24: \"step 6: step active\",\n\n    // 0x25: \"\",\n    // 0x26: \"\",\n    // 0x27: \"\",\n    // 0x28: \"\",\n    // 0x29: \"\",\n    // 0x2A: \"\",\n    // 0x2B: \"\",\n    // 0x2C: \"\",\n    // 0x2D: \"\",\n    // 0x2E: \"\",\n    // 0x2F: \"\",\n    // 0x30: \"\",\n    // 0x31: \"\",\n    // 0x32: \"\",\n    // 0x33: \"\",\n    // 0x34: \"\",\n    // 0x35: \"\",\n    // 0x36: \"\",\n    // 0x37: \"\",\n    // 0x38: \"\",\n    // 0x39: \"\",\n    // 0x3A: \"\",\n    // 0x3B: \"\",\n    // 0x3C: \"\",\n    // 0x3D: \"\",\n    // 0x3E: \"\",\n    // 0x3F: \"\",\n    // 0x40: \"\",\n    // 0x41: \"\",\n    // 0x42: \"\",\n    // 0x43: \"\",\n\n    0x40: \"control mode\",\n    0x41: \"LED MIDI Ctrl\",\n    0x42: \"LED On Color\",\n    0x43: \"LED Off Color\",\n\n    // 0x44: \"\",\n    // 0x45: \"\",\n    // 0x46: \"\",\n    // 0x47: \"\",\n    // 0x48: \"\",\n    // 0x49: \"\",\n    // 0x4A: \"\",\n    // 0x4B: \"\",\n    // 0x4C: \"\",\n    // 0x4D: \"\",\n    // 0x4E: \"\",\n    // 0x4F: \"\",\n    // 0x50: \"\",\n    // 0x51: \"\",\n    // 0x52: \"\",\n    // 0x53: \"\",\n    // 0x54: \"\",\n    // 0x55: \"\",\n    // 0x56: \"\",\n    // 0x57: \"\",\n    // 0x58: \"\",\n    // 0x59: \"\",\n    // 0x5A: \"\",\n    // 0x5B: \"\",\n    // 0x5C: \"\",\n    // 0x5D: \"\",\n    // 0x5E: \"\",\n    // 0x5F: \"\",\n\n    // 0x60: \"control mode\",\n    // 0x61: \"LED MIDI Ctrl\",\n    // 0x62: \"LED On Color\",\n    // 0x63: \"LED Off Color\",\n\n    // 0x64: \"\",\n    // 0x65: \"\",\n    // 0x66: \"\",\n    // 0x67: \"\",\n    // 0x68: \"\",\n    // 0x69: \"\",\n    // 0x6A: \"\",\n    // 0x6B: \"\",\n    // 0x6C: \"\",\n    // 0x6D: \"\",\n    // 0x6E: \"\",\n    // 0x6F: \"\",\n    // 0x70: \"\",\n    // 0x71: \"\",\n    // 0x72: \"\",\n    // 0x73: \"\",\n    // 0x74: \"\",\n    // 0x75: \"\",\n    // 0x76: \"\",\n    // 0x77: \"\",\n    // 0x78: \"\",\n    // 0x79: \"\",\n    // 0x7A: \"\",\n    // 0x7B: \"\",\n    // 0x7C: \"\",\n    // 0x7D: \"\",\n    // 0x7E: \"\",\n\n    0x7F: \"ALL\"\n};\n\nexport const MIDI_ELEMENT = {\n    // 0x00: \"\",\n    0x01: \"setting 1: channel\",\n    0x02: \"setting 1: message type\",\n    0x03: \"setting 1: data 1\",\n    0x04: \"setting 1: data 2\",\n    0x05: \"setting 1: data 3\",\n    // 0x06: \"\",\n\n    0x07: \"setting 2: channel\",\n    0x08: \"setting 2: message type\",\n    0x09: \"setting 2: data 1\",\n    0x0A: \"setting 2: data 2\",\n    0x0B: \"setting 2: data 3\",\n    // 0x0C: \"\",\n\n    0x0D: \"setting 3: channel\",\n    0x0E: \"setting 3: message type\",\n    0x0F: \"setting 3: data 1\",\n    0x10: \"setting 3: data 2\",\n    0x11: \"setting 3: data 3\",\n    // 0x12: \"\",\n\n    0x13: \"setting 4: channel\",\n    0x14: \"setting 4: message type\",\n    0x15: \"setting 4: data 1\",\n    0x16: \"setting 4: data 2\",\n    0x17: \"setting 4: data 3\",\n    // 0x18: \"\",\n\n    0x19: \"setting 5: channel\",\n    0x1A: \"setting 5: message type\",\n    0x1B: \"setting 5: data 1\",\n    0x1C: \"setting 5: data 2\",\n    0x1D: \"setting 5: data 3\",\n    // 0x1E: \"\",\n\n    0x1F: \"setting 6: channel\",\n    0x20: \"setting 6: message type\",\n    0x21: \"setting 6: data 1\",\n    0x22: \"setting 6: data 2\",\n    0x23: \"setting 6: data 3\",\n    // 0x24: \"\",\n\n    0x25: \"setting 7: channel\",\n    0x26: \"setting 7: message type\",\n    0x27: \"setting 7: data 1\",\n    0x28: \"setting 7: data 2\",\n    0x29: \"setting 7: data 3\",\n    // 0x2A: \"\",\n\n    0x2B: \"setting 8: channel\",\n    0x2C: \"setting 8: message type\",\n    0x2D: \"setting 8: data 1\",\n    0x2E: \"setting 8: data 2\",\n    0x2F: \"setting 8: data 3\",\n    0x30: \"\",\n\n    0x31: \"setting 9: channel\",\n    0x32: \"setting 9: message type\",\n    0x33: \"setting 9: data 1\",\n    0x34: \"setting 9: data 2\",\n    0x35: \"setting 9: data 3\",\n    // 0x36: \"\",\n\n    0x37: \"setting 10: channel\",\n    0x38: \"setting 10: message type\",\n    0x39: \"setting 10: data 1\",\n    0x3A: \"setting 10: data 2\",\n    0x3B: \"setting 10: data 3\",\n    // 0x3C: \"\",\n\n    0x3D: \"setting 11: channel\",\n    0x3E: \"setting 11: message type\",\n    0x3F: \"setting 11: data 1\",\n    0x40: \"setting 11: data 2\",\n    0x41: \"setting 11: data 3\",\n    // 0x42: \"\",\n\n    0x43: \"setting 12: channel\",\n    0x44: \"setting 12: message type\",\n    0x45: \"setting 12: data 1\",\n    0x46: \"setting 12: data 2\",\n    0x47: \"setting 12: data 3\",\n    // 0x48: \"\",\n\n    0x49: \"setting 13: channel\",\n    0x4A: \"setting 13: message type\",\n    0x4B: \"setting 13: data 1\",\n    0x4C: \"setting 13: data 2\",\n    0x4D: \"setting 13: data 3\",\n    // 0x4E: \"\",\n\n    0x4F: \"setting 14: channel\",\n    0x50: \"setting 14: message type\",\n    0x51: \"setting 14: data 1\",\n    0x52: \"setting 14: data 2\",\n    0x53: \"setting 14: data 3\",\n    // 0x54: \"\",\n\n    0x55: \"setting 15: channel\",\n    0x56: \"setting 15: message type\",\n    0x57: \"setting 15: data 1\",\n    0x58: \"setting 15: data 2\",\n    0x59: \"setting 15: data 3\",\n    // 0x5A: \"\",\n\n    0x5B: \"setting 16: channel\",\n    0x5C: \"setting 16: message type\",\n    0x5D: \"setting 16: data 1\",\n    0x5E: \"setting 16: data 2\",\n    0x5F: \"setting 16: data 3\",\n    // 0x60: \"\",\n\n    // 0x61: \"\",\n    // 0x62: \"\",\n    // 0x63: \"\",\n    // 0x64: \"\",\n    // 0x65: \"\",\n    // 0x66: \"\",\n    // 0x67: \"\",\n    // 0x68: \"\",\n    // 0x69: \"\",\n    // 0x6A: \"\",\n    // 0x6B: \"\",\n    // 0x6C: \"\",\n    // 0x6D: \"\",\n    // 0x6E: \"\",\n    // 0x6F: \"\",\n    // 0x70: \"\",\n    // 0x71: \"\",\n    // 0x72: \"\",\n    // 0x73: \"\",\n    // 0x74: \"\",\n    // 0x75: \"\",\n    // 0x76: \"\",\n    // 0x77: \"\",\n    // 0x78: \"\",\n    // 0x79: \"\",\n    // 0x7A: \"\",\n    // 0x7B: \"\",\n    // 0x7C: \"\",\n    // 0x7D: \"\",\n    // 0x7E: \"\",\n\n    0x7F: \"ALL\"\n};\n\nexport const COLORS = {\n    0x00 : \"Off\",\n    0x01 : \"1A Pink\",\n    0x02 : \"1B Dim Pink\",\n    0x03 : \"2A Red\",\n    0x04 : \"2B Dim Red\",\n    0x05 : \"3A Orange\",\n    0x06 : \"3B Dim Orange\",\n    0x07 : \"4A Amber\",\n    0x08 : \"4B Dim Amber\",\n    0x09 : \"5A Yellow\",\n    0x0A : \"5B Dim Yellow\",\n    0x0B : \"6A Lime\",\n    0x0C : \"6B Dim Lime\",\n    0x0D : \"7A Green\",\n    0x0E : \"7B Dim Green\",\n    0x0F : \"8A Teal\",\n    0x10 : \"8B Dim Teal\",\n    0x11 : \"9A Blue\",\n    0x12 : \"9B Dim Blue\",\n    0x13 : \"10A Lavender\",\n    0x14 : \"10B Dim Lavender\",\n    0x15 : \"11A Purple\",\n    0x16 : \"11B Dim Purple\",\n    0x17 : \"12A White\",\n    0x18 : \"12B Dim White\",\n};\n\n\nexport const CONTROL_MODE_ELEMENT = 0x60;\n\nexport const CONTROL_MODE_ALL = 0x00;\nexport const CONTROL_MODE_EXT_STEP = 0x01;\nexport const CONTROL_MODE_SEQUENCE = 0x02;\n\nexport const CONTROL_MODES = {\n    [CONTROL_MODE_ALL]: \"All\",\n    [CONTROL_MODE_EXT_STEP]: \"External Step Select\",\n    [CONTROL_MODE_SEQUENCE]: \"Sequence\",\n};\n\n\nexport function checksum(bytes) {\n    if (bytes === null || bytes === undefined || bytes.length === 0) return 128;\n    let sum = Uint8Array.from(bytes).reduce((previousValue, currentValue) => previousValue + currentValue);\n    return 128 - (sum % 128);\n}\n\n\n/**\n * return the sysex message to send to the Pacer to request some data\n */\nexport function requestPreset(index) {\n    let msg = [COMMAND_GET, TARGET_PRESET, index];      // TODO: replace numbers by constants\n    let cs = checksum(msg);\n    msg.push(cs);\n    return SYSEX_HEADER.concat(msg);\n}\n\n/**\n * return the sysex message to send to the Pacer to request some data\n */\nexport function requestPresetObj(index, obj) {\n    // TODO: replace numbers by constants\n    let msg = [\n        COMMAND_GET,\n        TARGET_PRESET,\n        index,      // preset #\n        obj         // (control)\n    ];\n    let cs = checksum(msg);\n    msg.push(cs);\n    return SYSEX_HEADER.concat(msg);\n}\n\n// ============================================================================\n\n/**\n * Example: 23 => \"D5\"\n * @param index\n * @returns {string}\n */\nexport const presetIndexToXY = index => {\n    // if (index === 0) return \"CUR\";\n    //TODO: check valid range\n    let b = Math.floor((index - 1) / 6);\n    let i = (index - 1) % 6 + 1;\n    return String.fromCharCode(b + 65) + i.toString();\n};\n\n/**\n * Exampe: \"D5\" => 23\n * @param xy\n * @returns {number}\n */\nexport const presetXYToIndex = xy => {\n    // if (xy === \"CUR\") return 0;\n    //TODO: check valid range\n    let bank = xy.charCodeAt(0) - 65;\n    let num = parseInt(xy[1], 10);\n    return bank * 6 + num;\n};\n","import {NEKTAR_TECHNOLOGY_INC} from \"midi-manufacturers\";\nimport {h, hs} from \"./hexstring\";\nimport {\n    TARGETS,\n    CONTROLS,\n    checksum,\n    SYSEX_HEADER,\n    COMMAND_SET,\n    COMMAND_GET,\n    CONTROL_NAME,\n    CONTROL_STOMPSWITCH_1,\n    CONTROL_STOMPSWITCH_A,\n    CONTROL_EXPRESSION_PEDAL_1,\n    CONTROL_MIDI,\n    CONTROL_STOMPSWITCH_6,\n    CONTROL_FOOTSWITCH_4, CONTROL_EXPRESSION_PEDAL_2, TARGET_PRESET, CONTROL_MODE_ELEMENT\n} from \"../pacer\";\nexport const SYSEX_START = 0xF0;\nexport const SYSEX_END = 0xF7;\n\n// offsets from start of sysex data, right after SYSEX_START\nconst CMD = 4;\nconst TGT = 5;\nconst IDX = 6;\nconst OBJ = 7;\nconst ELM = 8;\n\n/**\n * https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge/34749873#34749873\n * Simple object check.\n * @param item\n * @returns {boolean}\n */\nfunction isObject(item) {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\n/**\n * https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge/34749873#34749873\n * Deep merge two objects.\n * @param target\n * @param ...sources\n */\nexport function mergeDeep(target, ...sources) {\n    if (!sources.length) return target;\n    const source = sources.shift();\n\n    if (isObject(target) && isObject(source)) {\n        for (const key in source) {\n            if (isObject(source[key])) {\n                if (!target[key]) Object.assign(target, { [key]: {} });\n                mergeDeep(target[key], source[key]);\n            } else {\n                Object.assign(target, { [key]: source[key] });\n            }\n        }\n    }\n\n    return mergeDeep(target, ...sources);\n}\n\n/**\n *\n * @param data Uint8Array\n */\nfunction isSysexData(data) {\n    // let view = new Uint8Array(data);\n    // if (view[0] !== SYSEX_START) return false;\n    // if (view[view.byteLength - 1] !== SYSEX_END) return false;\n    if (data[0] !== SYSEX_START) return false;\n    if (data[data.byteLength - 1] !== SYSEX_END) return false;\n    return true;\n}\n\n/*\nfunction getManufacturerName(id) {\n    return id in midi_name ? midi_name[id] : \"manufacturer unknown\";\n}\n*/\n\nfunction getControlStep(data) {\n\n    // console.log(\"getControlStep\", hs(data));\n\n    // 01 01 0F 00      midi channel\n    // 02 01 47 00      message type\n    // 03 01 44 00      data 1\n    // 04 01 55 00      data 2\n    // 05 01 66 00      data 3\n    // 06 01 01         active\n\n    // the second byte is the length of the data that follows\n\n    //FIXME: use length\n\n    return {\n        index: (data[0] - 1) / 6 + 1,\n        config: {\n            channel: data[2],\n            msg_type: data[6],\n            data: [data[10], data[14], data[18]],\n            active: data[22]\n        }\n    };\n}\n\n\nfunction getControlMode(data) {\n    return {\n        control_mode: data[1]\n    };\n}\n\n\nfunction getControlLED(data) {\n\n    // console.log(\"getControlLED\", hs(data));\n\n    // 54 01 00     54 == LED, 01 == 1 byte of data, 00 = data itself\n\n    //\n    // 40 01 00 00\n    // 41 01 7F 00\n    // 42 01 7F 00\n    // 43 01 00\n    // 68 F7\n\n    // 0x40\t<data>-MIDICtrl\tStep 1: LED MIDI Ctrl\n    // 0x41\t<data>-Color\tStep 1: LED Active Color\n    // 0x42\t<data>-Color\tStep 1: LED Inactive Color\n    // 0x43\t<data>-LEDNum\tStep 1: LED num\n\n    let cfg = {steps:{}};\n\n    let data_len;\n    let bytes;\n    let step;\n\n    let i = 0;\n    while (i<data.length) {\n        let d = data[i];\n        // let step = \"\" + ((d - 0x40) / 4 + 1);\n        // if (i===0) console.log(`getControlLED: [${h(d)}], step ${step}`);\n        if (i===0) {\n            step = \"\" + ((d - 0x40) / 4 + 1);\n            // console.log(`getControlLED: [${h(d)}], step ${step}`);\n        }\n        // if (!(step in cfg.steps)) cfg.steps[step] = {led:{}};\n        if (!(step in cfg.steps)) cfg.steps[step] = {};\n        switch (d) {\n            case 0x40:\n            case 0x44:\n            case 0x48:\n            case 0x4C:\n            case 0x50:\n            case 0x54:\n                i++;\n                data_len = data[i];\n                // console.log(`getControlLED: ${data_len} data byte(s)`);\n                i++;\n                if (data_len === 1) {\n                    bytes = data[i];\n                } else {\n                    bytes = Array.from(data.slice(i, i + data_len));\n                }\n                // console.log(`getControlLED: data bytes=[${hs(bytes)}]`);\n                i += data_len;\n                // cfg.steps[step][\"led\"].midi_ctrl = bytes;\n                cfg.steps[step][\"led_midi_ctrl\"] = bytes;\n                break;\n            case 0x41:\n            case 0x45:\n            case 0x49:\n            case 0x4D:\n            case 0x51:\n            case 0x55:\n                i++;\n                data_len = data[i];\n                // console.log(`getControlLED: ${data_len} data byte(s)`);\n                i++;\n                if (data_len === 1) {\n                    bytes = data[i];\n                } else {\n                    bytes = Array.from(data.slice(i, i + data_len));\n                }\n                // console.log(`getControlLED: data bytes=[${hs(bytes)}]`);\n                i += data_len;\n                // cfg.steps[step][\"led\"].active_color = bytes;\n                cfg.steps[step][\"led_active_color\"] = bytes;\n                break;\n            case 0x42:\n            case 0x46:\n            case 0x4A:\n            case 0x4E:\n            case 0x52:\n            case 0x56:\n                i++;\n                data_len = data[i];\n                // console.log(`getControlLED: ${data_len} data byte(s)`);\n                i++;\n                if (data_len === 1) {\n                    bytes = data[i];\n                } else {\n                    bytes = Array.from(data.slice(i, i + data_len));\n                }\n                // console.log(`getControlLED: data bytes=[${hs(bytes)}]`);\n                i += data_len;\n                // cfg.steps[step][\"led\"].inactive_color = bytes;\n                cfg.steps[step][\"led_inactive_color\"] = bytes;\n                break;\n            case 0x43:\n            case 0x47:\n            case 0x4B:\n            case 0x4F:\n            case 0x53:\n            case 0x57:\n                i++;\n                data_len = data[i];\n                // console.log(`getControlLED: ${data_len} data byte(s)`);\n                i++;\n                if (data_len === 1) {\n                    bytes = data[i];\n                } else {\n                    bytes = Array.from(data.slice(i, i + data_len));\n                }\n                // console.log(`getControlLED: data bytes=[${hs(bytes)}]`);\n                i += data_len;\n                // cfg.steps[step][\"led\"].num = bytes;\n                cfg.steps[step][\"led_num\"] = bytes;\n                break;\n            case 0x7F:\n                // console.log(`getControlLED: end if data`);\n                i = data.length;\n                break;\n            default:\n                // console.log(`getControlLED: ignore byte ${h(d)}`);\n                i++;\n                break;\n        }\n    }\n\n    // console.log(\"getControlLED\", cfg);\n    return cfg;\n}\n\n\nfunction getMidiSetting(data) {\n\n    // console.log(\"getMidiSetting\", hs(data));\n\n    // 01 01 00 00\n    // 02 01 61 00\n    // 03 01 00 00\n    // 04 01 00 00\n    // 05 01 00 0A\n\n    return {\n        index: (data[0] - 1) / 6 + 1,       // e.g.: 7 --> 1, ..., 0x2B 43 --> 8\n        config: {\n            channel: data[2],\n            msg_type: data[6],\n            data: [data[10], data[14], data[18]]\n        }\n    };\n}\n\n\nfunction getPresetName(data) {\n\n    console.log(\"getPresetName\", hs(data));\n\n    // 01 05 4E 4F 54 45 53 69\n\n    const len = data[1];\n\n    return String.fromCharCode.apply(null, data.slice(2, 2 + len));\n\n/*\n    return {\n        index: (data[0] - 1) / 6 + 1,       // e.g.: 7 --> 1, ..., 0x2B 43 --> 8\n        config: {\n            channel: data[2],\n            msg_type: data[6],\n            data: [data[10], data[14], data[18]]\n        }\n    };\n*/\n}\n\n\n/**\n * Parse a single sysex message\n * @param data\n * @returns {*}\n */\nfunction parseSysexMessage(data) {\n\n    // console.log(\"parseSysex\", hs(data));\n\n    //TODO: verify checksum\n\n    const message = {};\n\n    let cmd = data[CMD];\n    let tgt = data[TGT];\n    let idx = data[IDX];\n    let obj = data[OBJ];\n\n    switch (cmd) {\n        case COMMAND_SET:\n            break;\n        case COMMAND_GET:\n            break;\n        default:\n            console.warn(`parseSysexMessage: invalid command (${h(cmd)})`);\n            return null;\n    }\n\n    if (!(tgt in TARGETS)) {\n        console.warn(\"parseSysexMessage: invalid target\", h(tgt), tgt, TARGETS);\n        return null;\n    }\n\n    message[tgt] = {};\n\n    if (idx >= 0x19 && idx <= 0x7E) {\n        console.warn(\"parseSysexMessage: invalid/ignored idx\", idx);\n    }\n\n    message[tgt][idx] = {};\n\n    if (!(obj in CONTROLS)) {\n        console.warn(\"parseSysexMessage: invalid/ignored object\", h(obj));\n        return null;\n    }\n\n    let obj_type;\n    if (obj === CONTROL_NAME) {\n        obj_type = \"name\";\n    } else if ((obj >= CONTROL_STOMPSWITCH_1 && obj <= CONTROL_STOMPSWITCH_6) ||\n        (obj >= CONTROL_STOMPSWITCH_A && obj <= CONTROL_FOOTSWITCH_4) ||\n        (obj >= CONTROL_EXPRESSION_PEDAL_1 && obj <= CONTROL_EXPRESSION_PEDAL_2)) {\n        obj_type = \"control\";\n    } else if (obj === CONTROL_MIDI) {\n        obj_type = \"midi\";\n    } else {\n        console.warn('parseSysexMessage: invalid obj', obj);\n        return null;\n    }\n\n    // console.log(`target=${TARGET[tgt]} (${h(tgt)}), idx=${h(idx)}, object=${OBJECT[obj]} (${h(obj)}), type=${obj_type}`);\n    // console.log(`${TARGETS[tgt]} ${h(idx)} : ${CONTROLS[obj]} ${obj_type}`);\n\n    if (obj_type === \"name\") {\n\n        // NAME\n        message[tgt][idx][\"name\"] = getPresetName(data.slice(ELM));\n\n    }\n\n    if (obj_type === \"control\") {\n\n        message[tgt][idx][\"controls\"] = {\n            [obj]: {\n                steps: {}\n            }\n        };\n\n        // which element?\n        let e = data[ELM];\n\n        if (e >= 0x01 && e <= 0x24) {\n\n            // STEPS\n            if (data.length > ELM+22) {\n                let s = getControlStep(data.slice(ELM, ELM + 23));\n                message[tgt][idx][\"controls\"][obj][\"steps\"][s.index] = s.config;\n            } else {\n                console.warn(`parseSysexMessage: data does not contains steps. data.length=${data.length}`, hs(data));\n            }\n\n        } else if (e === CONTROL_MODE_ELEMENT) {\n\n            // CONTROL MODE\n            // console.log('parseSysexMessage: CONTROL MODE');\n\n            let mode_cfg = getControlMode(data.slice(ELM, data.length-1));\n            message[tgt][idx][\"controls\"][obj] = mergeDeep(message[tgt][idx][\"controls\"][obj], mode_cfg);\n\n        } else if (e >= 0x40 && e <= 0x57) {\n\n            // LED\n            // console.log('parseSysexMessage: LED');\n\n            let led_cfg = getControlLED(data.slice(ELM, data.length-1));\n            message[tgt][idx][\"controls\"][obj] = mergeDeep(message[tgt][idx][\"controls\"][obj], led_cfg);\n\n        } else if (e === 0x7F) {\n\n            // ALL\n            // console.log('parseSysexMessage: ALL');\n\n        } else {\n            console.warn(`parseSysexMessage: unknown element: ${h(e)}`);\n            return null;\n        }\n\n    }\n\n    if (obj_type === \"midi\") {\n\n        // F0 00 01 77 7F 01 01 01\n        // 7E\n        //\n        // 25 01 00 00\n        // 26 01 61 00\n        // 27 01 00 00\n        // 28 01 00 00\n        // 29 01 00 56\n        //\n        // F7\n\n        // F0 00 01 77 7F 01 01 05\n        // 7E\n        //\n        // 07 01 02 00\n        // 08 01 65 00\n        // 09 01 7B 00\n        // 0A 01 7F 00\n        // 0B 01 00 68\n        //\n        // F7\n\n        message[tgt][idx][\"midi\"] = {\n            // settings: {}\n        };\n\n        // which element?\n        let e = data[ELM];\n\n        if (e >= 0x01 && e <= 0x60) {\n\n            // if (e === 0x06 || e === 0x06 || e === 0x06 || e === 0x06 || e === 0x06 || )\n\n            // console.log(ELM, data.length);  // ELM == 8\n\n            // SETTINGS\n            if (data.length > ELM+19) {\n                let s = getMidiSetting(data.slice(ELM, ELM + 20));\n                message[tgt][idx][\"midi\"][s.index] = s.config;\n            } else {\n                console.warn(`parseSysexMessage: data does not contains steps. data.length=${data.length}`, hs(data));\n            }\n\n        } else {\n            console.warn(`parseSysexMessage: unknown element: ${h(e)}`);\n            return null;\n        }\n\n    }\n\n    // console.log('MESSAGE', message);\n    return message;\n\n} // parseSysex()\n\n\n/**\n * Parse a sysex dump. A dump can contains multiple sysex messages.\n * Return a array of presets.\n * @param data ArrayBuffer\n */\nfunction parseSysexDump(data) {\n\n    // console.log(\"parseSysexDump\", hs(data));\n\n    if (data === null) return null;\n\n    let presets = {};   // Collection of presets. The key is the preset's index. The value is the preset.\n    // let global = {};    // global conf\n\n    let i = 0;\n    let cont = true;\n    while (cont) {\n\n        i = data.indexOf(SYSEX_START, i);\n        if (i < 0) break;\n\n        i++;\n\n        let k = data.indexOf(SYSEX_END, i);\n\n        let manufacturer_id = (Array.from(data.slice(i, i+3)).map(n => h(n))).join(\" \");    // Array.from() is necessary to get a non-typed array\n        if (manufacturer_id !== NEKTAR_TECHNOLOGY_INC) {\n            console.log(\"parseSysexDump: file does not contain a Nektar Pacer patch\", i, k, manufacturer_id, \"-\", hs(data));\n            return null;\n        }\n\n        if (data[i+3] !== 0x7F) {\n            console.warn(`parseSysexDump: invalid byte after manufacturer id: ${data[i+1 +3]}`);\n            return null;\n        }\n\n        let config = parseSysexMessage(data.slice(i, k));  // data.slice(i, k) are the data between SYSEX_START and SYSEX_END\n\n        if (config) {\n            mergeDeep(presets, config);\n        }\n\n    } // while\n\n    // console.log(JSON.stringify(presets));\n\n    return presets;\n}\n\n\n/**\n * Return an array of sysex messages to update a control's steps.\n * @param presetIndex\n * @param controlId\n * @param steps\n * @returns {*}\n */\nfunction buildControlStepSysex(presetIndex, controlId, steps) {\n\n    // console.log(`buildControlStepSysex(${presetIndex}, ${controlId}, ...)`);\n\n    let msgs = [];\n\n    for (let i of Object.keys(steps)) {\n\n        let step = steps[i];\n\n        if (!step.changed) continue;\n\n        // start with command and target:\n        let msg = [\n            COMMAND_SET,\n            TARGET_PRESET,\n            presetIndex,\n            controlId];\n\n        // add data:\n        msg.push((i-1)*6 + 1, 1, step.channel, 0x00);\n        msg.push((i-1)*6 + 2, 1, step.msg_type, 0x00);\n        msg.push((i-1)*6 + 3, 1, step.data[0], 0x00);\n        msg.push((i-1)*6 + 4, 1, step.data[1], 0x00);\n        msg.push((i-1)*6 + 5, 1, step.data[2], 0x00);\n        msg.push((i-1)*6 + 6, 1, step.active);\n\n        // add checksum:\n        msg.push(checksum(msg));\n\n        // inject header and add to list of messages:\n        msgs.push(SYSEX_HEADER.concat(msg));\n    }\n\n    // console.log(\"buildControlStepSysex\", msgs);\n\n    return msgs;\n}\n\nfunction buildControlModeSysex(presetIndex, controlId, mode) {\n\n    // console.log(`buildControlStepMode(${presetIndex}, ${controlId}, ...)`);\n\n    // start with command and target:\n    let msg = [\n        COMMAND_SET,\n        TARGET_PRESET,\n        presetIndex,\n        controlId,\n        CONTROL_MODE_ELEMENT,\n        0x01,   // 1 byte of data\n        mode\n    ];\n\n    // add checksum:\n    msg.push(checksum(msg));\n\n    // console.log(\"buildControlModeSysex\", msg);\n\n    // inject header and return the result:\n    return SYSEX_HEADER.concat(msg);\n}\n\n\nfunction getControlUpdateSysexMessages(presetIndex, controlId, data) {\n    let msgs = buildControlStepSysex(presetIndex, controlId, data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"steps\"]);\n    if (data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"changed\"]) {\n        msgs.push(buildControlModeSysex(presetIndex, controlId, data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"control_mode\"]));\n    }\n    return msgs;\n}\n\n\n\nfunction buildMidiSettingStepSysex(presetIndex, settings) {\n\n    // console.log(`buildMidiSettingStepSysex(${presetIndex}, ...)`);\n\n    let msgs = [];\n\n    for (let i of Object.keys(settings)) {\n\n        let setting = settings[i];\n\n        if (!setting.changed) continue;\n\n        // start with command and target:\n        let msg = [\n            COMMAND_SET,\n            TARGET_PRESET,\n            presetIndex,\n            CONTROL_MIDI];\n\n        // add data:\n        msg.push((i-1)*6 + 1, 1, setting.channel, 0x00);\n        msg.push((i-1)*6 + 2, 1, setting.msg_type, 0x00);\n        msg.push((i-1)*6 + 3, 1, setting.data[0], 0x00);\n        msg.push((i-1)*6 + 4, 1, setting.data[1], 0x00);\n        msg.push((i-1)*6 + 5, 1, setting.data[2], 0x00);\n        msg.push((i-1)*6 + 6, 1, setting.active);\n\n        // add checksum:\n        msg.push(checksum(msg));\n\n        // inject header and add to list of messages:\n        msgs.push(SYSEX_HEADER.concat(msg));\n    }\n\n    // console.log(\"buildControlStepSysex\", msgs);\n\n    return msgs;\n}\n\n\nfunction buildPresetNameSysex(presetIndex, data) {\n\n    if (!data[TARGET_PRESET][presetIndex].changed) return null;\n\n    // start with command and target:\n    let msg = [\n        COMMAND_SET,\n        TARGET_PRESET,\n        presetIndex,\n        CONTROL_NAME];\n\n    const s = data[TARGET_PRESET][presetIndex][\"name\"];\n\n    // add data:\n    msg.push(s.length);\n\n    for (let i=0; i < s.length; i++) {\n        msg.push(s.charCodeAt(i));\n    }\n\n    // add checksum:\n    msg.push(checksum(msg));\n\n    return msg;\n}\n\n\nfunction getMidiSettingUpdateSysexMessages(presetIndex, data) {\n    return buildMidiSettingStepSysex(presetIndex, data[TARGET_PRESET][presetIndex][\"midi\"]);\n}\n\n\nexport {\n    isSysexData,\n    parseSysexDump,\n    getControlUpdateSysexMessages,\n    getMidiSettingUpdateSysexMessages,\n    buildPresetNameSysex\n};\n\n","import WebMidi from \"webmidi\";\n\nfunction portById(id) {\n    let p = WebMidi.inputs.find(item => item.id === id);\n    if (p) {\n        return p;\n    } else {\n        return WebMidi.outputs.find(item => item.id === id);\n    }\n}\n\nfunction inputById(id) {\n    return WebMidi.inputs.find(item => item.id === id);\n}\n\nfunction outputById(id) {\n    return WebMidi.outputs.find(item => item.id === id);\n}\n\n/**\n * Return webmidi input name from input id\n * @param id\n */\nfunction inputName(id) {\n    let i = inputById(id);\n    return i ? i.name : null;\n}\n\nfunction outputName(id) {\n    let i = outputById(id);\n    return i ? i.name : null;\n}\n\n\nexport {\n    portById,\n    inputById,\n    inputName,\n    outputName,\n    outputById\n}\n","import React from \"react\";\nimport \"./DumpSysex.css\";\nimport {\n    MSG_SW_NOTE,\n    CONTROLS,\n    TARGET_PRESET,\n    MSG_TYPES,\n    presetIndexToXY\n} from \"../pacer\";\nimport {h, hs} from \"../utils/hexstring\";\nimport \"./DumpSysex.css\";\nimport * as Note from \"tonal-note\";\n\nconst MidiTable = ({ settings }) => {\n    if (settings === null || settings === undefined) return null;\n    return (\n        <div className=\"dump-control\">\n            <table>\n                <tbody>\n                <tr>\n                    <td colSpan={6} className=\"name\">MIDI settings</td>\n                </tr>\n                {Object.keys(settings).map(i => {\n                    let t = MSG_TYPES[settings[i][\"msg_type\"]];\n                    if (settings[i][\"msg_type\"] === MSG_SW_NOTE) {\n                        t = t + ' ' + Note.fromMidi(settings[i][\"data\"][0], true) + ' vel. ' + settings[i][\"data\"][1];\n                    }\n                    return (\n                        <tr key={i}>\n                            <td>settings {i}</td>\n                            <td>ch. {h(settings[i][\"channel\"])}</td>\n                            <td>msg {h(settings[i][\"msg_type\"])}</td>\n                            <td>{t}</td>\n                            <td>{hs(settings[i][\"data\"])}</td>\n                            {/*<td>{settings[i][\"msg_type\"] === MSG_SW_NOTE ? Note.fromMidi(settings[i][\"data\"][0], true) : \"  \"}</td>*/}\n                            <td>{settings[i][\"active\"] ? \"active\" : \"OFF\"}</td>\n                        </tr>\n                    )}\n                )}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nconst MidiSettings = ({ settings }) => {\n    if (settings === null) return null;\n    return (\n        <div>\n            <MidiTable settings={settings} />\n        </div>\n    );\n};\n\nconst ControlTable = ({ obj, config }) => {\n    if (config === null || config === undefined) return null;\n    return (\n        <div className=\"dump-control\">\n            <table>\n                <tbody>\n                    <tr>\n                        <td colSpan={6} className=\"name\">{CONTROLS[obj]}</td>\n                    </tr>\n                    {Object.keys(config[\"steps\"]).map(i => {\n                        let t = MSG_TYPES[config[\"steps\"][i][\"msg_type\"]];\n                        if (config[\"steps\"][i][\"msg_type\"] === MSG_SW_NOTE) {\n                            t = t + ' ' + Note.fromMidi(config[\"steps\"][i][\"data\"][0], true) + ' vel. ' + config[\"steps\"][i][\"data\"][1];\n                        }\n                        return (\n                            <tr key={`${obj}.${i}`}>\n                                <td>step {i}</td>\n                                <td>ch. {h(config[\"steps\"][i][\"channel\"])}</td>\n                                <td>msg {h(config[\"steps\"][i][\"msg_type\"])}</td>\n                                <td>{t}</td>\n                                <td>{hs(config[\"steps\"][i][\"data\"])}</td>\n                                {/*<td>{config[\"steps\"][i][\"msg_type\"] === MSG_SW_NOTE ? Note.fromMidi(config[\"steps\"][i][\"data\"][0], true) : \"  \"}</td>*/}\n                                <td>{config[\"steps\"][i][\"active\"] ? \"active\" : \"OFF\"}</td>\n                            </tr>\n                        )}\n                    )}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nconst Controls = ({ controls }) => {\n    if (controls === null || controls === undefined) return null;\n    return (\n        <div className=\"dump-controls\">\n            {Object.keys(controls).map(obj => <ControlTable key={obj} obj={obj} config={controls[obj]} />)}\n        </div>\n    );\n};\n\nconst Preset = ({ index, data }) => {\n    if (data === null || data === undefined) return null;\n    return (\n        <div>\n            <h2>Preset {presetIndexToXY(parseInt(index, 10))} (#{index})</h2>\n            <Controls controls={data[\"controls\"]} />\n            <MidiSettings settings={data[\"midi\"]} />\n            {/*<pre>{JSON.stringify(data, null, 4)}</pre>*/}\n            {/*<pre>{JSON.stringify(data, null, 4)}</pre>*/}\n        </div>\n    );\n};\n\nconst Presets = ({ presets }) => {\n    if (presets === null || presets === undefined) return null;\n    return (\n        <div>\n            {Object.keys(presets).map(idx => <Preset key={idx} index={idx} data={presets[idx]} />)}\n        </div>\n    );\n};\n\nconst DumpSysex = ({ data }) => {\n    return (\n        <div className=\"dump code\">\n            {\n                // _.map(data, (value, key) => <Preset name={key} data={value} />)\n                data && <Presets presets={data[TARGET_PRESET]} />\n            }\n{/*\n            {\n                JSON.stringify(data, null, 4)\n            }\n*/}\n        </div>\n    );\n};\n\n\nexport default DumpSysex;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport * as WebMidi from \"webmidi\";\nimport {inputById, portById} from \"../utils/ports\";\n\n\nconst propTypes = {\n    classname: PropTypes.string,\n    only: PropTypes.string,                 // regex applied to port.name\n    autoConnect: PropTypes.string,          // regex applied to port.name\n    inputRenderer: PropTypes.func,\n    outputRenderer: PropTypes.func,\n    onMidiInputEvent: PropTypes.func,\n    onMidiOutputEvent: PropTypes.func,\n    onInputConnection: PropTypes.func,      // callback with port.id as parameter\n    onOutputConnection: PropTypes.func,     // callback with port.id as parameter\n    onInputDisconnection: PropTypes.func,   // callback with port.id as parameter\n    onOutputDisconnection: PropTypes.func,  // callback with port.id as parameter\n    setOutput: PropTypes.func,              // callback with port.id as parameter\n    children: PropTypes.node\n};\n\nconst defaultProps = {\n    classname: '',\n    only: \".*\"\n};\n\n/**\n *\n * @param props\n * @constructor\n */\nexport default class Midi extends Component {\n\n    //TODO: allow specification of channel and message types to listen to\n\n    state = {\n        inputs: [],         // array of MIDI inputs (copied from WebMidi object)\n        outputs: [],        // array of MIDI outputs (copied from WebMidi object)\n        input: null,        // MIDI output port enabled\n        output: null,       // MIDI output port enabled\n    };\n\n    connectInput = port => {\n        if (this.props.onMidiInputEvent) {\n            if (port) {\n                if (port.hasListener('midimessage', 'all', this.props.onMidiInputEvent)) {\n                    console.warn(`Midi.connectInput: sysex messages on all channels listener already connected`);\n                } else {\n                    console.log(`Midi.connectInput: add listener for sysex messages on all channels`);\n                    port.addListener('midimessage', 'all', this.props.onMidiInputEvent);\n                    if (this.props.onInputConnection) {\n                        this.props.onInputConnection(port.id);\n                    }\n                }\n            }\n        }\n    };\n\n    disconnectInput = port => {\n        if (port) {\n            port.removeListener();\n            console.log(`disconnectInput: input ${port.id} disconnected`);\n            if (this.props.onInputDisconnection) {\n                this.props.onInputDisconnection(port.id);\n            }\n        }\n    };\n\n    connectOutput = port => {\n        if (port) {\n            this.setState({output: port.id});\n            console.log(`connectOutput: output ${port.id} connected`);\n            if (this.props.onOutputConnection) {\n                this.props.onOutputConnection(port.id);\n            }\n        }\n    };\n\n    disconnectOutput = () => {\n        if (this.state.output) {\n            let port_id = this.state.output;\n            this.setState({output: null});\n            console.log(`disconnectOutput: output ${port_id} disconnected`);\n            if (this.props.onOutputDisconnection) {\n                this.props.onOutputDisconnection(port_id);\n            }\n        }\n\n    };\n\n    autoConnectInput = () => {\n\n        if (this.props.autoConnect) {\n\n            console.log(`Midi.autoConnectInput: autoConnect ${this.props.autoConnect}`, this.state.inputs);\n\n            if (this.state.input === null) {\n\n                for (let port of this.state.inputs) {      //WebMidi.inputs) {\n\n                    console.log(`Midi.autoConnectInput: port ${port.name} ${port.id}`);\n\n                    if (port.type === 'input' && port.name.match(this.props.autoConnect)) {  // TODO: check manufacturer too; TODO: match case insensitive\n\n                        console.log(`Midi.autoConnectInput: connect ${port.name}`);\n\n                        this.setState({input: port.id});\n\n                        this.connectInput(port);\n\n                        // if (port.hasListener('noteon', 'all', this.props.onMidiInputEvent)) {\n                        //     console.warn(`Midi.autoConnectInput: autoConnect: listener already connected`);\n                        // } else {\n                        //     console.log(`Midi.autoConnectInput: autoConnect: add listener`);\n                        //     port.addListener('noteon', 'all', this.props.onMidiInputEvent);\n                        // }\n                        break;\n                    }\n                }\n\n            } else {\n                console.log(`Midi.autoConnectInput: autoConnect skipped, already connected`);\n            }\n        }\n    };\n\n    autoConnectOutput = () => {\n\n        if (this.props.autoConnect) {\n\n            console.log(`Midi.autoConnectOutput: autoConnect ${this.props.autoConnect}`);\n\n            if (this.state.output === null) {\n\n                for (let port of this.state.outputs) {\n\n                    console.log(`Midi.autoConnectOutput: port ${port.name} ${port.id}`);\n\n                    if (port.type === 'output' && port.name.match(this.props.autoConnect)) {  // TODO: check manufacturer too; TODO: match case insensitive\n\n                        console.log(`Midi.autoConnectOutput: autoConnect: auto-connect ${port.name}`);\n\n                        // this.setState({output: port.id});\n                        this.connectOutput(port);\n\n                        break;\n                    }\n                }\n\n            } else {\n                console.log(`Midi.autoConnectOutput: autoConnect skipped, already connected`);\n            }\n        }\n    };\n\n    registerInputs = () => {\n        const r = new RegExp(this.props.only, 'i');\n        console.log(`Midi.registerInputs matching /${this.props.only}/i`, WebMidi.inputs, WebMidi.inputs.filter(port => port.name.match(r)));\n        this.setState({ inputs: WebMidi.inputs.filter(port => port.name.match(r)) }, () => this.autoConnectInput());\n    };\n\n    registerOutputs = () => {\n        const r = new RegExp(this.props.only, 'i');\n        console.log(`Midi.registerOutputs matching /${this.props.only}/i`, WebMidi.outputs, WebMidi.outputs.filter(port => port.name.match(r)));\n        this.setState({ outputs: WebMidi.outputs.filter(port => port.name.match(r)) }, () => this.autoConnectOutput());\n    };\n\n    unRegisterInputs = () => {\n        console.log(\"Midi.unRegisterInputs\");\n        this.disconnectInput(portById(this.state.input));\n        this.setState({ inputs: [], input: null });\n    };\n\n    unRegisterOutputs = () => {\n        console.log(\"Midi.unRegisterOutputs\");\n        this.setState({ outputs: [], output: null });\n    };\n\n    handleMidiConnectEvent = e => {\n\n        console.group(`Midi: handleMidiConnectEvent: ${e.port.type} ${e.type}: ${e.port.name}`, e);\n\n        // TODO: is disconnect event, remove the existing input listeners\n        /*\n        if (e.type === \"disconnected\") {\n            // console.log(`must disconnect ${e.port} ${e.port.id}`);\n            this.disconnectInput(e.port.id);\n        }\n        */\n\n        if (e.port.name.match(new RegExp(this.props.only, 'i'))) {\n\n            if (e.port.type === 'input') {\n                // console.log(`ignore MIDI input connect event`);\n                console.log(\"Midi.handleMidiConnectEvent: call registerInputs\");\n                this.registerInputs();\n            }\n\n            if (e.port.type === 'output') {\n                console.log(\"Midi.handleMidiConnectEvent: call registerOutputs\");\n                this.registerOutputs();\n            }\n\n        } else {\n\n            console.log(`Midi.handleMidiConnectEvent: port ignored: ${e.port.name}`);\n\n        }\n\n        // Note: if we don't display the events, than the UI will not be updated if we don't update the state.\n\n        console.groupEnd();\n\n    };\n\n    togglePort = (port_id) => {\n        let p = portById(port_id);\n        if (p.type === 'input') {\n            console.log(\"toggle input\", port_id);\n            let prev = this.state.input;\n            if (this.state.input) {\n                this.disconnectInput(portById(this.state.input));\n                // this.setState({ input: null });\n            }\n            if (port_id !== prev) {\n                this.connectInput(inputById(port_id));\n                // this.setState({ input: port_id });\n            }\n            this.setState({ input: port_id === prev ? null : port_id });\n        } else {\n            console.log(\"toggle output\", port_id);\n            // There is nothing to \"connect\" for an output port since this type of port does not generate any event.\n            // if (this.state.output) this.disconnectOutput(this.state.output);\n            if (this.state.output) {\n                this.disconnectOutput();\n            } else {\n                this.connectOutput(portById(port_id));\n            }\n            // this.setState({ output: port_id === this.state.output ? null : port_id });\n        }\n    };\n\n    midiOn = err => {\n        if (err) {\n            console.warn(\"Midi.midiOn: WebMidi could not be enabled.\", err);\n        } else {\n            console.log(\"Midi.midiOn: WebMidi enabled\");\n            WebMidi.addListener(\"connected\", this.handleMidiConnectEvent);\n            WebMidi.addListener(\"disconnected\", this.handleMidiConnectEvent);\n\n            /*\n            if (WebMidi.hasListener(\"connected\", this.handleMidiConnectEvent)) {\n                console.log(\"MidiPorts.componentDidMount: handleMidiConnectEvent already set on 'connected' event\");\n            } else {\n                WebMidi.addListener(\"connected\", this.handleMidiConnectEvent);\n            }\n            if (WebMidi.hasListener(\"disconnected\", this.handleMidiConnectEvent)) {\n                console.log(\"MidiPorts.componentDidMount: handleMidiConnectEvent already set on 'disconnected' event\");\n            } else {\n                WebMidi.addListener(\"disconnected\", this.handleMidiConnectEvent);\n            }\n            */\n        }\n    };\n\n    componentDidMount() {\n        console.log(`Midi: component did mount: WebMidi.enabled=${WebMidi.enabled}`);\n        if (WebMidi.enabled) {\n            console.log(`Midi: component did mount: already enabled, register ports`);\n            this.registerInputs();\n            this.registerOutputs();\n        } else {\n            console.log(\"Midi: component did mount: Calling WebMidi.enable\");\n            WebMidi.enable(this.midiOn, true);  // true to enable sysex support\n        }\n    }\n\n    componentWillUnmount() {\n        console.log(\"Midi: component will unmount: unregister ports\");\n        this.unRegisterInputs();\n        this.unRegisterOutputs();\n    }\n\n    render() {\n\n        let {inputs, outputs} = this.state;\n\n        if (inputs.length === 0 && outputs.length === 0) {\n            return (\n                <div className={this.props.className}>\n                    {this.props.children}\n                </div>\n            );\n        } else {\n            return (\n                <div className={this.props.className}>\n                    {inputs.map(port => this.props.inputRenderer(port, port.id === this.state.input, this.togglePort))}\n                    {outputs.map(port => this.props.outputRenderer(port, port.id === this.state.output, this.togglePort))}\n                </div>\n            );\n        }\n    }\n\n}\n\nMidi.propTypes = propTypes;\nMidi.defaultProps = defaultProps;\n","import React, {Component} from \"react\";\nimport \"./MidiPort.css\";\nimport Switch from \"react-switch\";\n\nclass MidiPorts extends Component {\n\n    render() {\n\n        let port = this.props.port;\n        let isSelected = this.props.selected;\n        let clickHandler = this.props.clickHandler;\n\n        // console.log(\"MidiPort.render\", port.type, port.name, isSelected);\n\n        //TODO: display MIDI channel when connected\n        return (\n            <div key={port.id} className={isSelected ? `port ${port.type} enabled` : `port ${port.type}`}>\n                {/*<div className={\"port-description\"}>*/}\n                    <div className=\"port-type\">{port.type === 'input' ? 'IN' : 'OUT'}</div>\n                    <div className=\"port-name\">{port.name} </div>\n                    <div className=\"port-switch\">\n                        <Switch\n                            onChange={() => clickHandler(port.id)}\n                            checked={isSelected}\n                            className=\"react-switch\"\n                            id=\"normal-switch\"\n                            height={20} width={42}\n                        />\n                    </div>\n                {/*</div>*/}\n            </div>\n        );\n\n/*\n        return (\n            <div key={port.id} className={isSelected ? `port ${port.type} enabled` : `port ${port.type}`}>\n                <div className={\"port-description\"}>\n                    <div className=\"type\">{port.type} {port.type === 'input' ? 'from' : 'to'}</div>\n                    <div className=\"port-name\">{port.name}</div>\n                </div>\n                <div className={\"port-state\"}>\n                    <Switch\n                        onChange={() => clickHandler(port.id)}\n                        checked={isSelected}\n                        className=\"react-switch\"\n                        id=\"normal-switch\"\n                        height={20} width={42}\n                    />\n                    <span className={isSelected ? \"port-usage selected\" : \"port-usage\"}\n                          onClick={() => clickHandler(port.id)}>{isSelected ? \"enabled\" : \"disabled\"}</span>\n                </div>\n            </div>\n        );\n*/\n    }\n\n}\n\nexport default MidiPorts;\n","import React, {Component} from 'react';\nimport {isSysexData, mergeDeep, parseSysexDump} from \"../utils/sysex\";\nimport {requestPreset, requestPresetObj, SYSEX_SIGNATURE} from \"../pacer/index\";\nimport {outputById} from \"../utils/ports\";\nimport {fromHexString, h, hs} from \"../utils/hexstring\";\nimport \"./TestSender.css\";\nimport {produce} from \"immer\";\nimport DumpSysex from \"../components/DumpSysex\";\nimport {checksum, PACER_MIDI_PORT_NAME, SYSEX_HEADER} from \"../pacer\";\nimport Midi from \"../components/Midi\";\nimport MidiPort from \"../components/MidiPort\";\n\nclass TestSender extends Component {\n\n    state = {\n        output: null,           // MIDI output port used for output\n        data: null,\n        messages: [\n            requestPreset(5),\n            requestPresetObj(5, 0x0D)\n        ],\n        customMessage: \"\"\n    };\n\n    updateCustomMessage = (event) => {\n        let s = (event.target.value.match(/[0-9a-fA-F]+/g) || []).join('');\n        let h = '';\n        for (let i=0; i<s.length; i++) {\n            if ((i > 0) && (i % 2 === 0)) h += ' ';\n            h += s[i];\n        }\n        this.setState({\n            customMessage: h    //,\n            // cs: checksum(fromHexString(h, / /g))\n        });\n    };\n\n    sendCustomMessage = () => {\n        let data = Array.from(fromHexString(this.state.customMessage, / /g));\n        if (data && data.length > 0) {\n            data.push(checksum(data));\n            this.sendSysex(SYSEX_HEADER.concat(data));\n        }\n    };\n\n    handleMidiInputEvent = (event) => {\n        console.log(\"TestSender.handleMidiInputEvent\", event, event.data);\n        // if (event instanceof MIDIMessageEvent) {\n        if (isSysexData(event.data)) {\n            console.log(\"TestSender.handleMidiInputEvent: update state\");\n            this.setState(\n                produce(draft => {\n                    draft.data = mergeDeep(draft.data || {}, parseSysexDump(event.data));\n                    // this.props.onBusy(false);\n                })\n            )\n        } else {\n            console.log(\"MIDI message is not a sysex message\")\n        }\n        // }\n    };\n\n    renderPort = (port, selected, clickHandler) => {\n        if (port === undefined || port === null) return null;\n        return (\n            <MidiPort key={port.id} port={port} selected={selected} clickHandler={clickHandler} />\n        )\n    };\n\n    setOutput = (port_id) => {\n        console.log(`Page.setOutput ${port_id}`);\n        this.setState({output: port_id});\n    };\n\n    sendSysex = msg => {\n        console.log(\"sendSysex\", msg);\n        if (!this.state.output) return;\n        let out = outputById(this.state.output);\n        if (!out) {\n            console.warn(`send: output ${this.state.output} not found`);\n            return;\n        }\n        this.setState(\n            {data: null},\n            () => out.sendSysex(SYSEX_SIGNATURE, msg)\n        );\n    };\n\n    sendMessage = (msg) => {\n        this.sendSysex(msg);\n    };\n\n    /**\n     * @returns {*}\n     */\n    render() {\n\n        // console.log(\"SendTester.render\", this.props);\n\n        const { data, messages, customMessage } = this.state;\n\n        // console.log(\"SendTester.render\", messages, customMessage.length % 2);\n\n        const cs = checksum(fromHexString(customMessage, / /g));\n\n        return (\n            <div className=\"wrapper\">\n                <div className=\"content\">\n                    <div className=\"content-row step-1\">\n{/*\n                        <div className=\"background\">\n                            Connect\n                        </div>\n                        <div className=\"content-row-header\">\n                            1\n                        </div>\n*/}\n                        <div className=\"content-row-content row-middle-aligned\">\n                            <Midi only={PACER_MIDI_PORT_NAME} autoConnect={PACER_MIDI_PORT_NAME}\n                                  inputRenderer={this.renderPort} outputRenderer={this.renderPort}\n                                  onMidiInputEvent={this.handleMidiInputEvent}\n                                  onOutputConnection={this.setOutput}\n                                  className=\"sub-header\" />\n                            <div className=\"no-midi\">Please connect your Pacer to your computer.</div>\n                        </div>\n                    </div>\n                    <div className=\"content-row step-2\">\n{/*\n                        <div className=\"background\">\n                            Send\n                        </div>\n                        <div className=\"content-row-header\">\n                            2\n                        </div>\n*/}\n                        <div className=\"content-row-content\">\n                            <h2>Test messages:</h2>\n                            <div>\n                            {messages.map((msg, i) =>\n                                <div key={i} className=\"send-message\">\n                                    <button onClick={() => this.sendMessage(msg)}>send</button>\n                                    <span className=\"code light\">{ hs(SYSEX_SIGNATURE.concat(msg.slice(0, 1))) } </span>\n                                    <span className=\"code\">{ hs(msg.slice(1, -1)) } </span>\n                                    <span className=\"code light\"> {hs(msg.slice(-1))}</span>\n                                </div>\n                            )}\n                            </div>\n                            <h2>Custom message:</h2>\n                            <div>\n                                <div className=\"send-message\">\n                                    <button onClick={this.sendCustomMessage} disabled={customMessage.length === 0}>send</button>\n                                    <span className=\"code light\">{hs(SYSEX_SIGNATURE)} {hs(SYSEX_HEADER)} </span>\n                                    <input type=\"text\" className=\"code\" size=\"30\" value={customMessage}\n                                           placeholder={\"hex digits only\"} onChange={this.updateCustomMessage} />\n                                    <span className=\"code light\"> {h(cs)}</span>\n                                </div>\n                            </div>\n\n                        </div>\n                    </div>\n                    <div className=\"content-row step-3\">\n{/*\n                        <div className=\"background\">\n                            Receive\n                        </div>\n                        <div className=\"content-row-header\">\n                            3\n                        </div>\n*/}\n                        <div className=\"content-row-content\">\n                            <h2>Response:</h2>\n                            <div className=\"message code\">\n                                {/*{data && JSON.stringify(data)}*/}\n                                <DumpSysex data={data} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"help\">\n                    <h3>Help</h3>\n                </div>\n\n            </div>\n\n        );\n    }\n}\n\nexport default TestSender;\n","import React, {Fragment} from \"react\";\nimport \"./PresetSelector.css\";\nimport \"./selector.css\";\nimport {presetXYToIndex} from \"../pacer\";\n\nconst Selector = ({ name, id, selected, onClick }) =>\n    <div className={selected ? \"selector selected\" : \"selector\"} onClick={() => onClick(id)}>{name}</div>;\n\n\n/*\nconst PresetSelectors = ({ currentPreset, onClick }) =>\n    <div className=\"preset-selectors\">\n        {\n            Array.from(Array(6).keys()).map(\n                digit => {\n                    return (\n                        <Fragment>{\n                            ['A', 'B', 'C', 'D'].map(\n                                letter => {\n                                    let name = letter + (digit + 1);\n                                    let id = presetXYToIndex(name);\n                                    return <PresetSelector name={name} id={id} selected={id === currentPreset} onClick={onClick} key={id} />\n                                })\n                        }</Fragment>)\n                }\n            )\n        }\n    </div>;\n*/\n\n//FIXME: allow the selection of preset #0 (CUR)\n\nconst PresetSelector = ({ currentPreset, onClick }) =>\n    <Fragment>\n        <div className=\"preset-selectors\">\n            <Selector name={\"0\"} id={0} selected={0 === currentPreset} onClick={onClick} key={0} />\n        {\n            ['A', 'B', 'C', 'D'].map(\n                letter => {\n                    return (\n                        <Fragment key={letter}>\n                        {\n                            (letter !== 'A') && <div></div>\n                        }\n                        {\n                            Array.from(Array(6).keys()).map(\n                                digit => {\n                                    let name = letter + (digit + 1);\n                                    let id = presetXYToIndex(name);\n                                    return <Selector name={name} id={id} selected={id === currentPreset} onClick={onClick} key={id} />\n                                })\n                        }</Fragment>)\n                }\n            )\n        }\n        </div>\n    </Fragment>;\n\n/*\n\n    with CSS grid\n\nconst PresetSelectors = ({ currentPreset }) =>\n    <div>\n        <h2>Preset:</h2>\n        <div className=\"selectors\">\n            {\n                ['A', 'B', 'C', 'D'].map(\n                    e => {\n                        return Array.from(Array(6).keys()).map(\n                            i => {\n                                let id = e + (i+1);\n                                console.log(id, currentPreset);\n                                return <PresetSelector name={id} selected={id === currentPreset} />\n                            }\n                        )\n                    }\n                )\n            }\n        </div>\n    </div>;\n*/\n\nexport default PresetSelector;\n","import React from \"react\";\nimport {FOOTSWITCHES, STOMPSWITCHES_TOP, STOMPSWITCHES_BOTTOM, EXPPEDALS, CONTROLS} from \"../pacer\";\nimport \"./ControlSelector.css\";\n\nconst Control = ({ name, id, selected, onClick }) =>\n    <div className={selected ? \"selector selected\" : \"selector\"} onClick={() => onClick(id)}>\n        <div className=\"name\">{name}</div>\n    </div>;\n\n\nconst ControlSelector = ({ currentControl, onClick }) =>\n    <div className=\"controls\">\n        {\n            FOOTSWITCHES.map(\n                key => <Control key={key} name={CONTROLS[key]} id={key} selected={key === currentControl} onClick={onClick} />\n            )\n        }\n        {\n            EXPPEDALS.map(\n                key => <Control key={key} name={CONTROLS[key]} id={key} selected={key === currentControl} onClick={onClick} />\n            )\n        }\n        <div className=\"no-control\">&nbsp;</div>\n        {\n            STOMPSWITCHES_TOP.map(\n                key => <Control key={key} name={CONTROLS[key]} id={key} selected={key === currentControl} onClick={onClick} />\n            )\n        }\n        <div className=\"no-control\">&nbsp;</div>\n        {\n            STOMPSWITCHES_BOTTOM.map(\n                key => <Control key={key} name={CONTROLS[key]} id={key} selected={key === currentControl} onClick={onClick} />\n            )\n        }\n    </div>;\n\n\nexport default ControlSelector;\n","import React, {Component, Fragment} from 'react';\nimport {\n    COLORS,\n    MSG_CTRL_OFF,\n    MSG_SW_NOTE,\n    MSG_SW_NOTE_TGGLE, MSG_TYPES_DATA_HELP,\n    MSG_TYPES_FULLNAME_SW,\n    MSG_TYPES_FULLNAME_SW_SORTED\n} from \"../pacer\";\nimport * as Note from \"tonal-note\";\nimport \"./ControlStepsEditor.css\";\n\nconst LEDMidi = ({ current_value, onChange }) => {\n    return (\n        <select defaultValue={current_value} onChange={(event) => onChange(event.target.value)}>\n            <option value=\"0\">0</option>\n            <option value=\"1\">1</option>\n        </select>\n    );\n};\n\nconst LEDColor = ({ current_value, onChange }) => {\n    return (\n        <select defaultValue={current_value} onChange={(event) => onChange(event.target.value)}>\n            {\n                Object.keys(COLORS).map(\n                    key => {\n                        // let n = Note.fromMidi(i, true);\n                        return <option key={key} value={key}>{COLORS[key]}</option>\n                    })\n            }\n        </select>\n    );\n};\n\nconst LEDNum = ({ current_value, onChange }) => {\n    return (\n        <select defaultValue={current_value} onChange={(event) => onChange(event.target.value)}>\n            <option value=\"0\">default</option>\n            <option value=\"1\">bottom</option>\n            <option value=\"2\">middle</option>\n            <option value=\"3\">top</option>\n        </select>\n    );\n};\n\n/*\nconst LED = ({ config, onChange }) => {\n    if ((config === undefined) || (config === null)) return <div> </div>;\n    return (\n        <div>\n            <input name=\"\" type=\"checkbox\" checked={config.midi_ctrl} onChange={(event) => onChange(event.target.value)} />\n            <LEDColor current_value={config.active_color} />\n            <LEDColor current_value={config.inactive_color} />\n            <LEDNum current_value={config.num} />\n        </div>\n    );\n};\n*/\n\nconst MidiNote = ({ note, onChange }) => {\n    console.log(`MidiNote ${note}`, typeof note);\n    return (\n        <select onChange={(event) => onChange(event.target.value)} defaultValue={note}>\n            {\n                Array.from(Array(127).keys()).map(\n                    i => {\n                        let n = Note.fromMidi(i, true);\n                        return <option key={i} value={i}>{n}</option>\n                    })\n            }\n        </select>\n    );\n};\n\nconst Step = ({ index, config, updateCallback }) => {\n\n    // updateCallback(dataType, dataIndex, value)\n    //\n    // \"steps\": {\n    //     \"1\": {\n    //         \"channel\": 0,\n    //         \"msg_type\": 69,\n    //         \"data\": [\n    //             0,\n    //             0,\n    //             0\n    //         ],\n    //         \"active\": 1,\n    //         \"led\": {\n    //             \"midi_ctrl\": 0,\n    //             \"active_color\": 127,\n    //             \"inactive_color\": 127,\n    //             \"num\": 0\n    //         }\n    //     },\n\n    let inactive = config.msg_type === MSG_CTRL_OFF;\n\n    if (inactive) {\n        return (\n            <Fragment>\n                <div className=\"step-row-header\">Step {index}:</div>\n                <div>\n                    <select onChange={(event) => updateCallback(\"msg_type\", null, event.target.value)} defaultValue={config.msg_type}>\n                        {\n                            Object.keys(MSG_TYPES_FULLNAME_SW).map(\n                                key => {\n                                    // let n = Note.fromMidi(i, true);\n                                    return <option key={key} value={key}>{MSG_TYPES_FULLNAME_SW[key]}</option>\n                                })\n                        }\n                    </select>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n            </Fragment>\n        );\n    }\n\n    let d0, d1, d2;\n    if ((config.msg_type === MSG_SW_NOTE) || (config.msg_type === MSG_SW_NOTE_TGGLE)) {\n        // d0 = `note ${Note.fromMidi(config.data[0], true)}`;\n        d0 = <MidiNote note={config.data[0]} onChange={(value) => updateCallback(\"data\", 0, value)} />;\n        d1 = <input type=\"text\" value={config.data[1]} onChange={(event) => updateCallback(\"data\", 1, event.target.value)} />;\n        d2 = '';\n    } else {\n        d0 = <input type=\"text\" value={config.data[0]} onChange={(event) => updateCallback(\"data\", 0, event.target.value)} />;\n        d1 = <input type=\"text\" value={config.data[1]} onChange={(event) => updateCallback(\"data\", 1, event.target.value)} />;\n        d2 = <input type=\"text\" value={config.data[2]} onChange={(event) => updateCallback(\"data\", 2, event.target.value)} />;\n    }\n\n    return (\n        <Fragment>\n            <div className=\"step-row-header\">Step {index}:</div>\n            <div>\n                <select onChange={(event) => updateCallback(\"msg_type\", null, event.target.value)} defaultValue={config.msg_type}>\n                {\n                    MSG_TYPES_FULLNAME_SW_SORTED.map(\n                        v => {\n                            return <option key={v.key} value={v.key}>{v.value}</option>\n                        })\n                }\n                </select>\n            </div>\n            <div>{d0}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][0]}</div></div>\n            <div>{d1}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][1]}</div></div>\n            <div>{d2}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][2]}</div></div>\n            <div>\n                <LEDColor current_value={config.led_active_color} onChange={(value) => updateCallback(\"led_active_color\", null, value)} />\n            </div>\n            <div>\n                <LEDColor current_value={config.led_inactive_color} onChange={(value) => updateCallback(\"led_inactive_color\", null, value)} />\n            </div>\n            <div>\n                <LEDNum current_value={config.led_num} onChange={(value) => updateCallback(\"led_num\", null, value)} />\n            </div>\n            <div>\n{/*\n                <input type=\"checkbox\" checked={config.led_midi_ctrl} onChange={(event) => {\n                        console.log(\"led_midi_ctrl\", event.target.value);\n                        updateCallback(\"led_midi_ctrl\", null, event.target.value === 'on' ? 1 : 0)\n                    }\n                } />\n*/}\n                <LEDMidi current_value={config.led_midi_ctrl} onChange={(value) => updateCallback(\"led_midi_ctrl\", null, value)} />\n            </div>\n            <div>\n                <select onChange={(event) => updateCallback(\"channel\", null, event.target.value)} defaultValue={config.channel}>\n                    {\n                        Array.from(Array(16).keys()).map(i => <option key={i} value={i}>{i}</option>)\n                    }\n                </select>\n            </div>\n        </Fragment>\n    );\n};\n\nclass ControlStepsEditor extends Component {\n\n    onStepUpdate = (stepIndex, dataType, dataIndex, value) => {\n        console.log(`ControlStepsEditor.onStepUpdate`, stepIndex, dataType, dataIndex, value);\n        this.props.onUpdate(stepIndex, dataType, dataIndex, value);    // stepIndex, dataIndex, value\n    };\n\n    render() {\n\n        const steps = this.props.steps;\n\n        console.log(\"ControlStepsEditor.render\", steps);\n\n        return (\n            <div className=\"steps\">\n                <div></div>\n                <div className=\"step-col-header\">Type</div>\n                <div className=\"step-col-header\">Data 1</div>\n                <div className=\"step-col-header\">Data 2</div>\n                <div className=\"step-col-header\">Data 3</div>\n                <div className=\"step-col-header\">LED On</div>\n                <div className=\"step-col-header\">LED Off</div>\n                <div className=\"step-col-header\">LED Num</div>\n                <div className=\"step-col-header\">LED MIDI</div>\n                <div className=\"step-col-header\">MIDI Ch.</div>\n                {Object.keys(steps).map(i =>\n                    <Step key={i} index={i} config={steps[i]} updateCallback={(dataType, dataIndex, value) => this.onStepUpdate(i, dataType, dataIndex, value)} />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default ControlStepsEditor;\n","import React, {Component} from \"react\";\nimport {CONTROL_MODES} from \"../pacer\";\nimport\"./ControlModeEditor.css\";\n\nclass ControlModeEditor extends Component {\n\n    render() {\n        return (\n            <div className=\"control-mode\">\n                <span className=\"step-row-header\">Control mode:</span>\n                <select onChange={(event) => this.props.onUpdate(event.target.value)} defaultValue={this.props.mode}>\n                    {\n                        Object.keys(CONTROL_MODES).map(\n                            key => {\n                                return <option key={key} value={key}>{CONTROL_MODES[key]}</option>\n                            })\n                    }\n                </select>\n            </div>\n        );\n    }\n\n}\n\nexport default ControlModeEditor;\n","import React from \"react\";\nimport \"./Status.css\";\n\nconst Status = ({ messages }) =>\n    <div className=\"status\">\n        {\n            messages.map(\n                (msg, i) => <div key={i} className={`status-${msg.type}`}>{msg.message}</div>\n            )\n        }\n    </div>;\n\n\nexport default Status;\n","import React, {Component, Fragment} from 'react';\nimport PresetSelector from \"../components/PresetSelector\";\nimport {\n    getControlUpdateSysexMessages,\n    isSysexData,\n    mergeDeep,\n    parseSysexDump\n} from \"../utils/sysex\";\nimport ControlSelector from \"../components/ControlSelector\";\nimport {MSG_CTRL_OFF, PACER_MIDI_PORT_NAME, requestPresetObj, SYSEX_SIGNATURE, TARGET_PRESET} from \"../pacer\";\nimport {hs} from \"../utils/hexstring\";\nimport {produce} from \"immer\";\nimport {inputName, outputById, outputName} from \"../utils/ports\";\nimport ControlStepsEditor from \"../components/ControlStepsEditor\";\nimport Midi from \"../components/Midi\";\nimport MidiPort from \"../components/MidiPort\";\nimport Dropzone from \"react-dropzone\";\nimport \"./Preset.css\";\nimport ControlModeEditor from \"../components/ControlModeEditor\";\nimport Status from \"../components/Status\";\n\nconst MAX_FILE_SIZE = 5 * 1024*1024;\n\nconst MAX_STATUS_MESSAGES = 40;\n\nclass Preset extends Component {\n\n    state = {\n        output: null,       // MIDI output port used for output\n        presetIndex: \"\",    // preset name, like \"B2\"\n        controlId: \"\",      //\n        changed: false,     // true when the control has been edited\n        data: null,\n        statusMessages: []\n    };\n\n    addStatusMessage = (type, message) => {\n        this.setState(\n            produce(draft => {\n                let m = { type, message };\n                // let len = draft.statusMessages.unshift(m);\n                // if (len > MAX_STATUS_MESSAGES) draft.statusMessages.pop();\n                let len = draft.statusMessages.push(m);\n                if (len > MAX_STATUS_MESSAGES) draft.statusMessages.shift();\n            })\n        );\n    };\n\n    addInfoMessage= message => {\n        this.addStatusMessage(\"info\", message);\n    };\n\n    addWarningMessage= message => {\n        this.addStatusMessage(\"warning\", message);\n    };\n\n    addErrorMessage= message => {\n        this.addStatusMessage(\"error\", message);\n    };\n\n    /**\n     *\n     * @param files\n     * @returns {Promise<void>}\n     */\n    async readFiles(files) {\n        await Promise.all(files.map(\n            async file => {\n                if (file.size > MAX_FILE_SIZE) {\n                    console.warn(`readFiles: ${file.name}: file too big, ${file.size}`);\n                    this.addWarningMessage(\"file too big\");\n                } else {\n                    const data = new Uint8Array(await new Response(file).arrayBuffer());\n                    if (isSysexData(data)) {\n                        this.setState(\n                            produce(draft => {\n                                // draft.data = mergeDeep(draft.data || {}, parseSysexDump(data));\n                                draft.data = parseSysexDump(data);\n                                // this.props.onBusy(false);\n                                let pId = Object.keys(draft.data[TARGET_PRESET])[0];\n                                let cId = Object.keys(draft.data[TARGET_PRESET][pId][\"controls\"])[0];\n                                draft.presetIndex = parseInt(pId, 10);\n                                draft.controlId = parseInt(cId, 10);\n                            })\n                        );\n                        this.addInfoMessage(\"sysfile decoded\");\n                    } else {\n                        this.addWarningMessage(\"not a sysfile\");\n                        console.log(\"readFiles: not a sysfile\", hs(data.slice(0, 5)));\n                    }\n                    // non sysex files are ignored\n                }\n                // too big files are ignored\n            }\n        ));\n    }\n\n    /**\n     * Drop Zone handler\n     * @param files\n     */\n    onDrop = (files) => {\n        console.log('drop', files);\n        // this.props.onBusy(true);\n        this.setState({data: null}, () => {this.readFiles(files)});\n        // this.readFiles(files);  // returned promise is ignored, this is normal.\n    };\n\n    selectPreset = (id) => {\n        console.log(`selectPreset ${id}`);\n        this.setState({\n            presetIndex: id\n        });\n        if (id && this.state.controlId) {\n            this.sendSysex(requestPresetObj(id, this.state.controlId));\n        }\n    };\n\n    selectControl = (id) => {\n        console.log(`selectControl ${id}`);\n        this.setState({\n            controlId: id\n        });\n        if ((this.state.presetIndex !== undefined) && (this.state.presetIndex !== null) && id) {\n            this.sendSysex(requestPresetObj(this.state.presetIndex, id));\n        }\n    };\n\n    /**\n     * dataIndex is only used when dataType == \"data\"\n     */\n    updateControlStep = (controlId, stepIndex, dataType, dataIndex, value) => {\n        console.log(\"Presets.updateControlStep\", controlId, stepIndex, dataIndex, value);\n        let v = parseInt(value, 10);\n        this.setState(\n            produce(draft => {\n                if (dataType === \"data\") {\n                    draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"steps\"][stepIndex][\"data\"][dataIndex] = v;\n                } else {\n                    draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"steps\"][stepIndex][dataType] = v;\n                }\n                if (dataType === \"msg_type\") {\n                    console.log('msg_type', dataType, value);\n                    if (v === MSG_CTRL_OFF) {\n                        console.log('set active 0');\n                        draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"steps\"][stepIndex][\"active\"] = 0;\n                    } else {\n                        console.log('set active 1');\n                        draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"steps\"][stepIndex][\"active\"] = 1;\n                    }\n                }\n                draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"steps\"][stepIndex][\"changed\"] = true;\n                draft.changed = true;\n            })\n        );\n    };\n\n    /**\n     * dataIndex is only used when dataType == \"data\"\n     */\n    updateControlMode = (controlId, value) => {\n        console.log(\"Presets.updateControlMode\", controlId, value);\n        let v = parseInt(value, 10);\n        this.setState(\n            produce(draft => {\n                draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"control_mode\"] = v;\n                draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"changed\"] = true;\n                draft.changed = true;\n            })\n        );\n    };\n\n    /**\n     *\n     */\n    handleMidiInputEvent = (event) => {\n        console.log(\"Presets.handleMidiInputEvent\", event, event.data);\n        // if (event instanceof MIDIMessageEvent) {\n        if (isSysexData(event.data)) {\n            this.setState(\n                produce(draft => {\n                    draft.data = mergeDeep(draft.data || {}, parseSysexDump(event.data));\n                    // this.props.onBusy(false);\n                })\n            );\n            this.addInfoMessage(`sysex received (${event.data.length} bytes)`);\n        } else {\n            console.log(\"MIDI message is not a sysex message\")\n        }\n        // }\n    };\n\n    renderPort = (port, selected, clickHandler) => {\n        if (port === undefined || port === null) return null;\n        return (\n            <MidiPort key={port.id} port={port} selected={selected} clickHandler={clickHandler} />\n        )\n    };\n\n    onInputConnection = (port_id) => {\n        this.addInfoMessage(`input ${inputName(port_id)} connected`);\n    };\n\n    onInputDisconnection = (port_id) => {\n        this.addInfoMessage(`input ${inputName(port_id)} disconnected`);\n    };\n\n    onOutputConnection = (port_id) => {\n        this.setState(\n            produce(draft => {\n                draft.output = port_id;\n            })\n        );\n        this.addInfoMessage(`output ${outputName(port_id)} connected`);\n    };\n\n    onOutputDisconnection = (port_id) => {\n        this.addInfoMessage(`output ${outputName(port_id)} disconnected`);\n    };\n\n    sendSysex = msg => {\n        console.log(\"sendSysex\", msg);\n        if (!this.state.output) return;\n        let out = outputById(this.state.output);\n        if (!out) {\n            console.warn(`send: output ${this.state.output} not found`);\n            return;\n        }\n         this.setState(\n            {data: null},\n            () => out.sendSysex(SYSEX_SIGNATURE, msg)\n        );\n    };\n\n    updatePacer = (messages) => {\n        for (let m of messages) {\n            this.sendSysex(m);\n        }\n        this.addInfoMessage(`update${messages.length > 1 ? 's' : ''} sent to Pacer`);\n    };\n\n    render() {\n\n        const { presetIndex, controlId, data, changed } = this.state;\n\n        let showEditor = false;\n\n        if (data) {\n\n            showEditor = true;\n\n            if (!(TARGET_PRESET in data)) {\n                console.log(`Presets: invalid data`, data);\n                showEditor = false;\n            }\n\n            if (showEditor && !(presetIndex in data[TARGET_PRESET])) {\n                console.log(`Presets: preset ${presetIndex} not found in data`);\n                showEditor = false;\n            }\n\n            if (showEditor && !(\"controls\" in data[TARGET_PRESET][presetIndex])) {\n                console.log(`Presets: controls not found in data`);\n                showEditor = false;\n            }\n\n            if (showEditor && !(controlId in data[TARGET_PRESET][presetIndex][\"controls\"])) {\n                console.log(`Presets: control ${controlId} not found in data`);\n                showEditor = false;\n            }\n\n            if (showEditor && !(\"steps\" in data[TARGET_PRESET][presetIndex][\"controls\"][controlId])) {\n                console.log(`Presets: steps not found in data`);\n                showEditor = false;\n            }\n        }\n\n        showEditor = showEditor && (Object.keys(data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"steps\"]).length === 6);\n\n        let updateMessages = [];\n        if (showEditor) {\n            updateMessages = getControlUpdateSysexMessages(presetIndex, controlId, data);\n        }\n\n        console.log(\"Presets.render\", showEditor, presetIndex, controlId);\n\n        return (\n            <div className=\"wrapper\">\n                <div className=\"content\">\n\n                    <div className=\"content-row step-1\">\n{/*\n                        <div className=\"background\">\n                            Connect\n                        </div>\n                        <div className=\"content-row-header\">\n                            1\n                        </div>\n*/}\n                        <div className=\"content-row-content row-middle-aligned\">\n                            <Midi only={PACER_MIDI_PORT_NAME} autoConnect={PACER_MIDI_PORT_NAME}\n                                  inputRenderer={this.renderPort} outputRenderer={this.renderPort}\n                                  onMidiInputEvent={this.handleMidiInputEvent}\n                                  onInputConnection={this.onInputConnection}\n                                  onInputDisconnection={this.onInputDisconnection}\n                                  onOutputConnection={this.onOutputConnection}\n                                  onOutputDisconnection={this.onOutputDisconnection}\n                                  className=\"sub-header\" >\n                                <div className=\"no-midi\">Please connect your Pacer to your computer.</div>\n                            </Midi>\n                        </div>\n                    </div>\n                    <div className=\"content-row step-2\">\n{/*\n                        <div className=\"background\">\n                            Select\n                        </div>\n                        <div className=\"content-row-header\">\n                            2\n                        </div>\n*/}\n                        <div className=\"content-row-content\">\n\n                            <h2>Choose the preset and the control to edit:</h2>\n\n                            <div className=\"selectors\">\n\n                                <PresetSelector currentPreset={presetIndex} onClick={this.selectPreset} />\n\n                                {presetIndex && <ControlSelector currentControl={controlId} onClick={this.selectControl} />}\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"content-row step-3\">\n{/*\n                        <div className=\"background\">\n                            Edit\n                        </div>\n                        <div className=\"content-row-header\">\n                            3\n                        </div>\n*/}\n                        <div className=\"content-row-content\">\n                            {showEditor &&\n                            <Fragment>\n                                <h2>Edit the selected control:</h2>\n                                <ControlStepsEditor controlId={controlId}\n                                                    steps={data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"steps\"]}\n                                                    onUpdate={(stepIndex, dataType, dataIndex, value) => this.updateControlStep(controlId, stepIndex, dataType, dataIndex, value)} />\n                                <ControlModeEditor controlId={controlId}\n                                                   mode={data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"control_mode\"]}\n                                                   onUpdate={(value) => this.updateControlMode(controlId, value)} />\n                            </Fragment>\n                            }\n                        </div>\n                    </div>\n\n                    <div className=\"content-row step-4\">\n{/*\n                        <div className=\"background\">\n                            Write\n                        </div>\n                        <div className=\"content-row-header\">\n                            4\n                        </div>\n*/}\n                        <div className=\"content-row-content\">\n                            {changed &&\n                            <Fragment>\n                                <h2>Send the updated config to the Pacer:</h2>\n                                <div className=\"actions\">\n                                    <button className=\"update\" onClick={() => this.updatePacer(updateMessages)}>Update Pacer</button>\n                                </div>\n                            </Fragment>\n                            }\n                        </div>\n                    </div>\n\n                    <div>\n                        {showEditor && <div className=\"debug\">\n                            <h4>[Debug] update message to send to Pacer:</h4>\n                            <div className=\"message-to-send\">\n                                {updateMessages.map((m, i) => <div key={i} className=\"code\">{hs(m)}</div>)}\n                            </div>\n                        </div>}\n\n{/*\n                        {data && <div className=\"debug\">\n                            <h4>[Debug] sysex data:</h4>\n                            <pre>{JSON.stringify(data, null, 4)}</pre>\n                        </div>}\n*/}\n\n                    </div>\n                </div>\n\n                <div className=\"help\">\n\n                    <Dropzone onDrop={this.onDrop} className=\"drop-zone\">\n                        Drop a binary sysex file here<br />or click to open the file dialog\n                    </Dropzone>\n\n                    <h3>Log:</h3>\n                    <Status messages={this.state.statusMessages} />\n\n                </div>\n\n            </div>\n        );\n    }\n\n}\n\nexport default Preset;\n","export const MESSAGE = {\n    0x80: \"Note Off\",\n    0x90: \"Note On\",\n    0xA0: \"AfterTouch\",\n    0xB0: \"Control Change\",\n    0xC0: \"Program Change\",\n    0xD0: \"Channel Pressure\",\n    0xE0: \"Pitch Wheel\"\n};\n\nexport const CONTROLER = {\n    0: \"Bank Select (coarse)\",\n    1: \"Modulation Wheel (coarse)\",\n    2: \"Breath controller (coarse)\",\n    4: \"Foot Pedal (coarse)\",\n    5: \"Portamento Time (coarse)\",\n    6: \"Data Entry (coarse)\",\n    7: \"Volume (coarse)\",\n    8: \"Balance (coarse)\",\n    10: \"Pan position (coarse)\",\n    11: \"Expression (coarse)\",\n    12: \"Effect Control 1 (coarse)\",\n    13: \"Effect Control 2 (coarse)\",\n    16: \"General Purpose Slider 1\",\n    17: \"General Purpose Slider 2\",\n    18: \"General Purpose Slider 3\",\n    19: \"General Purpose Slider 4\",\n    32: \"Bank Select (fine)\",\n    33: \"Modulation Wheel (fine)\",\n    34: \"Breath controller (fine)\",\n    36: \"Foot Pedal (fine)\",\n    37: \"Portamento Time (fine)\",\n    38: \"Data Entry (fine)\",\n    39: \"Volume (fine)\",\n    40: \"Balance (fine)\",\n    42: \"Pan position (fine)\",\n    43: \"Expression (fine)\",\n    44: \"Effect Control 1 (fine)\",\n    45: \"Effect Control 2 (fine)\",\n    64: \"Hold Pedal (on/off)\",\n    65: \"Portamento (on/off)\",\n    66: \"Sustenuto Pedal (on/off)\",\n    67: \"Soft Pedal (on/off)\",\n    68: \"Legato Pedal (on/off)\",\n    69: \"Hold 2 Pedal (on/off)\",\n    70: \"Sound Variation\",\n    71: \"Sound Timbre\",\n    72: \"Sound Release Time\",\n    73: \"Sound Attack Time\",\n    74: \"Sound Brightness\",\n    75: \"Sound Control 6\",\n    76: \"Sound Control 7\",\n    77: \"Sound Control 8\",\n    78: \"Sound Control 9\",\n    79: \"Sound Control 10\",\n    80: \"General Purpose Button 1 (on/off)\",\n    81: \"General Purpose Button 2 (on/off)\",\n    82: \"General Purpose Button 3 (on/off)\",\n    83: \"General Purpose Button 4 (on/off)\",\n    91: \"Effects Level\",\n    92: \"Tremulo Level\",\n    93: \"Chorus Level\",\n    94: \"Celeste Level\",\n    95: \"Phaser Level\",\n    96: \"Data Button increment\",\n    97: \"Data Button decrement\",\n    98: \"Non-registered Parameter (fine)\",\n    99: \"Non-registered Parameter (coarse)\",\n    100: \"Registered Parameter (fine)\",\n    101: \"Registered Parameter (coarse)\",\n    120: \"All Sound Off\",\n    121: \"All Controllers Off\",\n    122: \"Local Keyboard (on/off)\",\n    123: \"All Notes Off\",\n    124: \"Omni Mode Off\",\n    125: \"Omni Mode On\",\n    126: \"Mono Operation\",\n    127: \"Poly Operation\"\n};\n","import React, {Component} from 'react';\nimport Midi from \"../components/Midi\";\nimport {produce} from \"immer\";\nimport MidiPort from \"../components/MidiPort\";\nimport parseMidi from 'parse-midi';\nimport {hs} from \"../utils/hexstring\";\nimport {CONTROLER, MESSAGE} from \"../utils/midi\";\nimport * as Note from \"tonal-note\";\nimport \"./Monitor.css\";\n\nconst MAX_MESSAGES = 40;\n\nclass Monitor extends Component {\n\n    state = {\n        messages: []\n    };\n\n    handleMidiInputEvent = (event) => {\n        // console.log(\"Monitor.handleMidiInputEvent\", event, event.type, event.data);\n        // if (event instanceof MIDIMessageEvent) {\n        this.setState(\n            produce(draft => {\n                let len = draft.messages.unshift(event.data);\n                if (len > MAX_MESSAGES) draft.messages.pop();\n            })\n        )\n        // }\n    };\n\n    renderPort = (port, selected, clickHandler) => {\n        if (port === undefined || port === null) return null;\n        return (\n            <MidiPort key={port.id} port={port} selected={selected} clickHandler={clickHandler} />\n        )\n    };\n\n    render() {\n\n        return (\n\n            <div className=\"wrapper\">\n                <div className=\"content\">\n                    <div>\n                        <div className=\"content-row step-1\">\n{/*\n                            <div className=\"background\">\n                                Connect\n                            </div>\n                            <div className=\"content-row-header\">\n                                1\n                            </div>\n*/}\n                            <div className=\"content-row-content row-middle-aligned\">\n                                <Midi only=\".*\" autoConnect=\".*\"\n                                      inputRenderer={this.renderPort} outputRenderer={this.renderPort}\n                                      onMidiInputEvent={this.handleMidiInputEvent}\n                                      className=\"sub-header\" >\n                                    <div className=\"no-midi\">Please connect your Pacer or any other MIDI device to your computer.</div>\n                                </Midi>\n                            </div>\n                        </div>\n                        <div className=\"content-row step-2\">\n{/*\n                            <div className=\"background\">\n                                View\n                            </div>\n                            <div className=\"content-row-header\">\n                                2\n                            </div>\n*/}\n                            <div className=\"content-row-content\">\n                                <div>\n                                    <h2>MIDI messages</h2>\n                                    <p>The messages are displayed in reverse chronological order (the most recent on top). Only the last 20 messages are displayed.</p>\n                                </div>\n                                <div className=\"messages\">\n                                    {this.state.messages.map((msg, i) => {\n                                        let m = parseMidi(msg);\n                                        // console.log(m, h(m.messageCode));\n                                        let info2 = '';\n                                        let info3 = '';\n                                        switch (m.messageCode) {\n                                            case 0x80:      // {messageCode: 144, channel: 1, messageType: \"noteon\", key: 70, velocity: 21}\n                                            case 0x90:\n                                                info2 = Note.fromMidi(m.key);\n                                                info3 = `velocity: ${m.velocity}`;\n                                                break;\n                                            case 0xA0:  // \"AfterTouch\",\n                                                break;\n                                            case 0xB0:\n                                                info2 = CONTROLER[m.controlNumber];\n                                                info3 = m.controlValue;\n                                                break;\n                                            case 0xC0:          // {messageCode: 192, channel: 4, messageType: \"programchange\", program: 102} \"C0\"\n                                                info2 = `program: ${m.program}`;\n                                                info3 = '';\n                                                break;\n                                            case 0xD0:  // \"Channel Pressure\\\",\\n\"\n                                                break;\n                                            case 0xE0:          // {messageCode: 224, channel: 1, messageType: \"pitchbendchange\", pitchBend: 8283, pitchBendMultiplier: 0.011109754608716884}\n                                                info2 = `bend: ${m.pitchBend}`;\n                                                info3 = `multiplier: ${m.pitchBendMultiplier}`;\n                                                break;\n                                            default:\n                                                break;\n                                        }\n                                        return (\n                                            <div>\n                                                <span className=\"code\">[{hs(msg)}]</span>\n                                                <span className=\"msg-channel\">Channel {m.channel}</span>\n                                                <span className=\"msg-name\">{MESSAGE[m.messageCode]}</span>\n                                                <span className=\"msg-data\">{info2}</span>\n                                                <span className=\"msg-data\">{info3}</span>\n                                            </div>\n                                        );\n                                    })}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n{/*\n\n                <div className=\"help\">\n                    <h3>Help</h3>\n                </div>\n*/}\n            </div>\n        );\n    }\n\n}\n\nexport default Monitor;\n","import React from 'react';\nimport \"./Footer.css\";\n\nconst Footer = () => {\n    return (\n        <div className=\"footer\">\n            <div className=\"gh\">\n                <a href=\"https://github.com/francoisgeorgy/pacer-editor\" target=\"_blank\" rel=\"noopener noreferrer\">Source code available on GitHub</a>\n                <a aria-label=\"Homepage\" title=\"project on github\" href=\"https://github.com/francoisgeorgy/pacer-editor\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    <svg height=\"24\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"24\" aria-hidden=\"true\">\n                        <path fillRule=\"evenodd\" d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z\"></path>\n                    </svg>\n                </a>\n            </div>\n            <div>\n                <p>“Nektar Technology”, the logo and all other Nektar Technology product, technology or service names and\n                    logos are trademarks or registered trademarks of Nektar Technology, Inc.</p>\n                <p>This web site is not endorsed by, directly affiliated with, maintained, or sponsored by Nektar Technology.\n                    This web site is published under <a href=\"https://www.gnu.org/licenses/gpl-3.0.en.html\" target=\"_blank\" rel=\"noopener noreferrer\">GNU General Public License v3</a>\n                </p>\n            </div>\n        </div>\n    );\n};\n\nexport default Footer;\n","import React, {Component} from 'react';\n\nclass Global extends Component {\n\n    render() {\n\n        return (\n            <div className=\"wrapper\">\n                <div className=\"content\">\n                    <div className=\"content-row step-1\">\n{/*\n                        <div className=\"background\">\n                            Connect\n                        </div>\n                        <div className=\"content-row-header\">\n                            1\n                        </div>\n*/}\n                        <div className=\"content-row-content\">\n                        </div>\n                    </div>\n                    <div className=\"content-row step-2\">\n{/*\n                        <div className=\"background\">\n                            Select\n                        </div>\n                        <div className=\"content-row-header\">\n                            2\n                        </div>\n*/}\n                        <div className=\"content-row-content row-middle-aligned\">\n                            <div className=\"sorry\">Sorry, this feature is not implemented yet.</div>\n                        </div>\n                    </div>\n                    <div className=\"content-row step-3\">\n{/*\n                        <div className=\"background\">\n                            Edit\n                        </div>\n                        <div className=\"content-row-header\">\n                            3\n                        </div>\n*/}\n                        <div className=\"content-row-content\">\n                        </div>\n                    </div>\n                    <div className=\"content-row step-4\">\n{/*\n                        <div className=\"background\">\n                            Write\n                        </div>\n                        <div className=\"content-row-header\">\n                            4\n                        </div>\n*/}\n                        <div className=\"content-row-content\">\n                        </div>\n                    </div>\n                </div>\n                <div className=\"help\">\n                    <h3>Help</h3>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default Global;\n","import React, {Component} from 'react';\nimport Dropzone from \"react-dropzone\";\nimport {produce} from \"immer\";\nimport {isSysexData, mergeDeep, parseSysexDump} from \"../utils/sysex\";\nimport DumpSysex from \"../components/DumpSysex\";\nimport './DumpDecoder.css';\nimport {hs} from \"../utils/hexstring\";\nimport Midi from \"../components/Midi\";\nimport MidiPort from \"../components/MidiPort\";\nimport {PACER_MIDI_PORT_NAME} from \"../pacer\";\n\nconst MAX_FILE_SIZE = 5 * 1024*1024;\n\nclass DumpDecoder extends Component {\n\n    state = {\n        data: null\n    };\n\n    /**\n     *\n     * @param files\n     * @returns {Promise<void>}\n     */\n    async readFiles(files) {\n        await Promise.all(files.map(\n            async file => {\n                if (file.size > MAX_FILE_SIZE) {\n                    console.warn(`${file.name}: file too big, ${file.size}`);\n                } else {\n                    const data = new Uint8Array(await new Response(file).arrayBuffer());\n                    if (isSysexData(data)) {\n                        this.setState(\n                            produce(draft => {\n                                draft.data = mergeDeep(draft.data || {}, parseSysexDump(data));\n                                this.props.onBusy(false);\n                            })\n                        )\n                    } else {\n                        console.log(\"readFiles: not a sysfile\", hs(data.slice(0, 5)));\n                    }\n                    // non sysex files are ignored\n                }\n                // too big files are ignored\n            }\n        ));\n    }\n\n    /**\n     * Drop Zone handler\n     * @param files\n     */\n    onDrop = (files) => {\n        console.log('drop', files);\n        this.props.onBusy(true);\n        this.setState({data: null}, () => {this.readFiles(files)});\n        // this.readFiles(files);  // returned promise is ignored, this is normal.\n    };\n\n    handleMidiInputEvent = (event) => {\n        console.log(\"DumpDecoder.handleMidiInputEvent\", event, event.data);\n        // if (event instanceof MIDIMessageEvent) {\n        if (isSysexData(event.data)) {\n            console.log(\"DumpDecoder.handleMidiInputEvent: data is SysEx\");\n            this.setState(\n                produce(draft => {\n                    draft.data = mergeDeep(draft.data || {}, parseSysexDump(event.data));\n                    // this.props.onBusy(false);\n                })\n            )\n        } else {\n            console.log(\"MIDI message is not a sysex message\")\n        }\n        // }\n    };\n\n    renderPort = (port, selected, clickHandler) => {\n        if (port === undefined || port === null) return null;\n        return (\n            <MidiPort key={port.id} port={port} selected={selected} clickHandler={clickHandler} />\n        )\n    };\n\n\n    /**\n     * @returns {*}\n     */\n    render() {\n\n        const { data } = this.state;\n\n        console.log(\"DumpDecoder.render\", this.props);\n\n        return (\n            <div className=\"wrapper\">\n                <div className=\"content\">\n                    <div className=\"content-row step-1\">\n{/*\n                        <div className=\"background\">\n                            Connect\n                        </div>\n                        <div className=\"content-row-header\">\n                            1\n                        </div>\n*/}\n                        <div className=\"content-row-content row-middle-aligned\">\n                            <Midi only={PACER_MIDI_PORT_NAME} autoConnect={PACER_MIDI_PORT_NAME}\n                                  inputRenderer={this.renderPort} outputRenderer={this.renderPort}\n                                  onMidiInputEvent={this.handleMidiInputEvent}\n                                  className=\"sub-header\" >\n                                <div className=\"no-midi\">Please connect your Pacer to your computer.</div>\n                            </Midi>\n                        </div>\n                    </div>\n                    <div className=\"content-row step-2\">\n{/*\n                        <div className=\"background\">\n                            Get dump\n                        </div>\n                        <div className=\"content-row-header\">\n                            2\n                        </div>\n*/}\n\n\n                        <div className=\"content-row-content\">\n                            <h2>Dump:</h2>\n                            {/*<Dropzone onDrop={this.onDrop} className=\"drop-zone\">*/}\n                                {/*Drop a binary sysex file here or click to open the file dialog*/}\n                            {/*</Dropzone>*/}\n                            Send a dump from your Pacer or drop a binary sysex file onto the drop zone on the right.\n                        </div>\n                    </div>\n                    <div className=\"content-row step-3\">\n{/*\n                        <div className=\"background\">\n                            Decode\n                        </div>\n                        <div className=\"content-row-header\">\n                            3\n                        </div>\n*/}\n                        <div className=\"content-row-content\">\n                            <DumpSysex data={data} />\n\n{/*\n                            <div className=\"debug\">\n                                <pre>{JSON.stringify(data, null, 4)}</pre>\n                            </div>\n*/}\n\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"help\">\n                    <Dropzone onDrop={this.onDrop} className=\"drop-zone\">\n                        Drop a binary sysex file here<br />or click to open the file dialog\n                    </Dropzone>\n\n                    {/*<h3>Help</h3>*/}\n                </div>\n\n            </div>\n\n        );\n    }\n}\n\nexport default DumpDecoder;\n","import React from \"react\";\nimport \"./ChordsSelector.css\";\nimport * as Scale from \"tonal-scale\";\n\n\nconst Chord = ({ scale }) =>\n    <div className=\"chord\">\n        <select >\n            {\n                Scale.chords(scale).map(\n                    (chord, index) => <option value={chord}>{chord}</option>\n                )\n            }\n        </select>\n    </div>;\n\n\nconst ChordsSelector = ({ scale }) =>\n    <div className=\"chords\">\n        {\n            Array.from(Array(6).keys()).map(\n                digit => {\n                    let name = (digit + 1);\n                    // let id = presetXYToIndex(name);\n                    return <Chord name={name} key={digit} />\n                })\n        }\n    </div>;\n\n\nexport default ChordsSelector;\n","import React, {Component} from 'react';\nimport PresetSelector from \"../components/PresetSelector\";\nimport ChordsSelector from \"../components/ChordsSelector\";\nimport \"./Chords.css\";\nimport * as Scale from \"tonal-scale\"\n\n\nclass Chords extends Component {\n\n    state = {\n        output: null,       // MIDI output port used for output\n        presetIndex: \"\",    // preset name, like \"B2\"\n        // controlId: \"\",      //\n        // changed: false,     // true when the control has been edited\n        // data: null,\n        // statusMessages: []\n        scale: null\n    };\n\n    setScale = (event) => {\n        this.setState({scale: event.target.value});\n    };\n\n    render() {\n\n        // console.log(Scale.chords(\"major\"));\n\n        const { presetIndex, scale } = this.state;\n\n        return (\n            <div className=\"wrapper\">\n                <div className=\"content\">\n                    <div className=\"content-row step-1\">\n{/*\n                        <div className=\"background\">\n                            Connect\n                        </div>\n                        <div className=\"content-row-header\">\n                            1\n                        </div>\n*/}\n                        <div className=\"content-row-content row-middle-aligned\">\n                            <div className=\"sorry\">Sorry, this feature is not implemented yet.</div>\n                        </div>\n                    </div>\n                    <div className=\"content-row step-2\">\n{/*\n                        <div className=\"background\">\n                            Select\n                        </div>\n                        <div className=\"content-row-header\">\n                            2\n                        </div>\n*/}\n                        <div className=\"content-row-content\">\n                            <h2>Choose the preset:</h2>\n                            <div className=\"selectors\">\n                                <PresetSelector currentPreset={presetIndex} onClick={this.selectPreset} />\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"content-row step-3\">\n{/*\n                        <div className=\"background\">\n                            Edit\n                        </div>\n                        <div className=\"content-row-header\">\n                            3\n                        </div>\n*/}\n                        <div className=\"content-row-content\">\n                            <p>Choose six chords, with up to six notes per chords, and assign them to the stompswitches 1-6.</p>\n                            <p>Choose if you want the notes to be played in one shot (like a regular chord) or in sequence (like an arpeggio).</p>\n\n                            <div className=\"harmony\">\n                                <div>\n                                    Scale:\n                                    <select defaultValue={scale} onChange={this.setScale}>\n                                    {\n                                        Scale.names().map(\n                                            (scale, index) => <option key={scale} value={scale}>{scale}</option>\n                                        )\n                                    }\n                                    </select>\n                                </div>\n                                <div>\n                                    Tonic: <select></select>\n                                </div>\n                            </div>\n                            <ChordsSelector scale={scale}/>\n                        </div>\n                    </div>\n                    <div className=\"content-row step-4\">\n{/*\n                        <div className=\"background\">\n                            Write\n                        </div>\n                        <div className=\"content-row-header\">\n                            4\n                        </div>\n*/}\n                        <div className=\"content-row-content\">\n                        </div>\n                    </div>\n                </div>\n                <div className=\"help\">\n                    <h3>Help</h3>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default Chords;\n","import React, {Component, Fragment} from 'react';\nimport {\n    MSG_CTRL_OFF,\n    MSG_SW_NOTE,\n    MSG_TYPES_FULLNAME_SW,\n    MSG_TYPES_FULLNAME_MIDI_SORTED,\n    MSG_TYPES_DATA_HELP\n} from \"../pacer\";\nimport * as Note from \"tonal-note\";\nimport \"./MidiSettingsEditor.css\";\n\nconst MidiNote = ({ note, onChange }) => {\n    console.log(`MidiNote ${note}`, typeof note);\n    return (\n        <select onChange={(event) => onChange(event.target.value)} defaultValue={note}>\n            {\n                Array.from(Array(127).keys()).map(\n                    i => {\n                        let n = Note.fromMidi(i, true);\n                        return <option key={i} value={i}>{n}</option>\n                    })\n            }\n        </select>\n    );\n};\n\nconst Setting = ({ index, config, updateCallback }) => {\n\n    let inactive = config.msg_type === MSG_CTRL_OFF;\n\n    if (inactive) {\n        return (\n            <Fragment>\n                <div className=\"setting-row-header\">setting {index}:</div>\n                <div>\n                    <select onChange={(event) => updateCallback(\"msg_type\", null, event.target.value)} defaultValue={config.msg_type}>\n                        {\n                            Object.keys(MSG_TYPES_FULLNAME_SW).map(\n                                key => {\n                                    // let n = Note.fromMidi(i, true);\n                                    return <option key={key} value={key}>{MSG_TYPES_FULLNAME_SW[key]}</option>\n                                })\n                        }\n                    </select>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n            </Fragment>\n        );\n    }\n\n    let d0, d1, d2;\n    if (config.msg_type === MSG_SW_NOTE) {\n        // d0 = `note ${Note.fromMidi(config.data[0], true)}`;\n        d0 = <MidiNote note={config.data[0]} onChange={(value) => updateCallback(\"data\", 0, value)} />;\n        d1 = <input type=\"text\" value={config.data[1]} onChange={(event) => updateCallback(\"data\", 1, event.target.value)} />;\n        d2 = '';\n    } else {\n        d0 = <input type=\"text\" value={config.data[0]} onChange={(event) => updateCallback(\"data\", 0, event.target.value)} />;\n        d1 = <input type=\"text\" value={config.data[1]} onChange={(event) => updateCallback(\"data\", 1, event.target.value)} />;\n        d2 = <input type=\"text\" value={config.data[2]} onChange={(event) => updateCallback(\"data\", 2, event.target.value)} />;\n    }\n\n    return (\n        <Fragment>\n            <div className=\"setting-row-header\">Setting {index}:</div>\n            <div>\n                <select onChange={(event) => updateCallback(\"msg_type\", null, event.target.value)} defaultValue={config.msg_type}>\n                {\n                    MSG_TYPES_FULLNAME_MIDI_SORTED.map(\n                        v => {\n                            return <option key={v.key} value={v.key}>{v.value}</option>\n                        })\n                }\n                </select>\n            </div>\n            <div>{d0}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][0]}</div></div>\n            <div>{d1}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][1]}</div></div>\n            <div>{d2}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][2]}</div></div>\n            <div>\n                <select onChange={(event) => updateCallback(\"channel\", null, event.target.value)} defaultValue={config.channel}>\n                    {\n                        Array.from(Array(16).keys()).map(i => <option key={i} value={i}>{i}</option>)\n                    }\n                </select>\n            </div>\n        </Fragment>\n    );\n};\n\nclass MidiSettingsEditor extends Component {\n\n    onSettingUpdate = (settingIndex, dataType, dataIndex, value) => {\n        console.log(`MidiSettingsEditor.onSettingUpdate`, settingIndex, dataType, dataIndex, value);\n        this.props.onUpdate(settingIndex, dataType, dataIndex, value);\n    };\n\n    render() {\n\n        const settings = this.props.settings;\n\n        console.log(\"MidiSettingsEditor.render\", settings);\n\n        return (\n            <div className=\"settings\">\n                <div></div>\n                <div className=\"setting-col-header\">Type</div>\n                <div className=\"setting-col-header\">Data 1</div>\n                <div className=\"setting-col-header\">Data 2</div>\n                <div className=\"setting-col-header\">Data 3</div>\n                <div className=\"setting-col-header\">MIDI Ch.</div>\n                {Object.keys(settings).map(i =>\n                    <Setting key={i} index={i} config={settings[i]} updateCallback={(dataType, dataIndex, value) => this.onSettingUpdate(i, dataType, dataIndex, value)} />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default MidiSettingsEditor;\n","import React, {Component} from 'react';\n// import \"./PresetNameEditor.css\";\n\nclass PresetNameEditor extends Component {\n\n    onNameUpdate = (event) => {\n        console.log(`PresetNameEditor.onSettingUpdate`, event.target.value);\n        this.props.onUpdate(event.target.value.length > 5 ? event.target.value.substr(0, 5) : event.target.value);\n    };\n\n    render() {\n\n        const name = this.props.name;\n\n        console.log(\"PresetNameEditor.render\", name);\n\n        return (\n            <div className=\"preset-name\">\n                <p>The preset name is limited to 5 characters.</p>\n                <span className=\"strong\">Name:</span> <input value={name} onChange={this.onNameUpdate} size={5} />\n            </div>\n        );\n    }\n}\n\nexport default PresetNameEditor;\n","import React, {Component, Fragment} from 'react';\nimport PresetSelector from \"../components/PresetSelector\";\nimport {\n    buildPresetNameSysex,\n    getMidiSettingUpdateSysexMessages,\n    isSysexData,\n    mergeDeep,\n    parseSysexDump\n} from \"../utils/sysex\";\nimport Midi from \"../components/Midi\";\nimport MidiPort from \"../components/MidiPort\";\nimport Dropzone from \"react-dropzone\";\nimport \"./Preset.css\";\nimport Status from \"../components/Status\";\nimport {produce} from \"immer\";\nimport {MSG_CTRL_OFF, PACER_MIDI_PORT_NAME, SYSEX_SIGNATURE, TARGET_PRESET} from \"../pacer\";\nimport {hs} from \"../utils/hexstring\";\nimport MidiSettingsEditor from \"../components/MidiSettingsEditor\";\nimport {inputName, outputById, outputName} from \"../utils/ports\";\nimport PresetNameEditor from \"../components/PresetNameEditor\";\n\nconst MAX_FILE_SIZE = 5 * 1024*1024;\n\nconst MAX_STATUS_MESSAGES = 40;\n\nclass PresetMidi extends Component {\n\n    state = {\n        output: null,       // MIDI output port used for output\n        presetIndex: \"\",    // preset name, like \"B2\"\n        // controlId: \"\",      //\n        changed: false,     // true when the control has been edited\n        data: null,\n        statusMessages: []\n    };\n\n    addStatusMessage = (type, message) => {\n        this.setState(\n            produce(draft => {\n                let m = { type, message };\n                // let len = draft.statusMessages.unshift(m);\n                // if (len > MAX_STATUS_MESSAGES) draft.statusMessages.pop();\n                let len = draft.statusMessages.push(m);\n                if (len > MAX_STATUS_MESSAGES) draft.statusMessages.shift();\n            })\n        );\n    };\n\n    addInfoMessage= message => {\n        this.addStatusMessage(\"info\", message);\n    };\n\n    addWarningMessage= message => {\n        this.addStatusMessage(\"warning\", message);\n    };\n\n    addErrorMessage= message => {\n        this.addStatusMessage(\"error\", message);\n    };\n\n    /**\n     *\n     * @param files\n     * @returns {Promise<void>}\n     */\n    async readFiles(files) {\n        await Promise.all(files.map(\n            async file => {\n                if (file.size > MAX_FILE_SIZE) {\n                    console.warn(`readFiles: ${file.name}: file too big, ${file.size}`);\n                    this.addWarningMessage(\"file too big\");\n                } else {\n                    const data = new Uint8Array(await new Response(file).arrayBuffer());\n                    if (isSysexData(data)) {\n                        this.setState(\n                            produce(draft => {\n                                // draft.data = mergeDeep(draft.data || {}, parseSysexDump(data));\n                                draft.data = parseSysexDump(data);\n                                // this.props.onBusy(false);\n                                let pId = Object.keys(draft.data[TARGET_PRESET])[0];\n                                // let cId = Object.keys(draft.data[TARGET_PRESET][pId][\"controls\"])[0];\n                                draft.presetIndex = parseInt(pId, 10);\n                                // draft.controlId = parseInt(cId, 10);\n                            })\n                        );\n                        this.addInfoMessage(\"sysfile decoded\");\n                    } else {\n                        this.addWarningMessage(\"not a sysfile\");\n                        console.log(\"readFiles: not a sysfile\", hs(data.slice(0, 5)));\n                    }\n                    // non sysex files are ignored\n                }\n                // too big files are ignored\n            }\n        ));\n    }\n\n    /**\n     * Drop Zone handler\n     * @param files\n     */\n    onDrop = (files) => {\n        console.log('drop', files);\n        // this.props.onBusy(true);\n        this.setState({data: null}, () => {this.readFiles(files)});\n        // this.readFiles(files);  // returned promise is ignored, this is normal.\n    };\n\n    selectPreset = (id) => {\n        console.log(`selectPreset ${id}`);\n        this.setState({\n            presetIndex: id\n        });\n/*\n        if (id && this.state.controlId) {\n            this.sendSysex(requestPresetObj(id, this.state.controlId));\n        }\n*/\n    };\n\n    /**\n     * dataIndex is only used when dataType == \"data\"\n     */\n    updateMidiSettings = (settingIndex, dataType, dataIndex, value) => {\n        console.log(\"PresetMidi.updateMidiSettings\", settingIndex, dataIndex, value);\n        let v = parseInt(value, 10);\n        this.setState(\n            produce(draft => {\n                if (dataType === \"data\") {\n                    draft.data[TARGET_PRESET][draft.presetIndex][\"midi\"][settingIndex][\"data\"][dataIndex] = v;\n                } else {\n                    draft.data[TARGET_PRESET][draft.presetIndex][\"midi\"][settingIndex][dataType] = v;\n                }\n                if (dataType === \"msg_type\") {\n                    console.log('msg_type', dataType, value);\n                    if (v === MSG_CTRL_OFF) {\n                        console.log('set active 0');\n                        draft.data[TARGET_PRESET][draft.presetIndex][\"midi\"][settingIndex][\"active\"] = 0;\n                    } else {\n                        console.log('set active 1');\n                        draft.data[TARGET_PRESET][draft.presetIndex][\"midi\"][settingIndex][\"active\"] = 1;\n                    }\n                }\n                draft.data[TARGET_PRESET][draft.presetIndex][\"midi\"][settingIndex][\"changed\"] = true;\n                draft.changed = true;\n            })\n        );\n    };\n\n    updatePresetName = (name) => {\n        console.log(\"PresetMidi.updateName\", name);\n        if (name === undefined || name === null) return;\n        if (name.length > 5) {\n            console.warn(`PresetMidi.updateName: name too long: ${name}`);\n            return;\n        }\n        this.setState(\n            produce(draft => {\n                draft.data[TARGET_PRESET][draft.presetIndex][\"name\"] = name;    // TODO : buld update message\n                draft.data[TARGET_PRESET][draft.presetIndex][\"changed\"] = true;\n                draft.changed = true;\n            })\n        );\n    };\n\n    /**\n     *\n     */\n    handleMidiInputEvent = (event) => {\n        console.log(\"PresetMidi.handleMidiInputEvent\", event, event.data);\n        // if (event instanceof MIDIMessageEvent) {\n        if (isSysexData(event.data)) {\n            this.setState(\n                produce(draft => {\n                    draft.data = mergeDeep(draft.data || {}, parseSysexDump(event.data));\n                    // this.props.onBusy(false);\n                })\n            );\n            this.addInfoMessage(`sysex received (${event.data.length} bytes)`);\n        } else {\n            console.log(\"MIDI message is not a sysex message\")\n        }\n        // }\n    };\n\n    renderPort = (port, selected, clickHandler) => {\n        if (port === undefined || port === null) return null;\n        return (\n            <MidiPort key={port.id} port={port} selected={selected} clickHandler={clickHandler} />\n        )\n    };\n\n    onInputConnection = (port_id) => {\n        this.addInfoMessage(`input ${inputName(port_id)} connected`);\n    };\n\n    onInputDisconnection = (port_id) => {\n        this.addInfoMessage(`input ${inputName(port_id)} disconnected`);\n    };\n\n    onOutputConnection = (port_id) => {\n        this.setState(\n            produce(draft => {\n                draft.output = port_id;\n            })\n        );\n        this.addInfoMessage(`output ${outputName(port_id)} connected`);\n    };\n\n    onOutputDisconnection = (port_id) => {\n        this.addInfoMessage(`output ${outputName(port_id)} disconnected`);\n    };\n\n    sendSysex = msg => {\n        console.log(\"sendSysex\", msg);\n        if (!this.state.output) return;\n        let out = outputById(this.state.output);\n        if (!out) {\n            console.warn(`send: output ${this.state.output} not found`);\n            return;\n        }\n         this.setState(\n            {data: null},\n            () => out.sendSysex(SYSEX_SIGNATURE, msg)\n        );\n    };\n\n    updatePacer = (messages) => {\n        for (let m of messages) {\n            this.sendSysex(m);\n        }\n        this.addInfoMessage(`update${messages.length > 1 ? 's' : ''} sent to Pacer`);\n    };\n\n    render() {\n\n        const { presetIndex, data, changed } = this.state;\n\n        let showEditor = false;\n\n        if (data) {\n\n            console.log(\"data length\", Object.keys(data[TARGET_PRESET][presetIndex][\"midi\"]).length);\n\n            showEditor = true;\n\n            if (!(TARGET_PRESET in data)) {\n                console.log(`Presets: invalid data`, data);\n                showEditor = false;\n            }\n\n            if (showEditor && !(presetIndex in data[TARGET_PRESET])) {\n                console.log(`Presets: preset ${presetIndex} not found in data`);\n                showEditor = false;\n            }\n\n            if (showEditor && !(\"midi\" in data[TARGET_PRESET][presetIndex])) {\n                console.log(`Presets: midi not found in data`);\n                showEditor = false;\n            }\n\n        }\n\n        showEditor = showEditor && (Object.keys(data[TARGET_PRESET][presetIndex][\"midi\"]).length === 16);\n\n        let updateMessages = [];\n        if (showEditor) {\n            updateMessages = getMidiSettingUpdateSysexMessages(presetIndex, data);\n            let n = buildPresetNameSysex(presetIndex, data);\n            if (n) {\n                updateMessages.push(n);\n            }\n        }\n\n        console.log(\"PresetMidi.render\", showEditor, presetIndex);\n\n        return (\n            <div className=\"wrapper\">\n                <div className=\"content\">\n\n                    <div className=\"content-row step-1\">\n{/*\n                        <div className=\"background\">\n                            Connect\n                        </div>\n                        <div className=\"content-row-header\">\n                            1\n                        </div>\n*/}\n                        <div className=\"content-row-content row-middle-aligned\">\n                            <Midi only={PACER_MIDI_PORT_NAME} autoConnect={PACER_MIDI_PORT_NAME}\n                                  inputRenderer={this.renderPort} outputRenderer={this.renderPort}\n                                  onMidiInputEvent={this.handleMidiInputEvent}\n                                  onInputConnection={this.onInputConnection}\n                                  onInputDisconnection={this.onInputDisconnection}\n                                  onOutputConnection={this.onOutputConnection}\n                                  onOutputDisconnection={this.onOutputDisconnection}\n                                  className=\"sub-header\" >\n                                <div className=\"no-midi\">Please connect your Pacer to your computer.</div>\n                            </Midi>\n                        </div>\n                    </div>\n                    <div className=\"content-row step-2\">\n{/*\n                        <div className=\"background\">\n                            Select\n                        </div>\n                        <div className=\"content-row-header\">\n                            2\n                        </div>\n*/}\n                        <div className=\"content-row-content\">\n\n                            <h2>Choose the preset to edit:</h2>\n\n                            <div className=\"selectors\">\n                                <PresetSelector currentPreset={presetIndex} onClick={this.selectPreset} />\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"content-row step-3\">\n{/*\n                        <div className=\"background\">\n                            Edit\n                        </div>\n                        <div className=\"content-row-header\">\n                            3\n                        </div>\n*/}\n                        <div className=\"content-row-content\">\n                            {showEditor &&\n                            <Fragment>\n                                <h2>Preset name:</h2>\n                                <PresetNameEditor name={data[TARGET_PRESET][presetIndex][\"name\"]}\n                                                    onUpdate={(name) => this.updatePresetName(name)} />\n                                <h2>Preset MIDI settings:</h2>\n                                <MidiSettingsEditor settings={data[TARGET_PRESET][presetIndex][\"midi\"]}\n                                                    onUpdate={(settingIndex, dataType, dataIndex, value) => this.updateMidiSettings(settingIndex, dataType, dataIndex, value)} />\n                            </Fragment>\n                            }\n                        </div>\n                    </div>\n\n                    <div className=\"content-row step-4\">\n{/*\n                        <div className=\"background\">\n                            Write\n                        </div>\n                        <div className=\"content-row-header\">\n                            4\n                        </div>\n*/}\n                        <div className=\"content-row-content\">\n                            {changed &&\n                            <Fragment>\n                                <h2>Send the updated config to the Pacer:</h2>\n                                <div className=\"actions\">\n                                    <button className=\"update\" onClick={() => this.updatePacer(updateMessages)}>Update Pacer</button>\n                                </div>\n                            </Fragment>\n                            }\n                        </div>\n                    </div>\n\n                    <div>\n                        {showEditor && <div className=\"debug\">\n                            <h4>[Debug] update message to send to Pacer:</h4>\n                            <div className=\"message-to-send\">\n                                {updateMessages.map((m, i) => <div key={i} className=\"code\">{hs(m)}</div>)}\n                            </div>\n                        </div>}\n\n                        {data && <div className=\"debug\">\n                            <h4>[Debug] sysex data:</h4>\n                            <pre>{JSON.stringify(data, null, 4)}</pre>\n                        </div>}\n\n                    </div>\n                </div>\n\n                <div className=\"help\">\n\n                    <Dropzone onDrop={this.onDrop} className=\"drop-zone\">\n                        Drop a binary sysex file here<br />or click to open the file dialog\n                    </Dropzone>\n\n                    <h3>Log:</h3>\n                    <Status messages={this.state.statusMessages} />\n\n                </div>\n\n            </div>\n        );\n    }\n\n}\n\nexport default PresetMidi;\n","import React, {Component} from 'react';\nimport './App.css';\nimport { HashRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport TestSender from \"./pages/TestSender\";\nimport Preset from \"./pages/Preset\";\nimport Monitor from \"./pages/Monitor\";\nimport Footer from \"./components/Footer\";\nimport Global from \"./pages/Global\";\nimport DumpDecoder from \"./pages/DumpDecoder\";\nimport Chords from \"./pages/Chords\";\nimport PresetMidi from \"./pages/PresetMidi\";\n\n\nconst MenuLink = ({ label, to, activeOnlyWhenExact }) => (\n    <Route\n        path={to}\n        exact={activeOnlyWhenExact}\n        children={({ match }) => (\n            <span className={match ? \"header-link active\" : \"header-link\"}>\n                <Link to={to}>{label}</Link>\n            </span>\n        )}\n    />\n);\n\n\nclass App extends Component {\n\n    state = {\n        busy: false\n    };\n\n    /**\n     *\n     * @param busy boolean\n     */\n    onBusy = (busy) => {\n        this.setState({ busy });\n    };\n\n    /**\n     * Main app render\n     * @returns {*}\n     */\n    render() {\n        const { busy } = this.state;\n\n        return (\n            <Router>\n                <div className=\"app\">\n\n                    <header className=\"header\">\n                        {/*<h1>Pacer Editor</h1>*/}\n                        <MenuLink activeOnlyWhenExact={true} to=\"/\" label=\"Home\" />\n                        <MenuLink to=\"/preset\" label=\"Preset Controls\" />\n                        <MenuLink to=\"/presetmidi\" label=\"Preset Name & MIDI\" />\n                        <MenuLink to=\"/global\" label=\"Global config\" />\n                        <MenuLink to=\"/chords\" label=\"Chords\" />\n                        <MenuLink to=\"/monitor\" label=\"MIDI monitor\" />\n                        <MenuLink to=\"/dumpdecoder\" label=\"Dump decoder\" />\n                        <MenuLink to=\"/testsender\" label=\"Debug\" />\n                        <div className=\"spacer\">\n                        </div>\n                        {busy && <div className=\"busy\">busy</div>}\n                    </header>\n\n                    {/*<div className=\"wrapper\">*/}\n                        {/*<div className=\"content\">*/}\n                            <Switch>\n                                <Route exact={true} path=\"/\" render={\n                                    props => (\n                                        <Home />\n                                    )\n                                }/>\n                                <Route path=\"/preset\" render={\n                                    props => (\n                                        <Preset onBusy={this.onBusy} />\n                                    )\n                                }/>\n                                <Route path=\"/presetmidi\" render={\n                                    props => (\n                                        <PresetMidi onBusy={this.onBusy} />\n                                    )\n                                }/>\n                                <Route path=\"/global\" render={\n                                    props => (\n                                        <Global onBusy={this.onBusy} />\n                                    )\n                                }/>\n                                <Route path=\"/chords\" render={\n                                    props => (\n                                        <Chords onBusy={this.onBusy} />\n                                    )\n                                }/>\n                                <Route path=\"/monitor\" render={\n                                    props => (\n                                        <Monitor onBusy={this.onBusy} />\n                                    )\n                                }/>\n                                <Route path=\"/dumpdecoder\" render={\n                                    props => (\n                                        <DumpDecoder onBusy={this.onBusy} />\n                                    )\n                                }/>\n                                <Route path=\"/testsender\" render={\n                                    props => (\n                                        <TestSender onBusy={this.onBusy} />\n                                    )\n                                }/>\n                            </Switch>\n                        {/*</div>*/}\n                    {/*</div>*/}\n\n                    <Footer />\n\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nfunction noop() {}\nif (process.env.NODE_ENV !== 'development') {\n    console.log = noop;\n    console.warn = noop;\n    console.error = noop;\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}