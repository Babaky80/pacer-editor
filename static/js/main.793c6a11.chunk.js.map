{"version":3,"sources":["pages/Home.js","utils/hexstring.js","utils/misc.js","pacer/constants.js","pacer/sysex.js","utils/ports.js","components/DumpSysex.js","pacer/utils.js","components/Midi.js","components/MidiPort.js","pages/TestSender.js","components/PresetSelector.js","components/ControlSelector.js","components/ControlStepsEditor.js","components/ControlModeEditor.js","components/Status.js","components/PresetNameEditor.js","pages/Preset.js","utils/midi.js","pages/Monitor.js","components/Footer.js","pages/Global.js","pages/DumpDecoder.js","components/MidiSettingsEditor.js","pages/PresetMidi.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","className","href","target","rel","src","alt","Component","h","v","undefined","str","len","char","s","c","n","length","padZero","toString","toUpperCase","hs","data","Array","from","map","join","fromHexString","string","sep","replace","Uint8Array","i","parseInt","substr","sortObject","obj","arr","prop","hasOwnProperty","push","key","value","sort","b","localeCompare","SYSEX_SIGNATURE","SYSEX_HEADER","COMMAND_SET","COMMAND_GET","TARGET_PRESET","TARGETS","_TARGETS","Object","defineProperty","CONTROL_NAME","CONTROL_STOMPSWITCH_1","CONTROL_STOMPSWITCH_6","CONTROL_STOMPSWITCH_A","CONTROL_FOOTSWITCH_4","CONTROL_EXPRESSION_PEDAL_1","CONTROL_EXPRESSION_PEDAL_2","CONTROL_MIDI","CONTROL_ALL","CONTROLS","_CONTROLS","CONTROLS_FULLNAME","1","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","54","55","126","127","STOMPSWITCHES_TOP","STOMPSWITCHES_BOTTOM","FOOTSWITCHES","EXPPEDALS","MSG_CTRL_OFF","MSG_TYPES","_MSG_TYPES","MSG_TYPES_FULLNAME_SW","_MSG_TYPES_FULLNAME_S","MSG_TYPES_FULLNAME_SW_SORTED","MSG_TYPES_FULLNAME_MIDI_SORTED","_MSG_TYPES_FULLNAME_E","_MSG_TYPES_FULLNAME_M","MSG_TYPES_DATA_HELP","_MSG_TYPES_DATA_HELP","COLORS","0","2","3","4","5","6","7","8","9","10","11","12","CONTROL_MODE_ELEMENT","CONTROL_MODES","_CONTROL_MODES","SYSEX_START","SYSEX_END","CMD","TGT","IDX","OBJ","ELM","isObject","item","isArray","mergeDeep","_len","arguments","sources","_key","source","shift","assign","apply","concat","isSysexData","byteLength","parseSysexMessage","obj_type","message","cmd","tgt","idx","console","warn","String","fromCharCode","slice","getPresetName","steps","e","index","config","channel","msg_type","active","getControlStep","mode_cfg","control_mode","getControlMode","led_cfg","data_len","bytes","step","cfg","d","getControlLED","getMidiSetting","parseSysexDump","presets","indexOf","k","manufacturer_id","NEKTAR_TECHNOLOGY_INC","log","checksum","reduce","previousValue","currentValue","requestPreset","presetIndex","msg","cs","getControlUpdateSysexMessages","controlId","msgs","_arr","keys","_i","changed","led_midi_ctrl","led_active_color","led_inactive_color","led_num","buildControlStepSysex","mode","buildControlModeSysex","buildPresetNameSysex","charCodeAt","getMidiSettingUpdateSysexMessages","settings","_arr2","_i2","setting","buildMidiSettingsSysex","portById","id","p","WebMidi","inputs","find","outputs","inputById","outputById","inputName","name","outputName","PresetName","_ref","MidiTable","_ref2","colSpan","t","Note","MidiSettings","_ref3","DumpSysex_MidiTable","ControlTable","_ref4","c0","c1","Controls","_ref5","controls","DumpSysex_ControlTable","Preset","_ref6","Math","floor","presetIndexToXY","DumpSysex_PresetName","DumpSysex_Controls","DumpSysex_MidiSettings","Presets","_ref7","DumpSysex_Preset","DumpSysex","_ref8","DumpSysex_Presets","Midi","state","input","output","connectInput","port","_this","props","onMidiInputEvent","hasListener","addListener","onInputConnection","disconnectInput","removeListener","onInputDisconnection","connectOutput","setState","onOutputConnection","disconnectOutput","port_id","onOutputDisconnection","autoConnectInput","autoConnect","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","type","match","RegExp","err","return","autoConnectOutput","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","registerInputs","r","only","filter","registerOutputs","unRegisterInputs","unRegisterOutputs","handleMidiConnectEvent","group","groupEnd","togglePort","prev","midiOn","this","_this2","_this$state","children","inputRenderer","outputRenderer","defaultProps","classname","MidiPorts","isSelected","selected","clickHandler","react_switch_default","onChange","checked","height","width","TestSender","messages","requestPresetObj","customMessage","updateCustomMessage","event","sendCustomMessage","sendSysex","handleMidiInputEvent","produce","draft","renderPort","components_MidiPort","setOutput","out","sendMessage","Midi_Midi","onClick","disabled","size","placeholder","src_components_DumpSysex","JSON","stringify","Selector","PresetSelector","currentPreset","react","PresetSelector_Selector","letter","digit","xy","Control","ControlSelector","currentControl","ControlSelector_Control","LEDMidi","current_value","defaultValue","LEDColor","LEDNum","MidiNote","note","Step","d0","d1","d2","updateCallback","ControlStepsEditor_MidiNote","ControlStepsEditor_LEDColor","ControlStepsEditor_LEDNum","ControlStepsEditor_LEDMidi","ControlStepsEditor","onStepUpdate","stepIndex","dataType","dataIndex","onUpdate","ControlStepsEditor_Step","ControlModeEditor","Status","PresetNameEditor","onNameUpdate","MAX_STATUS_MESSAGES","isVal","statusMessages","showBusy","setTimeout","onBusy","addStatusMessage","m","addInfoMessage","addWarningMessage","addErrorMessage","callback","wait","timeout","clearTimeout","batchMessages","accumulator","element","onDrop","files","readFiles","selectPreset","selectControl","updateControlStep","updateControlMode","updatePresetName","updatePacer","Promise","all","asyncToGenerator","regenerator_default","mark","_callee","file","wrap","_context","t0","Response","arrayBuffer","t1","sent","pId","cId","stop","_x2","_this3","showEditor","updateMessages","src_components_PresetSelector","src_components_ControlSelector","components_PresetNameEditor","src_components_ControlStepsEditor","src_components_ControlModeEditor","es","src_components_Status","MESSAGE","128","144","160","176","192","208","224","CONTROLER","32","33","34","36","37","38","39","40","42","43","44","45","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","91","92","93","94","95","96","97","98","99","100","101","120","121","122","123","124","125","MAX_MESSAGES","Monitor","unshift","pop","parseMidi","info2","info3","messageCode","velocity","controlNumber","controlValue","program","pitchBend","pitchBendMultiplier","Footer","aria-label","title","viewBox","version","aria-hidden","fillRule","Global","DumpDecoder","Setting","MidiSettingsEditor_MidiNote","MidiSettingsEditor","onSettingUpdate","settingIndex","MidiSettingsEditor_Setting","PresetMidi","updateMidiSettings","src_components_MidiSettingsEditor","MenuLink","label","to","activeOnlyWhenExact","Route","path","exact","Link","App","busy","HashRouter","App_MenuLink","Switch","render","src_pages_Home","src_pages_Preset","pages_PresetMidi","pages_Global","src_pages_Monitor","src_pages_DumpDecoder","src_pages_TestSender","src_components_Footer","Boolean","window","location","hostname","noop","error","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.793c6a11.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport \"./Home.css\";\n\n\nclass Home extends Component {\n\n\n    render() {\n\n        return (\n            <div className=\"content\">\n\n                <h1>Requirements</h1>\n\n                <div className=\"doc\">\n                    <p>This application requires a browser that support\n                        the <a href=\"http://webaudio.github.io/web-midi-api/\" target=\"_blank\" rel=\"noopener noreferrer\">Web MIDI API</a>.</p>\n\n                    <p>Currently, only <span className=\"strong\">Chrome</span> and <span className=\"strong\">Opera</span> support this standard.\n                        This application will therefore <span className=\"italic\">not</span> work in Firefox, Safari, IE or Edge.</p>\n                </div>\n\n                <h1>Limitations</h1>\n\n                <div className=\"doc\">\n                    <p>The current version of this editor isn't able to edit the Global configuration of the Pacer.</p>\n                    <p>This editor does not offer patches management either.</p>\n                </div>\n\n{/*\n                <h2>Usage</h2>\n\n                <div className=\"doc\">\n                    <ol>\n                        <li>Connect your Pacer to your computer</li>\n                    </ol>\n                </div>\n*/}\n\n                <h1>MIDI in your browser</h1>\n\n                <div className=\"doc\">\n                    <div>\n                        <p>You need to allow your browser to use your MIDI device:</p>\n                        <img src=\"help-01.png\" alt=\"\" />\n                    </div>\n                    <div>\n                        <p>In case you didn't allow the use of MIDI device and want to change that, you can right-click on the URL icon and change the setting:</p>\n                        <img src=\"help-02.png\" alt=\"\" />\n                    </div>\n                </div>\n\n                <h1>FAQ</h1>\n\n                <div className=\"doc\">\n                    <p><i>To be completed...</i></p>\n                </div>\n\n                <h1>Contribute</h1>\n\n                <div className=\"doc\">\n                    <p>This editor is an Open Source project. You are welcome to contribute.</p>\n                    <p>The source-code is hosted\n                    by GitHub: <a href=\"https://github.com/francoisgeorgy/pacer-editor\" target=\"_blank\" rel=\"noopener noreferrer\">pacer-editor</a></p>\n                    <p>To contribute your bug fixes, new features, etc.: 1) fork the project, 2) create a pull-request.</p>\n                </div>\n\n                <h1>Thanks</h1>\n\n                <div className=\"doc\">\n                    Thank you to the Nektar support service for having provided precious informations regarding the SysEx data format of the Pacer.\n                    This editor would not have been possible without their support.\n                </div>\n\n            </div>\n        );\n    }\n\n}\n\nexport default Home;\n","\n/*\nString.prototype.padZero = function (len, c) {\n    var s = '', c = c || '0', len = (len || 2) - this.length;\n    while (s.length < len) s += c;\n    return s + this;\n};\n*/\n\nexport const padZero = (str, len, char) => {\n    let s = '';\n    let c = char || '0';\n    let n = (len || 2) - str.length;\n    while (s.length < n) s += c;\n    return s + str;\n};\n\nexport const h = v => {\n    return (v === null || v === undefined) ? \"\" : padZero(v.toString(16).toUpperCase(), 2);\n};\n\nexport const hs = data => (data === null || data === undefined) ? \"\" : (Array.from(data).map(n => h(n))).join(\" \");    // Array.from() is necessary to get a non-typed array\n\n\n/**\n *\n * @param string\n * @param sep\n * @returns {*}\n */\nexport const fromHexString = function(string, sep) {\n    let s = sep ? string.replace(sep, '') : string;\n    if ((s.length % 2) > 0) {\n        return null;\n    }\n    if (s.length === 0) return null;\n    let a = new Uint8Array(s.length / 2);\n    for (let i=0; i < (s.length / 2); i++) {\n        a[i] = parseInt(s.substr(i * 2, 2), 16);\n    }\n    return a;\n};\n","export function sortObject(obj) {\n    let arr = [];\n    for (let prop in obj) {\n        if (obj.hasOwnProperty(prop)) {\n            arr.push({\n                'key': prop,\n                'value': obj[prop]\n            });\n        }\n    }\n    arr.sort((a, b) => a.value.localeCompare(b.value));\n    return arr;\n}\n","import {sortObject} from \"../utils/misc\";\n\nexport const PACER_MIDI_PORT_NAME = \"Pacer midi1\";          // can be a regex\nexport const PACER_MIDI_INPUT_PORT_NAME = \"Pacer midi1\";\nexport const PACER_MIDI_OUTPUT_PORT_NAME = \"Pacer midi1\";\n\nexport const SYSEX_SIGNATURE = [0x00, 0x01, 0x77];\nexport const SYSEX_HEADER = [0x7F];\n\nexport const COMMAND_SET = 0x01;\nexport const COMMAND_GET = 0x02;\n\nexport const TARGET_PRESET = 0x01;\nexport const TARGET_GLOBAL = 0x05;\nexport const TARGET_BACKUP = 0x07;\n\nexport const TARGETS = {\n    [TARGET_PRESET]: \"preset\",\n    [TARGET_GLOBAL]: \"global\",\n    [TARGET_BACKUP]: \"full backup\"\n};\n\nexport const CONTROL_NAME = 0x01;\nexport const CONTROL_STOMPSWITCH_1 = 0x0D;\nexport const CONTROL_STOMPSWITCH_2 = 0x0E;\nexport const CONTROL_STOMPSWITCH_3 = 0x0F;\nexport const CONTROL_STOMPSWITCH_4 = 0x10;\nexport const CONTROL_STOMPSWITCH_5 = 0x11;\nexport const CONTROL_STOMPSWITCH_6 = 0x12;\nexport const CONTROL_RESERVED = 0x13;\nexport const CONTROL_STOMPSWITCH_A = 0x14;\nexport const CONTROL_STOMPSWITCH_B = 0x15;\nexport const CONTROL_STOMPSWITCH_C = 0x16;\nexport const CONTROL_STOMPSWITCH_D = 0x17;\nexport const CONTROL_FOOTSWITCH_1 = 0x18;\nexport const CONTROL_FOOTSWITCH_2 = 0x19;\nexport const CONTROL_FOOTSWITCH_3 = 0x1A;\nexport const CONTROL_FOOTSWITCH_4 = 0x1B;\nexport const CONTROL_EXPRESSION_PEDAL_1 = 0x36;\nexport const CONTROL_EXPRESSION_PEDAL_2 = 0x37;\nexport const CONTROL_MIDI = 0x7E;\nexport const CONTROL_ALL = 0x7F;\n\n// objects:\nexport const CONTROLS = {\n    [CONTROL_NAME]: \"name\",\n    [CONTROL_STOMPSWITCH_1]: \"1\",\n    [CONTROL_STOMPSWITCH_2]: \"2\",\n    [CONTROL_STOMPSWITCH_3]: \"3\",\n    [CONTROL_STOMPSWITCH_4]: \"4\",\n    [CONTROL_STOMPSWITCH_5]: \"5\",\n    [CONTROL_STOMPSWITCH_6]: \"6\",\n    [CONTROL_RESERVED]: \"RESERVED\",\n    [CONTROL_STOMPSWITCH_A]: \"A\",\n    [CONTROL_STOMPSWITCH_B]: \"B\",\n    [CONTROL_STOMPSWITCH_C]: \"C\",\n    [CONTROL_STOMPSWITCH_D]: \"D\",\n    [CONTROL_FOOTSWITCH_1]: \"FS 1\",\n    [CONTROL_FOOTSWITCH_2]: \"FS 2\",\n    [CONTROL_FOOTSWITCH_3]: \"FS 3\",\n    [CONTROL_FOOTSWITCH_4]: \"FS 4\",\n    [CONTROL_EXPRESSION_PEDAL_1]: \"EXP 1\",\n    [CONTROL_EXPRESSION_PEDAL_2]: \"EXP 2\",\n    [CONTROL_MIDI]: \"MIDI configuration\",\n    [CONTROL_ALL]: \"ALL\"\n};\n\nexport const CONTROLS_FULLNAME = {\n    0x01: \"Preset Name\",\n    0x0D: \"Stompswitch 1\",\n    0x0E: \"Stompswitch 2\",\n    0x0F: \"Stompswitch 3\",\n    0x10: \"Stompswitch 4\",\n    0x11: \"Stompswitch 5\",\n    0x12: \"Stompswitch 6\",\n    0x13: \"RESERVED\",\n    0x14: \"Stompswitch A\",\n    0x15: \"Stompswitch B\",\n    0x16: \"Stompswitch C\",\n    0x17: \"Stompswitch D\",\n    0x18: \"Footswitch 1\",\n    0x19: \"Footswitch  2\",\n    0x1A: \"Footswitch  3\",\n    0x1B: \"Footswitch  4\",\n    0x36: \"Expression Pedal 1\",\n    0x37: \"Expression Pedal 2\",\n    0x7E: \"MIDI configuration\",\n    0x7F: \"ALL\"\n};\n\n// subsets of CONTROLS keys:\nexport const STOMPSWITCHES = [0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x14, 0x15, 0x16, 0x17];\nexport const STOMPSWITCHES_TOP = [0x14, 0x15, 0x16, 0x17];\nexport const STOMPSWITCHES_BOTTOM = [0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12];\nexport const FOOTSWITCHES = [0x18, 0x19, 0x1A, 0x1B];\nexport const EXPPEDALS = [0x36, 0x37];\n\n// message types:\nexport const MSG_AD_MIDICC = 0x00;\nexport const MSG_AD_NRPNC = 0x03;\nexport const MSG_AD_NRPNF = 0x04;\nexport const MSG_AD_PITCH = 0x01;\nexport const MSG_AD_ATCHAN = 0x02;\nexport const MSG_DAWFUNC = 0x7E;\nexport const MSG_CTRL_OFF = 0x61;\n\nexport const MSG_SW_MIDI_CC_TGGLE = 0x47;\nexport const MSG_SW_MIDI_CC = 0x40;\nexport const MSG_SW_MIDI_CC_STEP = 0x48;\nexport const MSG_SW_NOTE = 0x43;\nexport const MSG_SW_NOTE_TGGLE = 0x44;\nexport const MSG_SW_PRG_BANK = 0x45;\nexport const MSG_SW_PRG_STEP = 0x46;\nexport const MSG_SW_NRPN_COARSE = 0x57;\nexport const MSG_SW_NRPN_FINE = 0x58;\nexport const MSG_SW_MMC = 0x55;\nexport const MSG_SW_RELAY = 0x59;\nexport const MSG_SW_PRESET_SELECT = 0x62;\nexport const MSG_SW_PRESET_INC_DEC = 0x56;\nexport const MSG_SW_STEP_SELECT = 0x63;\nexport const MSG_SW_STEP_INC_DEC = 0x64;\n\nexport const MSG_ENC_CC = 0x12;\nexport const MSG_ENC_MIDICC_REL = 0x11;\nexport const MSG_ENC_NRPNC = 0x15;\nexport const MSG_ENC_NRPNF = 0x16;\nexport const MSG_ENC_PITCH = 0x13;\nexport const MSG_ENC_ATCHAN = 0x14;\nexport const MSG_ENC_PROGRAM = 0x10;\nexport const MSG_ENC_PRESETSELECT = 0x17;\nexport const MSG_ENC_STEPSELECT = 0x18;\n\nexport const MSG_LOAD_CC = 0x65;\n\nexport const MSG_TYPES = {\n\n    [MSG_AD_MIDICC]: \"CC\",\n    [MSG_AD_NRPNC]: \"NRPN C\",\n    [MSG_AD_NRPNF]: \"NRPN F\",\n    [MSG_AD_PITCH]: \"PITCH\",\n    [MSG_AD_ATCHAN]: \"AT CHAN\",\n    [MSG_DAWFUNC]: \"DAW FUNC\",\n    [MSG_CTRL_OFF]: \"CTRL_OFF\",\n\n    [MSG_SW_MIDI_CC_TGGLE]: \"CC TOGGLE\",\n    [MSG_SW_MIDI_CC]: \"CC\",\n    [MSG_SW_MIDI_CC_STEP]: \"CC STEP\",\n    [MSG_SW_NOTE]: \"NOTE\",\n    [MSG_SW_NOTE_TGGLE]: \"NOTE TOGGLE\",\n    [MSG_SW_PRG_BANK]: \"PRG BANK\",\n    [MSG_SW_PRG_STEP]: \"PRG STEP\",\n    [MSG_SW_NRPN_COARSE]: \"NRPN COARSE\",\n    [MSG_SW_NRPN_FINE]: \"NRPN FINE\",\n    [MSG_SW_MMC]: \"MMC\",\n    [MSG_SW_RELAY]: \"RELAY\",\n    [MSG_SW_PRESET_SELECT]: \"PRESET SELECT\",\n    [MSG_SW_PRESET_INC_DEC]: \"PRESET INC DEC\",\n    [MSG_SW_STEP_SELECT]: \"STEP SELECT\",\n    [MSG_SW_STEP_INC_DEC]: \"STEP INC DEC\",\n\n    [MSG_ENC_CC]: \"CC\",\n    [MSG_ENC_MIDICC_REL]: \"CC REL\",\n    [MSG_ENC_NRPNC]: \"NRPN C\",\n    [MSG_ENC_NRPNF]: \"NRPN F\",\n    [MSG_ENC_PITCH]: \"PITCH\",\n    [MSG_ENC_ATCHAN]: \"AT CHAN\",\n    [MSG_ENC_PROGRAM]: \"PRG\",\n    [MSG_ENC_PRESETSELECT]: \"PRESET SEL\",\n    [MSG_ENC_STEPSELECT]: \"STEP SEL\",\n\n    [MSG_LOAD_CC]: \"CC\"\n};\n\n// Message types for stompswitches\nexport const MSG_TYPES_FULLNAME_SW = {\n    [MSG_CTRL_OFF]: \"OFF\",\n    [MSG_SW_MIDI_CC_TGGLE]: \"CC Toggle\",\n    [MSG_SW_MIDI_CC]: \"CC Trigger\",\n    [MSG_SW_MIDI_CC_STEP]: \"CC Step\",\n    [MSG_SW_NOTE]: \"Note\",\n    [MSG_SW_NOTE_TGGLE]: \"Note Toggle\",\n    [MSG_SW_PRG_BANK]: \"Program & Bank\",\n    [MSG_SW_PRG_STEP]: \"Program Step\",\n    [MSG_SW_NRPN_COARSE]: \"NRPN Coarse\",\n    [MSG_SW_NRPN_FINE]: \"NRPN Fine\",\n    [MSG_SW_MMC]: \"MIDI Machine Control\",\n    [MSG_SW_RELAY]: \"Relay Outputs\",\n    [MSG_SW_PRESET_SELECT]: \"Preset Select\",\n    [MSG_SW_PRESET_INC_DEC]: \"Preset Inc/Dec\",\n    [MSG_SW_STEP_SELECT]: \"Step Select\",\n    [MSG_SW_STEP_INC_DEC]: \"Step Inc/Dec\"\n};\n\nexport const MSG_TYPES_FULLNAME_SW_SORTED = sortObject(MSG_TYPES_FULLNAME_SW);\n\n\nexport const MSG_TYPES_FULLNAME_ENC = {\n    [MSG_ENC_CC]: \"CC\",\n    [MSG_ENC_MIDICC_REL]: \"CC REL\",\n    [MSG_ENC_NRPNC]: \"NRPN Coarse\",\n    [MSG_ENC_NRPNF]: \"NRPN Fine\",\n    [MSG_ENC_PITCH]: \"Pitch Bend\",\n    [MSG_ENC_ATCHAN]: \"AT Chan.\",\n    [MSG_ENC_PROGRAM]: \"Program\",\n    [MSG_ENC_PRESETSELECT]: \"Preset Sel\",\n    [MSG_ENC_STEPSELECT]: \"Step Sel\"\n};\n\n\n// Preset Midi Settings\nexport const MSG_TYPES_FULLNAME_MIDI = {\n    [MSG_LOAD_CC]: \"Load CC\",\n    [MSG_SW_NOTE]: \"MIDI Note\",\n    [MSG_SW_PRG_BANK]: \"Program & Bank\",\n    [MSG_SW_NRPN_COARSE]: \"NRPN Coarse\",\n    [MSG_SW_NRPN_FINE]: \"NRPN Fine\",\n    [MSG_SW_MMC]: \"MIDI Machine Control\",\n    [MSG_SW_RELAY]: \"Relay Outputs\",\n    [MSG_DAWFUNC]: \"DAW Func.\",\n    [MSG_CTRL_OFF]: \"OFF\"\n};\n\nexport const MSG_TYPES_FULLNAME_MIDI_SORTED = sortObject(MSG_TYPES_FULLNAME_MIDI);\n\nexport const MSG_TYPES_DATA_HELP = {\n\n    [MSG_AD_MIDICC]: [\"\", \"\", \"\"],\n    [MSG_AD_NRPNC]: [\"\", \"\", \"\"],\n    [MSG_AD_NRPNF]: [\"\", \"\", \"\"],\n    [MSG_AD_PITCH]: [\"\", \"\", \"\"],\n    [MSG_AD_ATCHAN]: [\"\", \"\", \"\"],\n    [MSG_DAWFUNC]: [\"function\", \"not used\", \"not used\"],\n    [MSG_CTRL_OFF]: [\"\", \"\", \"\"],\n\n    [MSG_SW_MIDI_CC_TGGLE]: [\"controller\", \"value 1\", \"value 2\"],\n    [MSG_SW_MIDI_CC]: [\"controller\", \"down\", \"up\"],\n    [MSG_SW_MIDI_CC_STEP]: [\"controller\", \"start\", \"end\"],\n    [MSG_SW_NOTE]: [\"note\", \"velocity\", \"not used\"],\n    [MSG_SW_NOTE_TGGLE]: [\"note\", \"velocity\", \"not used\"],\n    [MSG_SW_PRG_BANK]: [\"program\", \"bank LSB\", \"bank MSB\"],\n    [MSG_SW_PRG_STEP]: [\"not used\", \"start\", \"end\"],\n    [MSG_SW_NRPN_COARSE]: [\"value\", \"NRPN LSB\", \"NRPN MSB\"],\n    [MSG_SW_NRPN_FINE]: [\"value\", \"NRPN LSB\", \"NRPN MSB\"],\n    [MSG_SW_MMC]: [\"device\", \"command\", \"not used\"],\n    [MSG_SW_RELAY]: [\"mode\", \"relay #\", \"not used\"],\n    [MSG_SW_PRESET_SELECT]: [\"preset\", \"not used\", \"not used\"],\n    [MSG_SW_PRESET_INC_DEC]: [\"inc/dec\", \"not used\", \"not used\"],\n    [MSG_SW_STEP_SELECT]: [\"target\", \"step\", \"not used\"],\n    [MSG_SW_STEP_INC_DEC]: [\"target\", \"inc/dec\", \"not used\"],\n\n    [MSG_ENC_CC]: [\"\", \"\", \"\"],\n    [MSG_ENC_MIDICC_REL]: [\"\", \"\", \"\"],\n    [MSG_ENC_NRPNC]: [\"\", \"\", \"\"],\n    [MSG_ENC_NRPNF]: [\"\", \"\", \"\"],\n    [MSG_ENC_PITCH]: [\"\", \"\", \"\"],\n    [MSG_ENC_ATCHAN]: [\"\", \"\", \"\"],\n    [MSG_ENC_PROGRAM]: [\"\", \"\", \"\"],\n    [MSG_ENC_PRESETSELECT]: [\"\", \"\", \"\"],\n    [MSG_ENC_STEPSELECT]: [\"\", \"\", \"\"],\n\n    [MSG_LOAD_CC]: [\"controller\", \"value\", \"not used\"]\n};\n\n/*\nexport const CONTROL_ELEMENT = {\n    // 0x00: \"\",\n    0x01: \"step 1: channel\",\n    0x02: \"step 1: message type\",\n    0x03: \"step 1: data 1\",\n    0x04: \"step 1: data 2\",\n    0x05: \"step 1: data 3\",\n    0x06: \"step 1: step active\",\n\n    0x07: \"step 2: channel\",\n    0x08: \"step 2: message type\",\n    0x09: \"step 2: data 1\",\n    0x0A: \"step 2: data 2\",\n    0x0B: \"step 2: data 3\",\n    0x0C: \"step 2: step active\",\n\n    0x0D: \"step 3: channel\",\n    0x0E: \"step 3: message type\",\n    0x0F: \"step 3: data 1\",\n    0x10: \"step 3: data 2\",\n    0x11: \"step 3: data 3\",\n    0x12: \"step 3: step active\",\n\n    0x13: \"step 4: channel\",\n    0x14: \"step 4: message type\",\n    0x15: \"step 4: data 1\",\n    0x16: \"step 4: data 2\",\n    0x17: \"step 4: data 3\",\n    0x18: \"step 4: step active\",\n\n    0x19: \"step 5: channel\",\n    0x1A: \"step 5: message type\",\n    0x1B: \"step 5: data 1\",\n    0x1C: \"step 5: data 2\",\n    0x1D: \"step 5: data 3\",\n    0x1E: \"step 5: step active\",\n\n    0x1F: \"step 6: channel\",\n    0x20: \"step 6: message type\",\n    0x21: \"step 6: data 1\",\n    0x22: \"step 6: data 2\",\n    0x23: \"step 6: data 3\",\n    0x24: \"step 6: step active\",\n\n    // 0x25: \"\",\n    // 0x26: \"\",\n    // 0x27: \"\",\n    // 0x28: \"\",\n    // 0x29: \"\",\n    // 0x2A: \"\",\n    // 0x2B: \"\",\n    // 0x2C: \"\",\n    // 0x2D: \"\",\n    // 0x2E: \"\",\n    // 0x2F: \"\",\n    // 0x30: \"\",\n    // 0x31: \"\",\n    // 0x32: \"\",\n    // 0x33: \"\",\n    // 0x34: \"\",\n    // 0x35: \"\",\n    // 0x36: \"\",\n    // 0x37: \"\",\n    // 0x38: \"\",\n    // 0x39: \"\",\n    // 0x3A: \"\",\n    // 0x3B: \"\",\n    // 0x3C: \"\",\n    // 0x3D: \"\",\n    // 0x3E: \"\",\n    // 0x3F: \"\",\n    // 0x40: \"\",\n    // 0x41: \"\",\n    // 0x42: \"\",\n    // 0x43: \"\",\n\n    0x40: \"control mode\",\n    0x41: \"LED MIDI Ctrl\",\n    0x42: \"LED On Color\",\n    0x43: \"LED Off Color\",\n\n    // 0x44: \"\",\n    // 0x45: \"\",\n    // 0x46: \"\",\n    // 0x47: \"\",\n    // 0x48: \"\",\n    // 0x49: \"\",\n    // 0x4A: \"\",\n    // 0x4B: \"\",\n    // 0x4C: \"\",\n    // 0x4D: \"\",\n    // 0x4E: \"\",\n    // 0x4F: \"\",\n    // 0x50: \"\",\n    // 0x51: \"\",\n    // 0x52: \"\",\n    // 0x53: \"\",\n    // 0x54: \"\",\n    // 0x55: \"\",\n    // 0x56: \"\",\n    // 0x57: \"\",\n    // 0x58: \"\",\n    // 0x59: \"\",\n    // 0x5A: \"\",\n    // 0x5B: \"\",\n    // 0x5C: \"\",\n    // 0x5D: \"\",\n    // 0x5E: \"\",\n    // 0x5F: \"\",\n\n    // 0x60: \"control mode\",\n    // 0x61: \"LED MIDI Ctrl\",\n    // 0x62: \"LED On Color\",\n    // 0x63: \"LED Off Color\",\n\n    // 0x64: \"\",\n    // 0x65: \"\",\n    // 0x66: \"\",\n    // 0x67: \"\",\n    // 0x68: \"\",\n    // 0x69: \"\",\n    // 0x6A: \"\",\n    // 0x6B: \"\",\n    // 0x6C: \"\",\n    // 0x6D: \"\",\n    // 0x6E: \"\",\n    // 0x6F: \"\",\n    // 0x70: \"\",\n    // 0x71: \"\",\n    // 0x72: \"\",\n    // 0x73: \"\",\n    // 0x74: \"\",\n    // 0x75: \"\",\n    // 0x76: \"\",\n    // 0x77: \"\",\n    // 0x78: \"\",\n    // 0x79: \"\",\n    // 0x7A: \"\",\n    // 0x7B: \"\",\n    // 0x7C: \"\",\n    // 0x7D: \"\",\n    // 0x7E: \"\",\n\n    0x7F: \"ALL\"\n};\n*/\n\nexport const MIDI_ELEMENT = {\n    // 0x00: \"\",\n    0x01: \"setting 1: channel\",\n    0x02: \"setting 1: message type\",\n    0x03: \"setting 1: data 1\",\n    0x04: \"setting 1: data 2\",\n    0x05: \"setting 1: data 3\",\n    // 0x06: \"\",\n\n    0x07: \"setting 2: channel\",\n    0x08: \"setting 2: message type\",\n    0x09: \"setting 2: data 1\",\n    0x0A: \"setting 2: data 2\",\n    0x0B: \"setting 2: data 3\",\n    // 0x0C: \"\",\n\n    0x0D: \"setting 3: channel\",\n    0x0E: \"setting 3: message type\",\n    0x0F: \"setting 3: data 1\",\n    0x10: \"setting 3: data 2\",\n    0x11: \"setting 3: data 3\",\n    // 0x12: \"\",\n\n    0x13: \"setting 4: channel\",\n    0x14: \"setting 4: message type\",\n    0x15: \"setting 4: data 1\",\n    0x16: \"setting 4: data 2\",\n    0x17: \"setting 4: data 3\",\n    // 0x18: \"\",\n\n    0x19: \"setting 5: channel\",\n    0x1A: \"setting 5: message type\",\n    0x1B: \"setting 5: data 1\",\n    0x1C: \"setting 5: data 2\",\n    0x1D: \"setting 5: data 3\",\n    // 0x1E: \"\",\n\n    0x1F: \"setting 6: channel\",\n    0x20: \"setting 6: message type\",\n    0x21: \"setting 6: data 1\",\n    0x22: \"setting 6: data 2\",\n    0x23: \"setting 6: data 3\",\n    // 0x24: \"\",\n\n    0x25: \"setting 7: channel\",\n    0x26: \"setting 7: message type\",\n    0x27: \"setting 7: data 1\",\n    0x28: \"setting 7: data 2\",\n    0x29: \"setting 7: data 3\",\n    // 0x2A: \"\",\n\n    0x2B: \"setting 8: channel\",\n    0x2C: \"setting 8: message type\",\n    0x2D: \"setting 8: data 1\",\n    0x2E: \"setting 8: data 2\",\n    0x2F: \"setting 8: data 3\",\n    0x30: \"\",\n\n    0x31: \"setting 9: channel\",\n    0x32: \"setting 9: message type\",\n    0x33: \"setting 9: data 1\",\n    0x34: \"setting 9: data 2\",\n    0x35: \"setting 9: data 3\",\n    // 0x36: \"\",\n\n    0x37: \"setting 10: channel\",\n    0x38: \"setting 10: message type\",\n    0x39: \"setting 10: data 1\",\n    0x3A: \"setting 10: data 2\",\n    0x3B: \"setting 10: data 3\",\n    // 0x3C: \"\",\n\n    0x3D: \"setting 11: channel\",\n    0x3E: \"setting 11: message type\",\n    0x3F: \"setting 11: data 1\",\n    0x40: \"setting 11: data 2\",\n    0x41: \"setting 11: data 3\",\n    // 0x42: \"\",\n\n    0x43: \"setting 12: channel\",\n    0x44: \"setting 12: message type\",\n    0x45: \"setting 12: data 1\",\n    0x46: \"setting 12: data 2\",\n    0x47: \"setting 12: data 3\",\n    // 0x48: \"\",\n\n    0x49: \"setting 13: channel\",\n    0x4A: \"setting 13: message type\",\n    0x4B: \"setting 13: data 1\",\n    0x4C: \"setting 13: data 2\",\n    0x4D: \"setting 13: data 3\",\n    // 0x4E: \"\",\n\n    0x4F: \"setting 14: channel\",\n    0x50: \"setting 14: message type\",\n    0x51: \"setting 14: data 1\",\n    0x52: \"setting 14: data 2\",\n    0x53: \"setting 14: data 3\",\n    // 0x54: \"\",\n\n    0x55: \"setting 15: channel\",\n    0x56: \"setting 15: message type\",\n    0x57: \"setting 15: data 1\",\n    0x58: \"setting 15: data 2\",\n    0x59: \"setting 15: data 3\",\n    // 0x5A: \"\",\n\n    0x5B: \"setting 16: channel\",\n    0x5C: \"setting 16: message type\",\n    0x5D: \"setting 16: data 1\",\n    0x5E: \"setting 16: data 2\",\n    0x5F: \"setting 16: data 3\",\n    // 0x60: \"\",\n\n    // 0x61: \"\",\n    // 0x62: \"\",\n    // 0x63: \"\",\n    // 0x64: \"\",\n    // 0x65: \"\",\n    // 0x66: \"\",\n    // 0x67: \"\",\n    // 0x68: \"\",\n    // 0x69: \"\",\n    // 0x6A: \"\",\n    // 0x6B: \"\",\n    // 0x6C: \"\",\n    // 0x6D: \"\",\n    // 0x6E: \"\",\n    // 0x6F: \"\",\n    // 0x70: \"\",\n    // 0x71: \"\",\n    // 0x72: \"\",\n    // 0x73: \"\",\n    // 0x74: \"\",\n    // 0x75: \"\",\n    // 0x76: \"\",\n    // 0x77: \"\",\n    // 0x78: \"\",\n    // 0x79: \"\",\n    // 0x7A: \"\",\n    // 0x7B: \"\",\n    // 0x7C: \"\",\n    // 0x7D: \"\",\n    // 0x7E: \"\",\n\n    0x7F: \"ALL\"\n};\n\nexport const COLORS = {\n    0x00 : \"Off\",\n    0x01 : \"1A Pink\",\n    0x02 : \"1B Dim Pink\",\n    0x03 : \"2A Red\",\n    0x04 : \"2B Dim Red\",\n    0x05 : \"3A Orange\",\n    0x06 : \"3B Dim Orange\",\n    0x07 : \"4A Amber\",\n    0x08 : \"4B Dim Amber\",\n    0x09 : \"5A Yellow\",\n    0x0A : \"5B Dim Yellow\",\n    0x0B : \"6A Lime\",\n    0x0C : \"6B Dim Lime\",\n    0x0D : \"7A Green\",\n    0x0E : \"7B Dim Green\",\n    0x0F : \"8A Teal\",\n    0x10 : \"8B Dim Teal\",\n    0x11 : \"9A Blue\",\n    0x12 : \"9B Dim Blue\",\n    0x13 : \"10A Lavender\",\n    0x14 : \"10B Dim Lavender\",\n    0x15 : \"11A Purple\",\n    0x16 : \"11B Dim Purple\",\n    0x17 : \"12A White\",\n    0x18 : \"12B Dim White\",\n};\n\nexport const CONTROL_MODE_ELEMENT = 0x60;\n\nexport const CONTROL_MODE_ALL = 0x00;\nexport const CONTROL_MODE_EXT_STEP = 0x01;\nexport const CONTROL_MODE_SEQUENCE = 0x02;\n\nexport const CONTROL_MODES = {\n    [CONTROL_MODE_ALL]: \"All\",\n    [CONTROL_MODE_EXT_STEP]: \"External Step Select\",\n    [CONTROL_MODE_SEQUENCE]: \"Sequence\",\n};\n","import {NEKTAR_TECHNOLOGY_INC} from \"midi-manufacturers\";\nimport {h, hs} from \"../utils/hexstring\";\nimport {\n    COMMAND_GET,\n    COMMAND_SET,\n    CONTROL_ALL,\n    CONTROL_EXPRESSION_PEDAL_1,\n    CONTROL_EXPRESSION_PEDAL_2,\n    CONTROL_FOOTSWITCH_4,\n    CONTROL_MIDI,\n    CONTROL_MODE_ELEMENT,\n    CONTROL_NAME,\n    CONTROL_STOMPSWITCH_1,\n    CONTROL_STOMPSWITCH_6,\n    CONTROL_STOMPSWITCH_A,\n    CONTROLS,\n    SYSEX_HEADER,\n    TARGET_PRESET,\n    TARGETS\n} from \"./constants\";\n\nexport const SYSEX_START = 0xF0;\nexport const SYSEX_END = 0xF7;\n\n// offsets from start of sysex data, right after SYSEX_START\nconst CMD = 4;\nconst TGT = 5;\nconst IDX = 6;\nconst OBJ = 7;\nconst ELM = 8;\n\n/**\n * https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge/34749873#34749873\n * Simple object check.\n * @param item\n * @returns {boolean}\n */\nfunction isObject(item) {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\n/**\n * https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge/34749873#34749873\n * Deep merge two objects.\n * @param target\n * @param ...sources\n */\nexport function mergeDeep(target, ...sources) {\n\n    if (!sources.length) return target;\n\n    const source = sources.shift();\n\n    if (isObject(target) && isObject(source)) {\n        for (const key in source) {\n            if (isObject(source[key])) {\n                if (!target[key]) Object.assign(target, { [key]: {} });\n                mergeDeep(target[key], source[key]);\n            } else {\n                Object.assign(target, { [key]: source[key] });\n            }\n        }\n    }\n\n    return mergeDeep(target, ...sources);\n}\n\n/**\n *\n * @param data Uint8Array\n */\nfunction isSysexData(data) {\n    if (data[0] !== SYSEX_START) return false;\n    if (data[data.byteLength - 1] !== SYSEX_END) return false;\n    return true;\n}\n\n/*\nfunction getManufacturerName(id) {\n    return id in midi_name ? midi_name[id] : \"manufacturer unknown\";\n}\n*/\n\nfunction getControlStep(data) {\n\n    // console.log(\"getControlStep\", hs(data));\n\n    // 01 01 0F 00      midi channel\n    // 02 01 47 00      message type\n    // 03 01 44 00      data 1\n    // 04 01 55 00      data 2\n    // 05 01 66 00      data 3\n    // 06 01 01         active\n\n    // the second byte is the length of the data that follows\n\n    //FIXME: use length\n\n    return {\n        index: (data[0] - 1) / 6 + 1,\n        config: {\n            channel: data[2],\n            msg_type: data[6],\n            data: [data[10], data[14], data[18]],\n            active: data[22]\n        }\n    };\n}\n\n\nfunction getControlMode(data) {\n    return {\n        control_mode: data[1]\n    };\n}\n\n\nfunction getControlLED(data) {\n\n    // console.log(\"getControlLED\", hs(data));\n\n    // 0x40\t<data>-MIDICtrl\tStep 1: LED MIDI Ctrl\n    // 0x41\t<data>-Color\tStep 1: LED Active Color\n    // 0x42\t<data>-Color\tStep 1: LED Inactive Color\n    // 0x43\t<data>-LEDNum\tStep 1: LED num\n\n    let cfg = {steps:{}};\n\n    let data_len;\n    let bytes;\n    let step;\n\n    let i = 0;\n    while (i<data.length) {\n        let d = data[i];\n        if (i===0) {\n            step = \"\" + ((d - 0x40) / 4 + 1);\n        }\n        if (!(step in cfg.steps)) cfg.steps[step] = {};\n        switch (d) {\n            case 0x40:\n            case 0x44:\n            case 0x48:\n            case 0x4C:\n            case 0x50:\n            case 0x54:\n                i++;\n                data_len = data[i];\n                i++;\n                if (data_len === 1) {\n                    bytes = data[i];\n                } else {\n                    bytes = Array.from(data.slice(i, i + data_len));\n                }\n                i += data_len;\n                cfg.steps[step][\"led_midi_ctrl\"] = bytes;\n                break;\n            case 0x41:\n            case 0x45:\n            case 0x49:\n            case 0x4D:\n            case 0x51:\n            case 0x55:\n                i++;\n                data_len = data[i];\n                i++;\n                if (data_len === 1) {\n                    bytes = data[i];\n                } else {\n                    bytes = Array.from(data.slice(i, i + data_len));\n                }\n                i += data_len;\n                cfg.steps[step][\"led_active_color\"] = bytes;\n                break;\n            case 0x42:\n            case 0x46:\n            case 0x4A:\n            case 0x4E:\n            case 0x52:\n            case 0x56:\n                i++;\n                data_len = data[i];\n                i++;\n                if (data_len === 1) {\n                    bytes = data[i];\n                } else {\n                    bytes = Array.from(data.slice(i, i + data_len));\n                }\n                i += data_len;\n                cfg.steps[step][\"led_inactive_color\"] = bytes;\n                break;\n            case 0x43:\n            case 0x47:\n            case 0x4B:\n            case 0x4F:\n            case 0x53:\n            case 0x57:\n                i++;\n                data_len = data[i];\n                i++;\n                if (data_len === 1) {\n                    bytes = data[i];\n                } else {\n                    bytes = Array.from(data.slice(i, i + data_len));\n                }\n                i += data_len;\n                cfg.steps[step][\"led_num\"] = bytes;\n                break;\n            case 0x7F:\n                i = data.length;\n                break;\n            default:\n                // console.log(`getControlLED: ignore byte ${h(d)}`);\n                i++;\n                break;\n        }\n    }\n\n    return cfg;\n}\n\n\nfunction getMidiSetting(data) {\n\n    // console.log(\"getMidiSetting\", hs(data));\n\n    return {\n        index: (data[0] - 1) / 6 + 1,       // e.g.: 7 --> 1, ..., 0x2B 43 --> 8\n        config: {\n            channel: data[2],\n            msg_type: data[6],\n            data: [data[10], data[14], data[18]]\n        }\n    };\n}\n\n\nfunction getPresetName(data) {\n    const len = data[1];\n    return String.fromCharCode.apply(null, data.slice(2, 2 + len));\n}\n\n\n/**\n * Parse a single sysex message\n * @param data\n * @returns {*}\n */\nfunction parseSysexMessage(data) {\n\n    // console.log(\"parseSysex\", hs(data));\n\n    //TODO: verify checksum\n\n    const message = {};\n\n    let cmd = data[CMD];\n    let tgt = data[TGT];\n    let idx = data[IDX];\n    let obj = data[OBJ];\n\n    switch (cmd) {\n        case COMMAND_SET:\n            break;\n        case COMMAND_GET:\n            break;\n        default:\n            console.warn(`parseSysexMessage: invalid command (${h(cmd)})`);\n            return null;\n    }\n\n    if (!(tgt in TARGETS)) {\n        console.warn(\"parseSysexMessage: invalid target\", h(tgt), tgt, TARGETS);\n        return null;\n    }\n\n    message[tgt] = {};\n\n    if (idx >= 0x19 && idx <= 0x7E) {\n        console.warn(\"parseSysexMessage: invalid/ignored idx\", idx);\n    }\n\n    message[tgt][idx] = {};\n\n    if (!(obj in CONTROLS)) {\n        console.warn(\"parseSysexMessage: invalid/ignored object\", h(obj));\n        return null;\n    }\n\n    let obj_type;\n    if (obj === CONTROL_NAME) {\n        obj_type = \"name\";\n    } else if ((obj >= CONTROL_STOMPSWITCH_1 && obj <= CONTROL_STOMPSWITCH_6) ||\n        (obj >= CONTROL_STOMPSWITCH_A && obj <= CONTROL_FOOTSWITCH_4) ||\n        (obj >= CONTROL_EXPRESSION_PEDAL_1 && obj <= CONTROL_EXPRESSION_PEDAL_2)) {\n        obj_type = \"control\";\n    } else if (obj === CONTROL_MIDI) {\n        obj_type = \"midi\";\n    } else {\n        console.warn('parseSysexMessage: invalid obj', obj);\n        return null;\n    }\n\n    // console.log(`target=${TARGET[tgt]} (${h(tgt)}), idx=${h(idx)}, object=${OBJECT[obj]} (${h(obj)}), type=${obj_type}`);\n    // console.log(`${TARGETS[tgt]} ${h(idx)} : ${CONTROLS[obj]} ${obj_type}`);\n\n    if (obj_type === \"name\") {\n\n        // NAME\n        message[tgt][idx][\"name\"] = getPresetName(data.slice(ELM));\n\n    }\n\n    if (obj_type === \"control\") {\n\n        message[tgt][idx][\"controls\"] = {\n            [obj]: {\n                steps: {}\n            }\n        };\n\n        // which element?\n        let e = data[ELM];\n\n        // console.log(h(e));\n\n        if (e >= 0x01 && e <= 0x24) {\n\n            // STEPS\n            if (data.length > ELM+22) {\n                let s = getControlStep(data.slice(ELM, ELM + 23));\n                message[tgt][idx][\"controls\"][obj][\"steps\"][s.index] = s.config;\n            } else {\n                console.warn(`parseSysexMessage: data does not contains steps. data.length=${data.length}`, hs(data));\n            }\n\n        } else if (e === CONTROL_MODE_ELEMENT) {\n\n            // CONTROL MODE\n            // console.log('parseSysexMessage: CONTROL MODE');\n\n            let mode_cfg = getControlMode(data.slice(ELM, data.length-1));\n            message[tgt][idx][\"controls\"][obj] = mergeDeep(message[tgt][idx][\"controls\"][obj], mode_cfg);\n\n        } else if (e >= 0x40 && e <= 0x57) {\n\n            // LED\n            // console.log('parseSysexMessage: LED');\n\n            let led_cfg = getControlLED(data.slice(ELM, data.length-1));\n            message[tgt][idx][\"controls\"][obj] = mergeDeep(message[tgt][idx][\"controls\"][obj], led_cfg);\n\n        } else if (e === 0x7F) {\n\n            // ALL\n            // console.log('parseSysexMessage: ALL');\n\n        } else {\n            console.warn(`parseSysexMessage: unknown element: ${h(e)}`);\n            return null;\n        }\n\n    }\n\n    if (obj_type === \"midi\") {\n\n        message[tgt][idx][\"midi\"] = {};\n\n        // which element?\n        let e = data[ELM];\n\n        if (e >= 0x01 && e <= 0x60) {\n\n            // SETTINGS\n            if (data.length > ELM+19) {\n                let s = getMidiSetting(data.slice(ELM, ELM + 20));\n                message[tgt][idx][\"midi\"][s.index] = s.config;\n            } else {\n                console.warn(`parseSysexMessage: data does not contains steps. data.length=${data.length}`, hs(data));\n            }\n\n        } else {\n            console.warn(`parseSysexMessage: unknown element: ${h(e)}`);\n            return null;\n        }\n\n    }\n\n    // console.log('MESSAGE', message);\n    return message;\n\n} // parseSysex()\n\n\n/**\n * Parse a sysex dump. A dump can contains multiple sysex messages.\n * Return a array of presets.\n * @param data ArrayBuffer\n */\nfunction parseSysexDump(data) {\n\n    // console.log(\"parseSysexDump\", hs(data));\n\n    if (data === null) return null;\n\n    let presets = {};   // Collection of presets. The key is the preset's index. The value is the preset.\n    // let global = {};    // global conf\n\n    let i = 0;\n    let cont = true;\n    while (cont) {\n\n        i = data.indexOf(SYSEX_START, i);\n        if (i < 0) break;\n\n        i++;\n\n        let k = data.indexOf(SYSEX_END, i);\n\n        let manufacturer_id = (Array.from(data.slice(i, i+3)).map(n => h(n))).join(\" \");    // Array.from() is necessary to get a non-typed array\n        if (manufacturer_id !== NEKTAR_TECHNOLOGY_INC) {\n            console.log(\"parseSysexDump: file does not contain a Nektar Pacer patch\", i, k, manufacturer_id, \"-\", hs(data));\n            return null;\n        }\n\n        if (data[i+3] !== 0x7F) {\n            console.warn(`parseSysexDump: invalid byte after manufacturer id: ${data[i+1 +3]}`);\n            return null;\n        }\n\n        let config = parseSysexMessage(data.slice(i, k));  // data.slice(i, k) are the data between SYSEX_START and SYSEX_END\n\n        if (config) {\n            mergeDeep(presets, config);\n        }\n\n    } // while\n\n    // console.log(\"parseSysexDump\", JSON.stringify(presets));\n\n    return presets;\n}\n\n\nexport function checksum(bytes) {\n    if (bytes === null || bytes === undefined || bytes.length === 0) return 128;\n    let sum = Uint8Array.from(bytes).reduce((previousValue, currentValue) => previousValue + currentValue);\n    return 128 - (sum % 128);\n}\n\n/**\n * return the sysex message to send to the Pacer to request some data\n */\nexport function requestPreset(presetIndex) {\n    let msg = [\n        COMMAND_GET,\n        TARGET_PRESET,\n        presetIndex,\n        CONTROL_ALL\n    ];\n    let cs = checksum(msg);\n    msg.push(cs);\n    return SYSEX_HEADER.concat(msg);\n}\n\n/**\n * return the sysex message to send to the Pacer to request some data\n */\nexport function requestPresetObj(presetIndex, controlId) {\n\n    // To get the LED data, we need to request the complete preset config instead of just the specific control's config.\n    // return requestPreset(presetIndex);\n    let msg = [\n        COMMAND_GET,\n        TARGET_PRESET,\n        presetIndex,      // preset #\n        controlId         // (control)\n    ];\n    let cs = checksum(msg);\n    msg.push(cs);\n    return SYSEX_HEADER.concat(msg);\n}\n\n/**\n * Return an array of sysex messages to update a control's steps.\n * @param presetIndex\n * @param controlId\n * @param steps\n * @returns {*}\n */\nfunction buildControlStepSysex(presetIndex, controlId, steps) {\n\n    // console.log(`buildControlStepSysex(${presetIndex}, ${controlId}, ...)`);\n\n    let msgs = [];\n\n    for (let i of Object.keys(steps)) {\n\n        let step = steps[i];\n\n        if (!step.changed) continue;\n\n        // start with command and target:\n        let msg = [\n            COMMAND_SET,\n            TARGET_PRESET,\n            presetIndex,\n            controlId];\n\n        // add data:\n        msg.push((i-1)*6 + 1, 1, step.channel, 0x00);\n        msg.push((i-1)*6 + 2, 1, step.msg_type, 0x00);\n        msg.push((i-1)*6 + 3, 1, step.data[0], 0x00);\n        msg.push((i-1)*6 + 4, 1, step.data[1], 0x00);\n        msg.push((i-1)*6 + 5, 1, step.data[2], 0x00);\n        msg.push((i-1)*6 + 6, 1, step.active);\n\n        // LED\n        msg.push((i-1)*4 + 0x40, 1, step.led_midi_ctrl, 0x00);\n        msg.push((i-1)*4 + 0x41, 1, step.led_active_color, 0x00);\n        msg.push((i-1)*4 + 0x42, 1, step.led_inactive_color, 0x00);\n        msg.push((i-1)*4 + 0x43, 1, step.led_num, 0x00);\n\n        // add checksum:\n        msg.push(checksum(msg));\n\n        // inject header and add to list of messages:\n        msgs.push(SYSEX_HEADER.concat(msg));\n    }\n\n    // console.log(\"buildControlStepSysex\", msgs);\n\n    return msgs;\n}\n\nfunction buildControlModeSysex(presetIndex, controlId, mode) {\n\n    // console.log(`buildControlStepMode(${presetIndex}, ${controlId}, ...)`);\n\n    // start with command and target:\n    let msg = [\n        COMMAND_SET,\n        TARGET_PRESET,\n        presetIndex,\n        controlId,\n        CONTROL_MODE_ELEMENT,\n        0x01,   // 1 byte of data\n        mode\n    ];\n\n    // add checksum:\n    msg.push(checksum(msg));\n\n    // console.log(\"buildControlModeSysex\", msg);\n\n    // inject header and return the result:\n    return SYSEX_HEADER.concat(msg);\n}\n\n\nfunction getControlUpdateSysexMessages(presetIndex, controlId, data) {\n    let msgs = buildControlStepSysex(presetIndex, controlId, data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"steps\"]);\n    if (data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"changed\"]) {\n        msgs.push(buildControlModeSysex(presetIndex, controlId, data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"control_mode\"]));\n    }\n    return msgs;\n}\n\n\n\nfunction buildMidiSettingsSysex(presetIndex, settings) {\n\n    // console.log(`buildMidiSettingStepSysex(${presetIndex}, ...)`);\n\n    let msgs = [];\n\n    for (let i of Object.keys(settings)) {\n\n        let setting = settings[i];\n\n        if (!setting.changed) continue;\n\n        // start with command and target:\n        let msg = [\n            COMMAND_SET,\n            TARGET_PRESET,\n            presetIndex,\n            CONTROL_MIDI];\n\n        // add data:\n        msg.push((i-1)*6 + 1, 1, setting.channel, 0x00);\n        msg.push((i-1)*6 + 2, 1, setting.msg_type, 0x00);\n        msg.push((i-1)*6 + 3, 1, setting.data[0], 0x00);\n        msg.push((i-1)*6 + 4, 1, setting.data[1], 0x00);\n        msg.push((i-1)*6 + 5, 1, setting.data[2], 0x00);\n        msg.push((i-1)*6 + 6, 1, setting.active);\n\n        // add checksum:\n        msg.push(checksum(msg));\n\n        // inject header and add to list of messages:\n        msgs.push(SYSEX_HEADER.concat(msg));\n    }\n\n    // console.log(\"buildControlStepSysex\", msgs);\n\n    return msgs;\n}\n\n\nfunction buildPresetNameSysex(presetIndex, data) {\n\n    if (!data[TARGET_PRESET][presetIndex].changed) return null;\n\n    // start with command and target:\n    let msg = [\n        COMMAND_SET,\n        TARGET_PRESET,\n        presetIndex,\n        CONTROL_NAME,\n        0x00            // when setting the name this byte can be anything\n    ];\n\n    const s = data[TARGET_PRESET][presetIndex][\"name\"];\n\n    // add data:\n    msg.push(s.length);\n\n    for (let i=0; i < s.length; i++) {\n        msg.push(s.charCodeAt(i));\n    }\n\n    // add checksum:\n    msg.push(checksum(msg));\n\n    // inject header and return result:\n    return SYSEX_HEADER.concat(msg)\n}\n\n\nfunction getMidiSettingUpdateSysexMessages(presetIndex, data) {\n    return buildMidiSettingsSysex(presetIndex, data[TARGET_PRESET][presetIndex][\"midi\"]);\n}\n\n\nexport {\n    isSysexData,\n    parseSysexDump,\n    getControlUpdateSysexMessages,\n    getMidiSettingUpdateSysexMessages,\n    buildPresetNameSysex\n};\n\n","import WebMidi from \"webmidi\";\n\nfunction portById(id) {\n    let p = WebMidi.inputs.find(item => item.id === id);\n    if (p) {\n        return p;\n    } else {\n        return WebMidi.outputs.find(item => item.id === id);\n    }\n}\n\nfunction inputById(id) {\n    return WebMidi.inputs.find(item => item.id === id);\n}\n\nfunction outputById(id) {\n    return WebMidi.outputs.find(item => item.id === id);\n}\n\n/**\n * Return webmidi input name from input id\n * @param id\n */\nfunction inputName(id) {\n    let i = inputById(id);\n    return i ? i.name : null;\n}\n\nfunction outputName(id) {\n    let i = outputById(id);\n    return i ? i.name : null;\n}\n\n\nexport {\n    portById,\n    inputById,\n    inputName,\n    outputName,\n    outputById\n}\n","import React from \"react\";\nimport \"./DumpSysex.css\";\nimport {\n    MSG_SW_NOTE,\n    TARGET_PRESET,\n    MSG_TYPES, COLORS, CONTROLS_FULLNAME\n} from \"../pacer/constants\";\nimport {h, hs} from \"../utils/hexstring\";\nimport \"./DumpSysex.css\";\nimport * as Note from \"tonal-note\";\nimport {presetIndexToXY} from \"../pacer/utils\";\n\nconst PresetName = ({ name }) => {\n    return (\n        <div className=\"dump-preset-name\">Preset name: {name}</div>\n    );\n};\n\n\nconst MidiTable = ({ settings }) => {\n    if (settings === null || settings === undefined) return null;\n    return (\n        <div className=\"dump-control\">\n            <table>\n                <tbody>\n                <tr>\n                    <td colSpan={6} className=\"name\">MIDI settings</td>\n                </tr>\n                {Object.keys(settings).map(i => {\n                    let t = MSG_TYPES[settings[i][\"msg_type\"]];\n                    if (settings[i][\"msg_type\"] === MSG_SW_NOTE) {\n                        t = t + ' ' + Note.fromMidi(settings[i][\"data\"][0], true) + ' vel. ' + settings[i][\"data\"][1];\n                    }\n                    return (\n                        <tr key={i}>\n                            <td>settings {i}</td>\n                            <td>ch. {h(settings[i][\"channel\"])}</td>\n                            <td>msg {h(settings[i][\"msg_type\"])}</td>\n                            <td>{t}</td>\n                            <td>{hs(settings[i][\"data\"])}</td>\n                            {/*<td>{settings[i][\"msg_type\"] === MSG_SW_NOTE ? Note.fromMidi(settings[i][\"data\"][0], true) : \"  \"}</td>*/}\n                            <td>{settings[i][\"active\"] ? \"active\" : \"OFF\"}</td>\n                        </tr>\n                    )}\n                )}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nconst MidiSettings = ({ settings }) => {\n    if (settings === null) return null;\n    return (\n        <div>\n            <MidiTable settings={settings} />\n        </div>\n    );\n};\n\nconst ControlTable = ({ obj, config }) => {\n    if (config === null || config === undefined) return null;\n    return (\n        <div className=\"dump-control\">\n            <table>\n                <tbody>\n                    <tr>\n                        <td colSpan={10} className=\"name\">{CONTROLS_FULLNAME[obj]}</td>\n                    </tr>\n                    <tr>\n                        <th>step</th>\n                        <th>ch.</th>\n                        <th>type</th>\n                        <th>data</th>\n                        <th>decoded</th>\n                        <th>active</th>\n                        <th>LED num</th>\n                        <th>LED On</th>\n                        <th>LED Off</th>\n                        <th>LED midi</th>\n                    </tr>\n                    {Object.keys(config[\"steps\"]).map(i => {\n                        let t = MSG_TYPES[config[\"steps\"][i][\"msg_type\"]];\n                        if (config[\"steps\"][i][\"msg_type\"] === MSG_SW_NOTE) {\n                            t = t + ' ' + Note.fromMidi(config[\"steps\"][i][\"data\"][0], true) + ' vel. ' + config[\"steps\"][i][\"data\"][1];\n                        }\n                        const c0 = config[\"steps\"][i][\"led_inactive_color\"];\n                        const c1 = config[\"steps\"][i][\"led_active_color\"];\n                        return (\n                            <tr key={`${obj}.${i}`}>\n                                <td>{i}</td>\n                                <td>{h(config[\"steps\"][i][\"channel\"])}</td>\n                                <td>{h(config[\"steps\"][i][\"msg_type\"])}</td>\n                                <td>{hs(config[\"steps\"][i][\"data\"])}</td>\n                                <td>{t}</td>\n                                <td>{config[\"steps\"][i][\"active\"] ? \"active\" : \"OFF\"}</td>\n                                <td>{h(config[\"steps\"][i][\"led_num\"])}</td>\n                                <td>{c1 in COLORS ? COLORS[c1] : h(c1)}</td>\n                                <td>{c0 in COLORS ? COLORS[c0] : h(c0)}</td>\n                                <td>{h(config[\"steps\"][i][\"led_midi_ctrl\"])}</td>\n                            </tr>\n                        )}\n                    )}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nconst Controls = ({ controls }) => {\n    if (controls === null || controls === undefined) return null;\n    return (\n        <div className=\"dump-controls\">\n            {Object.keys(controls).map(obj => <ControlTable key={obj} obj={obj} config={controls[obj]} />)}\n        </div>\n    );\n};\n\nconst Preset = ({ index, data }) => {\n    if (data === null || data === undefined) return null;\n    return (\n        <div>\n            <h3>Preset {presetIndexToXY(parseInt(index, 10))} (#{index})</h3>\n            <PresetName name={data[\"name\"]} />\n            <Controls controls={data[\"controls\"]} />\n            <MidiSettings settings={data[\"midi\"]} />\n        </div>\n    );\n};\n\nconst Presets = ({ presets }) => {\n    if (presets === null || presets === undefined) return null;\n    return (\n        <div>\n            {Object.keys(presets).map(idx => <Preset key={idx} index={idx} data={presets[idx]} />)}\n        </div>\n    );\n};\n\nconst DumpSysex = ({ data }) => {\n    return (\n        <div className=\"dump code\">\n            {\n                // _.map(data, (value, key) => <Preset name={key} data={value} />)\n                data && <Presets presets={data[TARGET_PRESET]} />\n            }\n{/*\n            {\n                JSON.stringify(data, null, 4)\n            }\n*/}\n        </div>\n    );\n};\n\n\nexport default DumpSysex;\n","/**\n * Example: 23 => \"D5\"\n * @param index\n * @returns {string}\n */\nexport const presetIndexToXY = index => {\n    if (index === 0) return \"CUR\";\n    //TODO: check valid range\n    let b = Math.floor((index - 1) / 6);\n    let i = (index - 1) % 6 + 1;\n    return String.fromCharCode(b + 65) + i.toString();\n};\n/**\n * Exampe: \"D5\" => 23\n * @param xy\n * @returns {number}\n */\nexport const presetXYToIndex = xy => {\n    // if (xy === \"CUR\") return 0;\n    //TODO: check valid range\n    let bank = xy.charCodeAt(0) - 65;\n    let num = parseInt(xy[1], 10);\n    return bank * 6 + num;\n};\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport * as WebMidi from \"webmidi\";\nimport {inputById, portById} from \"../utils/ports\";\n\nconst propTypes = {\n    classname: PropTypes.string,\n    only: PropTypes.string,                 // regex applied to port.name\n    autoConnect: PropTypes.string,          // regex applied to port.name\n    inputRenderer: PropTypes.func,\n    outputRenderer: PropTypes.func,\n    onMidiInputEvent: PropTypes.func,\n    onMidiOutputEvent: PropTypes.func,\n    onInputConnection: PropTypes.func,      // callback with port.id as parameter\n    onOutputConnection: PropTypes.func,     // callback with port.id as parameter\n    onInputDisconnection: PropTypes.func,   // callback with port.id as parameter\n    onOutputDisconnection: PropTypes.func,  // callback with port.id as parameter\n    setOutput: PropTypes.func,              // callback with port.id as parameter\n    children: PropTypes.node\n};\n\nconst defaultProps = {\n    classname: '',\n    only: \".*\"\n};\n\n/**\n *\n * @param props\n * @constructor\n */\nexport default class Midi extends Component {\n\n    //TODO: allow specification of channel and message types to listen to\n\n    state = {\n        inputs: [],         // array of MIDI inputs (copied from WebMidi object)\n        outputs: [],        // array of MIDI outputs (copied from WebMidi object)\n        input: null,        // MIDI output port enabled\n        output: null,       // MIDI output port enabled\n    };\n\n    connectInput = port => {\n        if (this.props.onMidiInputEvent) {\n            if (port) {\n                if (port.hasListener('midimessage', 'all', this.props.onMidiInputEvent)) {\n                    console.warn(`Midi.connectInput: sysex messages on all channels listener already connected`);\n                } else {\n                    console.log(`Midi.connectInput: add listener for sysex messages on all channels`);\n                    port.addListener('midimessage', 'all', this.props.onMidiInputEvent);\n                    if (this.props.onInputConnection) {\n                        this.props.onInputConnection(port.id);\n                    }\n                }\n            }\n        }\n    };\n\n    disconnectInput = port => {\n        if (port) {\n            port.removeListener();\n            console.log(`disconnectInput: input ${port.id} disconnected`);\n            if (this.props.onInputDisconnection) {\n                this.props.onInputDisconnection(port.id);\n            }\n        }\n    };\n\n    connectOutput = port => {\n        if (port) {\n            this.setState({output: port.id});\n            console.log(`connectOutput: output ${port.id} connected`);\n            if (this.props.onOutputConnection) {\n                this.props.onOutputConnection(port.id);\n            }\n        }\n    };\n\n    disconnectOutput = () => {\n        if (this.state.output) {\n            let port_id = this.state.output;\n            this.setState({output: null});\n            console.log(`disconnectOutput: output ${port_id} disconnected`);\n            if (this.props.onOutputDisconnection) {\n                this.props.onOutputDisconnection(port_id);\n            }\n        }\n\n    };\n\n    autoConnectInput = () => {\n\n        if (this.props.autoConnect) {\n\n            console.log(`Midi.autoConnectInput: autoConnect ${this.props.autoConnect}`, this.state.inputs);\n\n            if (this.state.input === null) {\n\n                for (let port of this.state.inputs) {      //WebMidi.inputs) {\n\n                    console.log(`Midi.autoConnectInput: port ${port.name} ${port.id}`);\n\n                    if (port.type === 'input' && port.name.match(new RegExp(this.props.autoConnect, 'i'))) {\n\n                        console.log(`Midi.autoConnectInput: connect ${port.name}`);\n\n                        this.setState({input: port.id});\n\n                        this.connectInput(port);\n\n                        // if (port.hasListener('noteon', 'all', this.props.onMidiInputEvent)) {\n                        //     console.warn(`Midi.autoConnectInput: autoConnect: listener already connected`);\n                        // } else {\n                        //     console.log(`Midi.autoConnectInput: autoConnect: add listener`);\n                        //     port.addListener('noteon', 'all', this.props.onMidiInputEvent);\n                        // }\n                        break;\n                    }\n                }\n\n            } else {\n                console.log(`Midi.autoConnectInput: autoConnect skipped, already connected`);\n            }\n        }\n    };\n\n    autoConnectOutput = () => {\n\n        if (this.props.autoConnect) {\n\n            console.log(`Midi.autoConnectOutput: autoConnect ${this.props.autoConnect}`);\n\n            if (this.state.output === null) {\n\n                for (let port of this.state.outputs) {\n\n                    console.log(`Midi.autoConnectOutput: port ${port.name} ${port.id}`);\n\n                    if (port.type === 'output' && port.name.match(new RegExp(this.props.autoConnect, 'i'))) {\n\n                        console.log(`Midi.autoConnectOutput: autoConnect: auto-connect ${port.name}`);\n\n                        // this.setState({output: port.id});\n                        this.connectOutput(port);\n\n                        break;\n                    }\n                }\n\n            } else {\n                console.log(`Midi.autoConnectOutput: autoConnect skipped, already connected`);\n            }\n        }\n    };\n\n    registerInputs = () => {\n        const r = new RegExp(this.props.only, 'i');\n        console.log(`Midi.registerInputs matching /${this.props.only}/i`, WebMidi.inputs, WebMidi.inputs.filter(port => port.name.match(r)));\n        this.setState({ inputs: WebMidi.inputs.filter(port => port.name.match(r)) }, () => this.autoConnectInput());\n    };\n\n    registerOutputs = () => {\n        const r = new RegExp(this.props.only, 'i');\n        console.log(`Midi.registerOutputs matching /${this.props.only}/i`, WebMidi.outputs, WebMidi.outputs.filter(port => port.name.match(r)));\n        this.setState({ outputs: WebMidi.outputs.filter(port => port.name.match(r)) }, () => this.autoConnectOutput());\n    };\n\n    unRegisterInputs = () => {\n        console.log(\"Midi.unRegisterInputs\");\n        this.disconnectInput(portById(this.state.input));\n        this.setState({ inputs: [], input: null });\n    };\n\n    unRegisterOutputs = () => {\n        console.log(\"Midi.unRegisterOutputs\");\n        this.setState({ outputs: [], output: null });\n    };\n\n    handleMidiConnectEvent = e => {\n\n        console.group(`Midi: handleMidiConnectEvent: ${e.port.type} ${e.type}: ${e.port.name}`, e);\n\n        // TODO: is disconnect event, remove the existing input listeners\n        /*\n        if (e.type === \"disconnected\") {\n            // console.log(`must disconnect ${e.port} ${e.port.id}`);\n            this.disconnectInput(e.port.id);\n        }\n        */\n\n        if (e.port.name.match(new RegExp(this.props.only, 'i'))) {\n\n            if (e.port.type === 'input') {\n                // console.log(`ignore MIDI input connect event`);\n                console.log(\"Midi.handleMidiConnectEvent: call registerInputs\");\n                this.registerInputs();\n            }\n\n            if (e.port.type === 'output') {\n                console.log(\"Midi.handleMidiConnectEvent: call registerOutputs\");\n                this.registerOutputs();\n            }\n\n        } else {\n\n            console.log(`Midi.handleMidiConnectEvent: port ignored: ${e.port.name}`);\n\n        }\n\n        // Note: if we don't display the events, than the UI will not be updated if we don't update the state.\n\n        console.groupEnd();\n\n    };\n\n    togglePort = (port_id) => {\n        let p = portById(port_id);\n        if (p.type === 'input') {\n            console.log(\"toggle input\", port_id);\n            let prev = this.state.input;\n            if (this.state.input) {\n                this.disconnectInput(portById(this.state.input));\n                // this.setState({ input: null });\n            }\n            if (port_id !== prev) {\n                this.connectInput(inputById(port_id));\n                // this.setState({ input: port_id });\n            }\n            this.setState({ input: port_id === prev ? null : port_id });\n        } else {\n            console.log(\"toggle output\", port_id);\n            // There is nothing to \"connect\" for an output port since this type of port does not generate any event.\n            // if (this.state.output) this.disconnectOutput(this.state.output);\n            if (this.state.output) {\n                this.disconnectOutput();\n            } else {\n                this.connectOutput(portById(port_id));\n            }\n            // this.setState({ output: port_id === this.state.output ? null : port_id });\n        }\n    };\n\n    midiOn = err => {\n        if (err) {\n            console.warn(\"Midi.midiOn: WebMidi could not be enabled.\", err);\n        } else {\n            console.log(\"Midi.midiOn: WebMidi enabled\");\n            WebMidi.addListener(\"connected\", this.handleMidiConnectEvent);\n            WebMidi.addListener(\"disconnected\", this.handleMidiConnectEvent);\n\n            /*\n            if (WebMidi.hasListener(\"connected\", this.handleMidiConnectEvent)) {\n                console.log(\"MidiPorts.componentDidMount: handleMidiConnectEvent already set on 'connected' event\");\n            } else {\n                WebMidi.addListener(\"connected\", this.handleMidiConnectEvent);\n            }\n            if (WebMidi.hasListener(\"disconnected\", this.handleMidiConnectEvent)) {\n                console.log(\"MidiPorts.componentDidMount: handleMidiConnectEvent already set on 'disconnected' event\");\n            } else {\n                WebMidi.addListener(\"disconnected\", this.handleMidiConnectEvent);\n            }\n            */\n        }\n    };\n\n    componentDidMount() {\n        console.log(`Midi: component did mount: WebMidi.enabled=${WebMidi.enabled}`);\n        if (WebMidi.enabled) {\n            console.log(`Midi: component did mount: already enabled, register ports`);\n            this.registerInputs();\n            this.registerOutputs();\n        } else {\n            console.log(\"Midi: component did mount: Calling WebMidi.enable\");\n            WebMidi.enable(this.midiOn, true);  // true to enable sysex support\n        }\n    }\n\n    componentWillUnmount() {\n        console.log(\"Midi: component will unmount: unregister ports\");\n        this.unRegisterInputs();\n        this.unRegisterOutputs();\n    }\n\n    render() {\n\n        let {inputs, outputs} = this.state;\n\n        if (inputs.length === 0 && outputs.length === 0) {\n            return (\n                <div className={this.props.className}>\n                    {this.props.children}\n                </div>\n            );\n        } else {\n            return (\n                <div className={this.props.className}>\n                    {inputs.map(port => this.props.inputRenderer(port, port.id === this.state.input, this.togglePort))}\n                    {outputs.map(port => this.props.outputRenderer(port, port.id === this.state.output, this.togglePort))}\n                </div>\n            );\n        }\n    }\n\n}\n\nMidi.propTypes = propTypes;\nMidi.defaultProps = defaultProps;\n","import React, {Component} from \"react\";\nimport \"./MidiPort.css\";\nimport Switch from \"react-switch\";\n\nclass MidiPorts extends Component {\n\n    render() {\n\n        let port = this.props.port;\n        let isSelected = this.props.selected;\n        let clickHandler = this.props.clickHandler;\n\n        // console.log(\"MidiPort.render\", port.type, port.name, isSelected);\n\n        //TODO: display MIDI channel when connected\n        return (\n            <div key={port.id} className={isSelected ? `port ${port.type} enabled` : `port ${port.type}`}>\n                {/*<div className={\"port-description\"}>*/}\n                    <div className=\"port-type\">{port.type === 'input' ? 'IN' : 'OUT'}</div>\n                    <div className=\"port-name\">{port.name} </div>\n                    <div className=\"port-switch\">\n                        <Switch\n                            onChange={() => clickHandler(port.id)}\n                            checked={isSelected}\n                            className=\"react-switch\"\n                            id=\"normal-switch\"\n                            height={20} width={42}\n                        />\n                    </div>\n                {/*</div>*/}\n            </div>\n        );\n    }\n\n}\n\nexport default MidiPorts;\n","import React, {Component} from 'react';\nimport {checksum, isSysexData, mergeDeep, parseSysexDump, requestPreset, requestPresetObj} from \"../pacer/sysex\";\nimport {SYSEX_SIGNATURE} from \"../pacer/constants\";\nimport {outputById} from \"../utils/ports\";\nimport {fromHexString, h, hs} from \"../utils/hexstring\";\nimport \"./TestSender.css\";\nimport {produce} from \"immer\";\nimport DumpSysex from \"../components/DumpSysex\";\nimport {PACER_MIDI_PORT_NAME, SYSEX_HEADER} from \"../pacer/constants\";\nimport Midi from \"../components/Midi\";\nimport MidiPort from \"../components/MidiPort\";\n\n\nclass TestSender extends Component {\n\n    state = {\n        output: null,           // MIDI output port used for output\n        data: null,\n        messages: [{\n            name: \"read current preset\",\n            message: requestPreset(0)\n        }, {\n            name: \"read preset A1\",\n            message: requestPreset(1)\n        }, {\n            name: \"read stompswitch #1 of preset #5\",\n            message: requestPresetObj(5, 0x0D)\n        }],\n        customMessage: \"\"\n    };\n\n    updateCustomMessage = (event) => {\n        let s = (event.target.value.toUpperCase().match(/[0-9A-F ]+/g) || []).join('');\n        // let h = '';\n        // for (let i=0; i<s.length; i++) {\n        //     if ((i > 0) && (i % 2 === 0)) h += ' ';\n        //     h += s[i];\n        // }\n        this.setState({\n            customMessage: s\n        });\n    };\n\n    sendCustomMessage = () => {\n        let data = Array.from(fromHexString(this.state.customMessage, / /g));\n        if (data && data.length > 0) {\n            data.push(checksum(data));\n            this.sendSysex(SYSEX_HEADER.concat(data));\n        }\n    };\n\n    handleMidiInputEvent = (event) => {\n        // console.log(\"TestSender.handleMidiInputEvent\", event, event.data);\n        // if (event instanceof MIDIMessageEvent) {\n        if (isSysexData(event.data)) {\n            this.setState(\n                produce(draft => {\n                    draft.data = mergeDeep(draft.data || {}, parseSysexDump(event.data));\n                    // this.props.onBusy(false);\n                })\n            )\n        } else {\n            console.log(\"MIDI message is not a sysex message\")\n        }\n        // }\n    };\n\n    // debouncedMidi = debounce(handleMessage, 1000);\n\n/*\n    handleMidiInputEvent = debounce((event) => {\n        console.log(\"TestSender.handleMidiInputEvent\", event, event.data);\n        // if (event instanceof MIDIMessageEvent) {\n        if (isSysexData(event.data)) {\n            this.setState(\n                produce(draft => {\n                    draft.data = mergeDeep(draft.data || {}, parseSysexDump(event.data));\n                    // this.props.onBusy(false);\n                })\n            )\n        } else {\n            console.log(\"MIDI message is not a sysex message\")\n        }\n        // }\n    }, 1000);\n*/\n\n    renderPort = (port, selected, clickHandler) => {\n        if (port === undefined || port === null) return null;\n        return (\n            <MidiPort key={port.id} port={port} selected={selected} clickHandler={clickHandler} />\n        )\n    };\n\n    setOutput = (port_id) => {\n        this.setState({output: port_id});\n    };\n\n    sendSysex = msg => {\n        console.log(\"sendSysex\", msg);\n        if (!this.state.output) return;\n        let out = outputById(this.state.output);\n        if (!out) {\n            console.warn(`send: output ${this.state.output} not found`);\n            return;\n        }\n        this.setState(\n            {data: null},\n            () => out.sendSysex(SYSEX_SIGNATURE, msg)\n        );\n    };\n\n    sendMessage = (msg) => {\n        this.sendSysex(msg);\n    };\n\n    /**\n     * @returns {*}\n     */\n    render() {\n\n        const { data, messages, customMessage } = this.state;\n\n        const cs = checksum(fromHexString(customMessage, / /g));\n\n        return (\n            <div className=\"wrapper\">\n                <div className=\"content\">\n                    <div className=\"content-row step-1\">\n                        <div className=\"content-row-content row-middle-aligned\">\n                            <Midi only={PACER_MIDI_PORT_NAME} autoConnect={PACER_MIDI_PORT_NAME}\n                                  inputRenderer={this.renderPort} outputRenderer={this.renderPort}\n                                  onMidiInputEvent={this.handleMidiInputEvent}\n                                  onOutputConnection={this.setOutput}\n                                  className=\"sub-header\" >\n                                <div className=\"no-midi\">Please connect your Pacer to your computer.</div>\n                            </Midi>\n                        </div>\n                    </div>\n                    <div className=\"content-row step-2\">\n                        <div className=\"content-row-content\">\n                            <h2>Test messages:</h2>\n                            <div>\n                            {messages.map((msg, i) =>\n                                <div key={i} className=\"send-message\">\n                                    <button onClick={() => this.sendMessage(msg.message)}>send</button>\n                                    <span className=\"code light\">{ hs(SYSEX_SIGNATURE.concat(msg.message.slice(0, 1))) } </span>\n                                    <span className=\"code\">{ hs(msg.message.slice(1, -1)) } </span>\n                                    <span className=\"code light\"> {hs(msg.message.slice(-1))}</span>\n                                    <span className=\"message-name\"> {msg.name}</span>\n                                </div>\n                            )}\n                            </div>\n                            <h2>Custom message:</h2>\n                            <div>\n                                <div className=\"send-message\">\n                                    <button onClick={this.sendCustomMessage} disabled={customMessage.length === 0}>send</button>\n                                    <span className=\"code light\">{hs(SYSEX_SIGNATURE)} {hs(SYSEX_HEADER)} </span>\n                                    <input type=\"text\" className=\"code\" size=\"30\" value={customMessage}\n                                           placeholder={\"hex digits only\"} onChange={this.updateCustomMessage} />\n                                    <span className=\"code light\"> {h(cs)}</span>\n                                </div>\n                                <div className=\"custom-message code\">\n                                    {hs(SYSEX_SIGNATURE)} {hs(SYSEX_HEADER)} {hs(customMessage)} {h(cs)}\n                                </div>\n                            </div>\n\n                        </div>\n                    </div>\n                    <div className=\"content-row step-3\">\n                        <div className=\"content-row-content\">\n                            <h2>Response:</h2>\n                            <div className=\"message code\">\n                                {/*{data && JSON.stringify(data)}*/}\n                                <DumpSysex data={data} />\n                            </div>\n\n                            {data && <div className=\"debug\">\n                                <h4>[Debug] sysex data:</h4>\n                                <pre>{JSON.stringify(data, null, 4)}</pre>\n                            </div>}\n\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"help\">\n                    <h3>Help</h3>\n                </div>\n\n            </div>\n\n        );\n    }\n}\n\nexport default TestSender;\n","import React, {Fragment} from \"react\";\nimport \"./PresetSelector.css\";\nimport \"./selector.css\";\nimport {presetXYToIndex} from \"../pacer/utils\";\n\nconst Selector = ({ name, id, selected, onClick }) =>\n    <div className={selected ? \"selector selected\" : \"selector\"} onClick={() => onClick(id)}>{name}</div>;\n\nconst PresetSelector = ({ currentPreset, onClick }) =>\n    <Fragment>\n        <div className=\"preset-selectors\">\n            <Selector name={\"0\"} id={0} selected={0 === currentPreset} onClick={onClick} key={0} />\n        {\n            ['A', 'B', 'C', 'D'].map(\n                letter => {\n                    return (\n                        <Fragment key={letter}>\n                        {\n                            (letter !== 'A') && <div></div>\n                        }\n                        {\n                            Array.from(Array(6).keys()).map(\n                                digit => {\n                                    let name = letter + (digit + 1);\n                                    let id = presetXYToIndex(name);\n                                    return <Selector name={name} id={id} selected={id === currentPreset} onClick={onClick} key={id} />\n                                })\n                        }</Fragment>)\n                }\n            )\n        }\n        </div>\n    </Fragment>;\n\nexport default PresetSelector;\n","import React from \"react\";\nimport {FOOTSWITCHES, STOMPSWITCHES_TOP, STOMPSWITCHES_BOTTOM, EXPPEDALS, CONTROLS} from \"../pacer/constants\";\nimport \"./ControlSelector.css\";\n\nconst Control = ({ name, id, selected, onClick }) =>\n    <div className={selected ? \"selector selected\" : \"selector\"} onClick={() => onClick(id)}>\n        <div className=\"name\">{name}</div>\n    </div>;\n\n\nconst ControlSelector = ({ currentControl, onClick }) =>\n    <div className=\"controls\">\n        {\n            FOOTSWITCHES.map(\n                key => <Control key={key} name={CONTROLS[key]} id={key} selected={key === currentControl} onClick={onClick} />\n            )\n        }\n        {\n            EXPPEDALS.map(\n                key => <Control key={key} name={CONTROLS[key]} id={key} selected={key === currentControl} onClick={onClick} />\n            )\n        }\n        <div className=\"no-control\">&nbsp;</div>\n        {\n            STOMPSWITCHES_TOP.map(\n                key => <Control key={key} name={CONTROLS[key]} id={key} selected={key === currentControl} onClick={onClick} />\n            )\n        }\n        <div className=\"no-control\">&nbsp;</div>\n        {\n            STOMPSWITCHES_BOTTOM.map(\n                key => <Control key={key} name={CONTROLS[key]} id={key} selected={key === currentControl} onClick={onClick} />\n            )\n        }\n    </div>;\n\n\nexport default ControlSelector;\n","import React, {Component, Fragment} from 'react';\nimport {\n    COLORS,\n    MSG_CTRL_OFF,\n    MSG_SW_NOTE,\n    MSG_SW_NOTE_TGGLE, MSG_TYPES_DATA_HELP,\n    MSG_TYPES_FULLNAME_SW,\n    MSG_TYPES_FULLNAME_SW_SORTED\n} from \"../pacer/constants\";\nimport * as Note from \"tonal-note\";\nimport \"./ControlStepsEditor.css\";\n\nconst LEDMidi = ({ current_value, onChange }) => {\n    return (\n        <select defaultValue={current_value} onChange={(event) => onChange(event.target.value)}>\n            <option value=\"0\">0</option>\n            <option value=\"1\">1</option>\n        </select>\n    );\n};\n\nconst LEDColor = ({ current_value, onChange }) => {\n    // console.log(\"LEDColor\", current_value, typeof current_value);\n    return (\n        <select defaultValue={current_value} onChange={(event) => onChange(event.target.value)}>\n            {\n                Object.keys(COLORS).map(\n                    key => {\n                        return <option key={key} value={key}>{COLORS[key]}</option>\n                    })\n            }\n        </select>\n    );\n};\n\nconst LEDNum = ({ current_value, onChange }) => {\n    return (\n        <select defaultValue={current_value} onChange={(event) => onChange(event.target.value)}>\n            <option value=\"0\">default</option>\n            <option value=\"3\">top</option>\n            <option value=\"2\">middle</option>\n            <option value=\"1\">bottom</option>\n        </select>\n    );\n};\n\nconst MidiNote = ({ note, onChange }) => {\n    return (\n        <select onChange={(event) => onChange(event.target.value)} defaultValue={note}>\n            {\n                Array.from(Array(127).keys()).map(\n                    i => {\n                        let n = Note.fromMidi(i, true);\n                        return <option key={i} value={i}>{n}</option>\n                    })\n            }\n        </select>\n    );\n};\n\nconst Step = ({ index, config, updateCallback }) => {\n\n    // console.log(\"Step\", index, config.msg_type, config);\n\n    let inactive = config.msg_type === MSG_CTRL_OFF;\n\n    if (inactive) {\n        return (\n            <Fragment>\n                <div className=\"step-row-header\">Step {index}:</div>\n                <div>\n                    <select onChange={(event) => updateCallback(\"msg_type\", null, event.target.value)} defaultValue={config.msg_type}>\n                        {\n                            Object.keys(MSG_TYPES_FULLNAME_SW).map(\n                                key => {\n                                    return <option key={key} value={key}>{MSG_TYPES_FULLNAME_SW[key]}</option>\n                                })\n                        }\n                    </select>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n            </Fragment>\n        );\n    }\n\n    let d0, d1, d2;\n    if ((config.msg_type === MSG_SW_NOTE) || (config.msg_type === MSG_SW_NOTE_TGGLE)) {\n        d0 = <MidiNote note={config.data[0]} onChange={(value) => updateCallback(\"data\", 0, value)} />;\n        d1 = <input type=\"text\" value={config.data[1]} onChange={(event) => updateCallback(\"data\", 1, event.target.value)} />;\n        d2 = '';\n    } else {\n        d0 = <input type=\"text\" value={config.data[0]} onChange={(event) => updateCallback(\"data\", 0, event.target.value)} />;\n        d1 = <input type=\"text\" value={config.data[1]} onChange={(event) => updateCallback(\"data\", 1, event.target.value)} />;\n        d2 = <input type=\"text\" value={config.data[2]} onChange={(event) => updateCallback(\"data\", 2, event.target.value)} />;\n    }\n\n    return (\n        <Fragment>\n            <div className=\"step-row-header\">Step {index}:</div>\n            <div>\n                <select onChange={(event) => updateCallback(\"msg_type\", null, event.target.value)} defaultValue={config.msg_type}>\n                {\n                    MSG_TYPES_FULLNAME_SW_SORTED.map(\n                        v => {\n                            return <option key={v.key} value={v.key}>{v.value}</option>\n                        })\n                }\n                </select>\n            </div>\n            <div>{d0}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][0]}</div></div>\n            <div>{d1}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][1]}</div></div>\n            <div>{d2}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][2]}</div></div>\n            <div>\n                <LEDColor current_value={config.led_inactive_color} onChange={(value) => updateCallback(\"led_inactive_color\", null, value)} />\n            </div>\n            <div>\n                <LEDColor current_value={config.led_active_color} onChange={(value) => updateCallback(\"led_active_color\", null, value)} />\n            </div>\n            <div>\n                <LEDNum current_value={config.led_num} onChange={(value) => updateCallback(\"led_num\", null, value)} />\n            </div>\n            <div>\n                <LEDMidi current_value={config.led_midi_ctrl} onChange={(value) => updateCallback(\"led_midi_ctrl\", null, value)} />\n            </div>\n            <div>\n                <select onChange={(event) => updateCallback(\"channel\", null, event.target.value)} defaultValue={config.channel}>\n                    {\n                        Array.from(Array(16).keys()).map(i => <option key={i} value={i}>{i}</option>)\n                    }\n                </select>\n            </div>\n        </Fragment>\n    );\n};\n\nclass ControlStepsEditor extends Component {\n\n    onStepUpdate = (stepIndex, dataType, dataIndex, value) => {\n        // console.log(`ControlStepsEditor.onStepUpdate`, stepIndex, dataType, dataIndex, value);\n        this.props.onUpdate(stepIndex, dataType, dataIndex, value);    // stepIndex, dataIndex, value\n    };\n\n    render() {\n\n        const steps = this.props.steps;\n\n        // console.log(\"ControlStepsEditor.render\", this.props.controlId, steps);\n\n        return (\n            <div className=\"steps\">\n                <div></div>\n                <div className=\"step-col-header\">Type</div>\n                <div className=\"step-col-header\">Data 1</div>\n                <div className=\"step-col-header\">Data 2</div>\n                <div className=\"step-col-header\">Data 3</div>\n                <div className=\"step-col-header\">LED Off</div>\n                <div className=\"step-col-header\">LED On</div>\n                <div className=\"step-col-header\">LED Num</div>\n                <div className=\"step-col-header\">LED MIDI</div>\n                <div className=\"step-col-header\">MIDI Ch.</div>\n                {Object.keys(steps).map(i =>\n                    <Step key={i} index={i} config={steps[i]} updateCallback={(dataType, dataIndex, value) => this.onStepUpdate(i, dataType, dataIndex, value)} />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default ControlStepsEditor;\n","import React, {Component} from \"react\";\nimport {CONTROL_MODES} from \"../pacer/constants\";\nimport\"./ControlModeEditor.css\";\n\nclass ControlModeEditor extends Component {\n\n    render() {\n        return (\n            <div className=\"control-mode\">\n                <span className=\"step-row-header\">Control mode:</span>\n                <select onChange={(event) => this.props.onUpdate(event.target.value)} defaultValue={this.props.mode}>\n                    {\n                        Object.keys(CONTROL_MODES).map(\n                            key => {\n                                return <option key={key} value={key}>{CONTROL_MODES[key]}</option>\n                            })\n                    }\n                </select>\n            </div>\n        );\n    }\n\n}\n\nexport default ControlModeEditor;\n","import React from \"react\";\nimport \"./Status.css\";\n\nconst Status = ({ messages }) =>\n    <div className=\"status\">\n        {\n            messages.map(\n                (msg, i) => <div key={i} className={`status-${msg.type}`}>{msg.message}</div>\n            )\n        }\n    </div>;\n\n\nexport default Status;\n","import React, {Component} from 'react';\n\nclass PresetNameEditor extends Component {\n\n    onNameUpdate = (event) => {\n        console.log(`PresetNameEditor.onSettingUpdate`, event.target.value);\n        this.props.onUpdate(event.target.value.length > 5 ? event.target.value.substr(0, 5) : event.target.value);\n    };\n\n    render() {\n        const name = this.props.name;\n        return (\n            <div className=\"preset-name\">\n                <p>The preset name is limited to 5 characters.</p>\n                <span className=\"strong\">Name:</span> <input value={name} onChange={this.onNameUpdate} size={8} />\n            </div>\n        );\n    }\n}\n\nexport default PresetNameEditor;\n","import React, {Component, Fragment} from 'react';\nimport PresetSelector from \"../components/PresetSelector\";\nimport {\n    buildPresetNameSysex,\n    getControlUpdateSysexMessages,\n    isSysexData,\n    mergeDeep,\n    parseSysexDump, requestPreset\n} from \"../pacer/sysex\";\nimport ControlSelector from \"../components/ControlSelector\";\nimport {\n    CONTROLS_FULLNAME,\n    MSG_CTRL_OFF,\n    PACER_MIDI_PORT_NAME,\n    SYSEX_SIGNATURE,\n    TARGET_PRESET\n} from \"../pacer/constants\";\nimport {hs} from \"../utils/hexstring\";\nimport {produce} from \"immer\";\nimport {inputName, outputById, outputName} from \"../utils/ports\";\nimport ControlStepsEditor from \"../components/ControlStepsEditor\";\nimport Midi from \"../components/Midi\";\nimport MidiPort from \"../components/MidiPort\";\nimport Dropzone from \"react-dropzone\";\nimport \"./Preset.css\";\nimport ControlModeEditor from \"../components/ControlModeEditor\";\nimport Status from \"../components/Status\";\nimport PresetNameEditor from \"../components/PresetNameEditor\";\n\nconst MAX_FILE_SIZE = 5 * 1024*1024;\n\nconst MAX_STATUS_MESSAGES = 40;\n\nfunction isVal(v) {\n    return v !== undefined && v !== null && v !== '';\n}\n\nfunction batchMessages(callback, wait) {\n\n    let messages = [];  // batch of received messages\n\n    let timeout;\n\n    return function() {\n\n        // first, reset the timeout\n        clearTimeout(timeout);\n\n        let event = arguments[0];\n\n        messages.push(event.data);\n\n        timeout = setTimeout(() => {\n            console.log(\"timeout elapsed\", messages.length);\n            timeout = null;\n            callback(messages);\n            messages = [];\n        }, wait);\n    };\n\n}\n\nclass Preset extends Component {\n\n    state = {\n        output: null,       // MIDI output port used for output\n        presetIndex: null,\n        controlId: null,\n        changed: false,     // true when the control has been edited\n        data: null,\n        statusMessages: []\n    };\n\n    /**\n     * Ad-hoc method to show the busy flag and set a timeout to make sure the busy flag is hidden after a timeout.\n     */\n    showBusy = () =>  {\n        // let context = this;\n        setTimeout(() => this.props.onBusy(false), 20000);\n        this.props.onBusy(true);\n    };\n\n    addStatusMessage = (type, message) => {\n        this.setState(\n            produce(draft => {\n                let m = { type, message };\n                let len = draft.statusMessages.push(m);\n                if (len > MAX_STATUS_MESSAGES) draft.statusMessages.shift();\n            })\n        );\n    };\n\n    addInfoMessage= message => {\n        this.addStatusMessage(\"info\", message);\n    };\n\n    addWarningMessage= message => {\n        this.addStatusMessage(\"warning\", message);\n    };\n\n    addErrorMessage= message => {\n        this.addStatusMessage(\"error\", message);\n    };\n\n    handleMidiInputEvent = batchMessages(\n        messages => {\n            // console.log(\"handleMidiInputEvent enter\", messages.length);\n            this.setState(\n                produce(\n                    draft => {\n\n                        for (let m of messages) {\n                            if (isSysexData(m)) {\n                                draft.data = mergeDeep(draft.data || {}, parseSysexDump(m));\n                            } else {\n                                console.log(\"MIDI message is not a sysex message\")\n                            }\n                        }\n\n                        // When requesting a config via MIDI (and not via a file drag&drop), we do not\n                        // update the preset and control ID from the MIDI sysex received.\n                        // This is important because to get the LED data we need to request the complete\n                        // preset data instead of just the selected control's config.\n\n                        // let pId = Object.keys(draft.data[TARGET_PRESET])[0];\n                        // draft.presetIndex = parseInt(pId, 10);\n                        // draft.controlId = parseInt(Object.keys(draft.data[TARGET_PRESET][pId][\"controls\"])[0], 10);\n                    }\n                )\n            );\n            let bytes = messages.reduce((accumulator, element) => accumulator + element.length, 0);\n            this.addInfoMessage(`${messages.length} messages received (${bytes} bytes)`);\n            this.props.onBusy(false);\n        },\n        1000\n    );\n\n    /**\n     *\n     * @param files\n     * @returns {Promise<void>}\n     */\n    async readFiles(files) {\n        await Promise.all(files.map(\n            async file => {\n                if (file.size > MAX_FILE_SIZE) {\n                    console.warn(`readFiles: ${file.name}: file too big, ${file.size}`);\n                    this.addWarningMessage(\"file too big\");\n                } else {\n                    this.showBusy();\n                    const data = new Uint8Array(await new Response(file).arrayBuffer());\n                    if (isSysexData(data)) {\n                        this.setState(\n                            produce(draft => {\n                                // draft.data = mergeDeep(draft.data || {}, parseSysexDump(data));\n                                draft.data = parseSysexDump(data);\n                                let pId = Object.keys(draft.data[TARGET_PRESET])[0];\n                                let cId = Object.keys(draft.data[TARGET_PRESET][pId][\"controls\"])[0];\n                                draft.presetIndex = parseInt(pId, 10);\n                                draft.controlId = parseInt(cId, 10);\n                            })\n                        );\n                        this.addInfoMessage(\"sysfile decoded\");\n                    } else {\n                        this.addWarningMessage(\"not a sysfile\");\n                        console.log(\"readFiles: not a sysfile\", hs(data.slice(0, 5)));\n                    }\n                    this.props.onBusy(false);\n                    // non sysex files are ignored\n                }\n                // too big files are ignored\n            }\n        ));\n    }\n\n    /**\n     * Drop Zone handler\n     * @param files\n     */\n    onDrop = (files) => {\n        console.log('drop', files);\n        this.setState(\n            {\n                data: null,\n                changed: false\n            },\n            () => {this.readFiles(files)}   // returned promise from readFiles() is ignored, this is normal.\n        );\n    };\n\n    selectPreset = (id) => {\n        // if the user selects another preset or control, then clear the data in the state\n        this.setState(\n            produce(draft => {\n                draft.presetIndex = id;\n                if (id !== this.state.presetIndex) {\n                    draft.data = null;\n                    draft.changed = false;\n                }\n            })\n        );\n        if (isVal(id) && this.state.controlId) {\n            // this.sendSysex(requestPresetObj(id, this.state.controlId));\n            // To get the LED data, we need to request the complete preset config instead of just the specific control's config.\n            this.sendSysex(requestPreset(id));\n        }\n    };\n\n    selectControl = (id) => {\n        // if the user selects another preset or control, then clear the data in the state\n        this.setState(\n            produce(draft => {\n                draft.controlId = id;\n                if (id !== this.state.controlId) {\n                    draft.data = null;\n                    draft.changed = false;\n                }\n            })\n        );\n        if (isVal(this.state.presetIndex) && id) {\n            // this.sendSysex(requestPresetObj(this.state.presetIndex, id));\n            // To get the LED data, we need to request the complete preset config instead of just the specific control's config.\n            this.sendSysex(requestPreset(this.state.presetIndex));\n        }\n    };\n\n    /**\n     * dataIndex is only used when dataType == \"data\"\n     */\n    updateControlStep = (controlId, stepIndex, dataType, dataIndex, value) => {\n        // console.log(\"Presets.updateControlStep\", controlId, stepIndex, dataIndex, value);\n        let v = parseInt(value, 10);\n        this.setState(\n            produce(draft => {\n                if (dataType === \"data\") {\n                    draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"steps\"][stepIndex][\"data\"][dataIndex] = v;\n                } else {\n                    draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"steps\"][stepIndex][dataType] = v;\n                }\n                if (dataType === \"msg_type\") {\n                    if (v === MSG_CTRL_OFF) {\n                        draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"steps\"][stepIndex][\"active\"] = 0;\n                    } else {\n                        draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"steps\"][stepIndex][\"active\"] = 1;\n                    }\n                }\n                draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"steps\"][stepIndex][\"changed\"] = true;\n                draft.changed = true;\n            })\n        );\n    };\n\n    /**\n     * dataIndex is only used when dataType == \"data\"\n     */\n    updateControlMode = (controlId, value) => {\n        // console.log(\"Presets.updateControlMode\", controlId, value);\n        let v = parseInt(value, 10);\n        this.setState(\n            produce(draft => {\n                draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"control_mode\"] = v;\n                draft.data[TARGET_PRESET][draft.presetIndex][\"controls\"][controlId][\"changed\"] = true;\n                draft.changed = true;\n            })\n        );\n    };\n\n    updatePresetName = (name) => {\n        console.log(\"Presets.updateName\", name);\n        if (name === undefined || name === null) return;\n        if (name.length > 5) {\n            console.warn(`Presets.updateName: name too long: ${name}`);\n            return;\n        }\n        this.setState(\n            produce(draft => {\n                draft.data[TARGET_PRESET][draft.presetIndex][\"name\"] = name;    // TODO : buld update message\n                draft.data[TARGET_PRESET][draft.presetIndex][\"changed\"] = true;\n                draft.changed = true;\n            })\n        );\n    };\n\n    renderPort = (port, selected, clickHandler) => {\n        if (port === undefined || port === null) return null;\n        return (\n            <MidiPort key={port.id} port={port} selected={selected} clickHandler={clickHandler} />\n        )\n    };\n\n    onInputConnection = (port_id) => {\n        this.addInfoMessage(`input ${inputName(port_id)} connected`);\n    };\n\n    onInputDisconnection = (port_id) => {\n        this.addInfoMessage(`input ${inputName(port_id)} disconnected`);\n    };\n\n    onOutputConnection = (port_id) => {\n        this.setState(\n            produce(draft => {\n                draft.output = port_id;\n            })\n        );\n        this.addInfoMessage(`output ${outputName(port_id)} connected`);\n    };\n\n    onOutputDisconnection = (port_id) => {\n        this.addInfoMessage(`output ${outputName(port_id)} disconnected`);\n    };\n\n    sendSysex = msg => {\n        console.log(\"sendSysex\", msg);\n        if (!this.state.output) {\n            console.warn(\"no output enabled to send the message\");\n            return;\n        }\n        let out = outputById(this.state.output);\n        if (!out) {\n            console.warn(`send: output ${this.state.output} not found`);\n            return;\n        }\n        this.showBusy();\n        out.sendSysex(SYSEX_SIGNATURE, msg);\n    };\n\n    updatePacer = (messages) => {\n        console.log(\"PresetMidi.updatePacer\");\n        for (let m of messages) {\n            this.sendSysex(m);\n        }\n        this.addInfoMessage(`update${messages.length > 1 ? 's' : ''} sent to Pacer`);\n    };\n\n    render() {\n\n        const { presetIndex, controlId, data, changed } = this.state;\n\n        let showEditor = false;\n\n        if (data) {\n\n            showEditor = true;\n\n            if (!(TARGET_PRESET in data)) {\n                console.log(`Presets: invalid data`, data);\n                showEditor = false;\n            }\n\n            if (showEditor && !(presetIndex in data[TARGET_PRESET])) {\n                console.log(`Presets: preset ${presetIndex} not found in data`);\n                showEditor = false;\n            }\n\n            if (showEditor && !(\"controls\" in data[TARGET_PRESET][presetIndex])) {\n                console.log(`Presets: controls not found in data`);\n                showEditor = false;\n            }\n\n            if (showEditor && !(controlId in data[TARGET_PRESET][presetIndex][\"controls\"])) {\n                console.log(`Presets: control ${controlId} not found in data`);\n                showEditor = false;\n            }\n\n            if (showEditor && !(\"steps\" in data[TARGET_PRESET][presetIndex][\"controls\"][controlId])) {\n                console.log(`Presets: steps not found in data`);\n                showEditor = false;\n            }\n\n        }\n\n        showEditor = showEditor && (Object.keys(data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"steps\"]).length === 6);\n\n        let updateMessages = [];\n        if (showEditor) {\n            updateMessages = getControlUpdateSysexMessages(presetIndex, controlId, data);\n            let n = buildPresetNameSysex(presetIndex, data);\n            if (n) {\n                updateMessages.push(n);\n            }\n        }\n\n        // console.log(\"Presets.render\", showEditor, presetIndex, controlId);\n\n        return (\n            <div className=\"wrapper\">\n                <div className=\"content\">\n\n                    <div className=\"content-row step-1\">\n                        <div className=\"content-row-content row-middle-aligned\">\n                            <Midi only={PACER_MIDI_PORT_NAME} autoConnect={PACER_MIDI_PORT_NAME}\n                                  inputRenderer={this.renderPort} outputRenderer={this.renderPort}\n                                  onMidiInputEvent={this.handleMidiInputEvent}\n                                  onInputConnection={this.onInputConnection}\n                                  onInputDisconnection={this.onInputDisconnection}\n                                  onOutputConnection={this.onOutputConnection}\n                                  onOutputDisconnection={this.onOutputDisconnection}\n                                  className=\"sub-header\" >\n                                <div className=\"no-midi\">Please connect your Pacer to your computer.</div>\n                            </Midi>\n                        </div>\n                    </div>\n                    <div className=\"content-row step-2\">\n                        <div className=\"content-row-content\">\n\n                            <h2>Select preset and control:</h2>\n\n                            <div className=\"selectors\">\n\n                                <PresetSelector currentPreset={presetIndex} onClick={this.selectPreset} />\n\n                                {isVal(presetIndex) && <ControlSelector currentControl={controlId} onClick={this.selectControl} />}\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"content-row step-3\">\n                        <div className=\"content-row-content\">\n                            {showEditor &&\n                            <Fragment>\n\n                                <h2>Preset name:</h2>\n                                <PresetNameEditor name={data[TARGET_PRESET][presetIndex][\"name\"]}\n                                                  onUpdate={(name) => this.updatePresetName(name)} />\n\n                                <h2>{CONTROLS_FULLNAME[controlId]}:</h2>\n                                <ControlStepsEditor controlId={controlId}\n                                                    steps={data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"steps\"]}\n                                                    onUpdate={(stepIndex, dataType, dataIndex, value) => this.updateControlStep(controlId, stepIndex, dataType, dataIndex, value)} />\n                                <ControlModeEditor controlId={controlId}\n                                                   mode={data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"control_mode\"]}\n                                                   onUpdate={(value) => this.updateControlMode(controlId, value)} />\n                            </Fragment>\n                            }\n                        </div>\n                    </div>\n\n                    <div className=\"content-row step-4\">\n                        <div className=\"content-row-content\">\n                            {changed &&\n                            <Fragment>\n                                <h2>Send the updated config to the Pacer:</h2>\n                                <div className=\"actions\">\n                                    <button className=\"update\" onClick={() => this.updatePacer(updateMessages)}>Update Pacer</button>\n                                </div>\n                            </Fragment>\n                            }\n                        </div>\n                    </div>\n\n                    <div>\n                        {showEditor && <div className=\"debug\">\n                            <h4>[Debug] Update messages to send:</h4>\n                            <div className=\"message-to-send\">\n                                {updateMessages.map((m, i) => <div key={i} className=\"code\">{hs(m)}</div>)}\n                            </div>\n                        </div>}\n{/*\n                        {data && <div className=\"debug\">\n                            <h4>[Debug] sysex data for the control's steps:</h4>\n                            <pre>{JSON.stringify(data[TARGET_PRESET][presetIndex][\"controls\"][controlId][\"steps\"], null, 4)}</pre>\n                        </div>}\n*/}\n                    </div>\n                </div>\n\n                <div className=\"help\">\n\n                    <Dropzone onDrop={this.onDrop} className=\"drop-zone\">\n                        Drop a binary sysex file here<br />or click to open the file dialog\n                    </Dropzone>\n\n                    <h3>Log:</h3>\n                    <Status messages={this.state.statusMessages} />\n\n                </div>\n\n            </div>\n        );\n    }\n\n}\n\nexport default Preset;\n","export const MESSAGE = {\n    0x80: \"Note Off\",\n    0x90: \"Note On\",\n    0xA0: \"AfterTouch\",\n    0xB0: \"Control Change\",\n    0xC0: \"Program Change\",\n    0xD0: \"Channel Pressure\",\n    0xE0: \"Pitch Wheel\"\n};\n\nexport const CONTROLER = {\n    0: \"Bank Select (coarse)\",\n    1: \"Modulation Wheel (coarse)\",\n    2: \"Breath controller (coarse)\",\n    4: \"Foot Pedal (coarse)\",\n    5: \"Portamento Time (coarse)\",\n    6: \"Data Entry (coarse)\",\n    7: \"Volume (coarse)\",\n    8: \"Balance (coarse)\",\n    10: \"Pan position (coarse)\",\n    11: \"Expression (coarse)\",\n    12: \"Effect Control 1 (coarse)\",\n    13: \"Effect Control 2 (coarse)\",\n    16: \"General Purpose Slider 1\",\n    17: \"General Purpose Slider 2\",\n    18: \"General Purpose Slider 3\",\n    19: \"General Purpose Slider 4\",\n    32: \"Bank Select (fine)\",\n    33: \"Modulation Wheel (fine)\",\n    34: \"Breath controller (fine)\",\n    36: \"Foot Pedal (fine)\",\n    37: \"Portamento Time (fine)\",\n    38: \"Data Entry (fine)\",\n    39: \"Volume (fine)\",\n    40: \"Balance (fine)\",\n    42: \"Pan position (fine)\",\n    43: \"Expression (fine)\",\n    44: \"Effect Control 1 (fine)\",\n    45: \"Effect Control 2 (fine)\",\n    64: \"Hold Pedal (on/off)\",\n    65: \"Portamento (on/off)\",\n    66: \"Sustenuto Pedal (on/off)\",\n    67: \"Soft Pedal (on/off)\",\n    68: \"Legato Pedal (on/off)\",\n    69: \"Hold 2 Pedal (on/off)\",\n    70: \"Sound Variation\",\n    71: \"Sound Timbre\",\n    72: \"Sound Release Time\",\n    73: \"Sound Attack Time\",\n    74: \"Sound Brightness\",\n    75: \"Sound Control 6\",\n    76: \"Sound Control 7\",\n    77: \"Sound Control 8\",\n    78: \"Sound Control 9\",\n    79: \"Sound Control 10\",\n    80: \"General Purpose Button 1 (on/off)\",\n    81: \"General Purpose Button 2 (on/off)\",\n    82: \"General Purpose Button 3 (on/off)\",\n    83: \"General Purpose Button 4 (on/off)\",\n    91: \"Effects Level\",\n    92: \"Tremulo Level\",\n    93: \"Chorus Level\",\n    94: \"Celeste Level\",\n    95: \"Phaser Level\",\n    96: \"Data Button increment\",\n    97: \"Data Button decrement\",\n    98: \"Non-registered Parameter (fine)\",\n    99: \"Non-registered Parameter (coarse)\",\n    100: \"Registered Parameter (fine)\",\n    101: \"Registered Parameter (coarse)\",\n    120: \"All Sound Off\",\n    121: \"All Controllers Off\",\n    122: \"Local Keyboard (on/off)\",\n    123: \"All Notes Off\",\n    124: \"Omni Mode Off\",\n    125: \"Omni Mode On\",\n    126: \"Mono Operation\",\n    127: \"Poly Operation\"\n};\n","import React, {Component} from 'react';\nimport Midi from \"../components/Midi\";\nimport {produce} from \"immer\";\nimport MidiPort from \"../components/MidiPort\";\nimport parseMidi from 'parse-midi';\nimport {hs} from \"../utils/hexstring\";\nimport {CONTROLER, MESSAGE} from \"../utils/midi\";\nimport * as Note from \"tonal-note\";\nimport \"./Monitor.css\";\n\nconst MAX_MESSAGES = 40;\n\nclass Monitor extends Component {\n\n    state = {\n        messages: []\n    };\n\n    handleMidiInputEvent = (event) => {\n        // if (event instanceof MIDIMessageEvent) {\n        this.setState(\n            produce(draft => {\n                let len = draft.messages.unshift(event.data);\n                if (len > MAX_MESSAGES) draft.messages.pop();\n            })\n        )\n        // }\n    };\n\n    renderPort = (port, selected, clickHandler) => {\n        if (port === undefined || port === null) return null;\n        return (\n            <MidiPort key={port.id} port={port} selected={selected} clickHandler={clickHandler} />\n        )\n    };\n\n    render() {\n\n        return (\n\n            <div className=\"wrapper\">\n                <div className=\"content\">\n                    <div>\n                        <div className=\"content-row step-1\">\n                            <div className=\"content-row-content row-middle-aligned\">\n                                <Midi only=\".*\" autoConnect=\".*\"\n                                      inputRenderer={this.renderPort} outputRenderer={this.renderPort}\n                                      onMidiInputEvent={this.handleMidiInputEvent}\n                                      className=\"sub-header\" >\n                                    <div className=\"no-midi\">Please connect your Pacer or any other MIDI device to your computer.</div>\n                                </Midi>\n                            </div>\n                        </div>\n                        <div className=\"content-row step-2\">\n                            <div className=\"content-row-content\">\n                                <div>\n                                    <h2>MIDI messages</h2>\n                                    <p>The messages are displayed in reverse chronological order (the most recent on top). Only the last 20 messages are displayed.</p>\n                                </div>\n                                <div className=\"messages\">\n                                    {this.state.messages.map((msg, i) => {      //TODO: display timestamp\n                                        let m = parseMidi(msg);\n                                        let info2 = '';\n                                        let info3 = '';\n                                        switch (m.messageCode) {\n                                            case 0x80:      // {messageCode: 144, channel: 1, messageType: \"noteon\", key: 70, velocity: 21}\n                                            case 0x90:\n                                                info2 = Note.fromMidi(m.key);\n                                                info3 = `velocity: ${m.velocity}`;\n                                                break;\n                                            case 0xA0:  // \"AfterTouch\",\n                                                break;\n                                            case 0xB0:\n                                                info2 = CONTROLER[m.controlNumber];\n                                                info3 = m.controlValue;\n                                                break;\n                                            case 0xC0:          // {messageCode: 192, channel: 4, messageType: \"programchange\", program: 102} \"C0\"\n                                                info2 = `program: ${m.program}`;\n                                                info3 = '';\n                                                break;\n                                            case 0xD0:  // \"Channel Pressure\\\",\\n\"\n                                                break;\n                                            case 0xE0:          // {messageCode: 224, channel: 1, messageType: \"pitchbendchange\", pitchBend: 8283, pitchBendMultiplier: 0.011109754608716884}\n                                                info2 = `bend: ${m.pitchBend}`;\n                                                info3 = `multiplier: ${m.pitchBendMultiplier}`;\n                                                break;\n                                            default:\n                                                break;\n                                        }\n                                        return (\n                                            <div>\n                                                <span className=\"code\">[{hs(msg)}]</span>\n                                                <span className=\"msg-channel\">Channel {m.channel}</span>\n                                                <span className=\"msg-name\">{MESSAGE[m.messageCode]}</span>\n                                                <span className=\"msg-data\">{info2}</span>\n                                                <span className=\"msg-data\">{info3}</span>\n                                            </div>\n                                        );\n                                    })}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n{/*\n                <div className=\"help\">\n                    <h3>Help</h3>\n                </div>\n*/}\n            </div>\n        );\n    }\n\n}\n\nexport default Monitor;\n","import React from 'react';\nimport \"./Footer.css\";\n\nconst Footer = () => {\n    return (\n        <div className=\"footer\">\n            <div className=\"gh\">\n                <a href=\"https://github.com/francoisgeorgy/pacer-editor\" target=\"_blank\" rel=\"noopener noreferrer\">Source code available on GitHub</a>\n                <a aria-label=\"Homepage\" title=\"project on github\" href=\"https://github.com/francoisgeorgy/pacer-editor\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    <svg height=\"24\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"24\" aria-hidden=\"true\">\n                        <path fillRule=\"evenodd\" d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z\"></path>\n                    </svg>\n                </a>\n            </div>\n            <div>\n                <p>“Nektar Technology”, the logo and all other Nektar Technology product, technology or service names and\n                    logos are trademarks or registered trademarks of Nektar Technology, Inc.</p>\n                <p>This web site is not endorsed by, directly affiliated with, maintained, or sponsored by Nektar Technology.\n                    This web site is published under <a href=\"https://www.gnu.org/licenses/gpl-3.0.en.html\" target=\"_blank\" rel=\"noopener noreferrer\">GNU General Public License v3</a>\n                </p>\n            </div>\n        </div>\n    );\n};\n\nexport default Footer;\n","import React, {Component} from 'react';\n\nclass Global extends Component {\n\n    render() {\n\n        return (\n            <div className=\"wrapper\">\n                <div className=\"content\">\n                    <div className=\"content-row step-1\">\n{/*\n                        <div className=\"background\">\n                            Connect\n                        </div>\n                        <div className=\"content-row-header\">\n                            1\n                        </div>\n*/}\n                        <div className=\"content-row-content\">\n                        </div>\n                    </div>\n                    <div className=\"content-row step-2\">\n{/*\n                        <div className=\"background\">\n                            Select\n                        </div>\n                        <div className=\"content-row-header\">\n                            2\n                        </div>\n*/}\n                        <div className=\"content-row-content row-middle-aligned\">\n                            <div className=\"sorry\">Sorry, this feature is not implemented yet.</div>\n                        </div>\n                    </div>\n                    <div className=\"content-row step-3\">\n{/*\n                        <div className=\"background\">\n                            Edit\n                        </div>\n                        <div className=\"content-row-header\">\n                            3\n                        </div>\n*/}\n                        <div className=\"content-row-content\">\n                        </div>\n                    </div>\n                    <div className=\"content-row step-4\">\n{/*\n                        <div className=\"background\">\n                            Write\n                        </div>\n                        <div className=\"content-row-header\">\n                            4\n                        </div>\n*/}\n                        <div className=\"content-row-content\">\n                        </div>\n                    </div>\n                </div>\n                <div className=\"help\">\n                    <h3>Help</h3>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default Global;\n","import React, {Component} from 'react';\nimport Dropzone from \"react-dropzone\";\nimport {produce} from \"immer\";\nimport {isSysexData, mergeDeep, parseSysexDump} from \"../pacer/sysex\";\nimport DumpSysex from \"../components/DumpSysex\";\nimport './DumpDecoder.css';\nimport {hs} from \"../utils/hexstring\";\nimport Midi from \"../components/Midi\";\nimport MidiPort from \"../components/MidiPort\";\nimport {PACER_MIDI_PORT_NAME} from \"../pacer/constants\";\n\nconst MAX_FILE_SIZE = 5 * 1024*1024;\n\nclass DumpDecoder extends Component {\n\n    state = {\n        data: null\n    };\n\n    /**\n     * Ad-hoc method to show the busy flag and set a timeout to make sure the busy flag is hidden after a timeout.\n     */\n    showBusy = () =>  {\n        setTimeout(() => this.props.onBusy(false), 20000);\n        this.props.onBusy(true);\n    };\n\n    /**\n     *\n     * @param files\n     * @returns {Promise<void>}\n     */\n    async readFiles(files) {\n        await Promise.all(files.map(\n            async file => {\n                if (file.size > MAX_FILE_SIZE) {\n                    console.warn(`${file.name}: file too big, ${file.size}`);\n                } else {\n                    this.showBusy();\n                    const data = new Uint8Array(await new Response(file).arrayBuffer());\n                    if (isSysexData(data)) {\n                        this.setState(\n                            produce(draft => {\n                                draft.data = mergeDeep(draft.data || {}, parseSysexDump(data));\n                                this.props.onBusy(false);\n                            })\n                        );\n                        // this.addInfoMessage(\"sysfile decoded\");\n                    } else {\n                        console.log(\"readFiles: not a sysfile\", hs(data.slice(0, 5)));\n                    }\n                    this.props.onBusy(false);\n                    // non sysex files are ignored\n                }\n                // too big files are ignored\n            }\n        ));\n    }\n\n    /**\n     * Drop Zone handler\n     * @param files\n     */\n    onDrop = (files) => {\n        console.log('drop', files);\n        this.setState({ data: null }, () => {this.readFiles(files)});\n    };\n\n    handleMidiInputEvent = (event) => {\n        console.log(\"DumpDecoder.handleMidiInputEvent\", event, event.data);\n        // if (event instanceof MIDIMessageEvent) {\n        if (isSysexData(event.data)) {\n            console.log(\"DumpDecoder.handleMidiInputEvent: data is SysEx\");\n            this.setState(\n                produce(draft => {\n                    draft.data = mergeDeep(draft.data || {}, parseSysexDump(event.data));\n                    // this.props.onBusy(false);\n                })\n            )\n        } else {\n            console.log(\"MIDI message is not a sysex message\")\n        }\n        // }\n    };\n\n    renderPort = (port, selected, clickHandler) => {\n        if (port === undefined || port === null) return null;\n        return (\n            <MidiPort key={port.id} port={port} selected={selected} clickHandler={clickHandler} />\n        )\n    };\n\n\n    /**\n     * @returns {*}\n     */\n    render() {\n\n        const { data } = this.state;\n\n        console.log(\"DumpDecoder.render\", this.props);\n\n        return (\n            <div className=\"wrapper\">\n                <div className=\"content\">\n                    <div className=\"content-row step-1\">\n                        <div className=\"content-row-content row-middle-aligned\">\n                            <Midi only={PACER_MIDI_PORT_NAME} autoConnect={PACER_MIDI_PORT_NAME}\n                                  inputRenderer={this.renderPort} outputRenderer={this.renderPort}\n                                  onMidiInputEvent={this.handleMidiInputEvent}\n                                  className=\"sub-header\" >\n                                <div className=\"no-midi\">Please connect your Pacer to your computer.</div>\n                            </Midi>\n                        </div>\n                    </div>\n                    <div className=\"content-row step-2\">\n                        <div className=\"content-row-content\">\n                            <h2>Dump:</h2>\n                            Send a dump from your Pacer or drop a binary sysex file onto the drop zone on the right.\n                        </div>\n                    </div>\n                    <div className=\"content-row step-3\">\n                        <div className=\"content-row-content\">\n                            <DumpSysex data={data} />\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"help\">\n                    <Dropzone onDrop={this.onDrop} className=\"drop-zone\">\n                        Drop a binary sysex file here<br />or click to open the file dialog\n                    </Dropzone>\n                </div>\n\n            </div>\n\n        );\n    }\n}\n\nexport default DumpDecoder;\n","import React, {Component, Fragment} from 'react';\nimport {\n    MSG_CTRL_OFF,\n    MSG_SW_NOTE,\n    MSG_TYPES_FULLNAME_SW,\n    MSG_TYPES_FULLNAME_MIDI_SORTED,\n    MSG_TYPES_DATA_HELP\n} from \"../pacer/constants\";\nimport * as Note from \"tonal-note\";\nimport \"./MidiSettingsEditor.css\";\n\nconst MidiNote = ({ note, onChange }) => {\n    return (\n        <select onChange={(event) => onChange(event.target.value)} defaultValue={note}>\n            {\n                Array.from(Array(127).keys()).map(\n                    i => {\n                        let n = Note.fromMidi(i, true);\n                        return <option key={i} value={i}>{n}</option>\n                    })\n            }\n        </select>\n    );\n};\n\nconst Setting = ({ index, config, updateCallback }) => {\n\n    let inactive = config.msg_type === MSG_CTRL_OFF;\n\n    if (inactive) {\n        return (\n            <Fragment>\n                <div className=\"setting-row-header\">setting {index}:</div>\n                <div>\n                    <select onChange={(event) => updateCallback(\"msg_type\", null, event.target.value)} defaultValue={config.msg_type}>\n                        {\n                            Object.keys(MSG_TYPES_FULLNAME_SW).map(\n                                key => {\n                                    // let n = Note.fromMidi(i, true);\n                                    return <option key={key} value={key}>{MSG_TYPES_FULLNAME_SW[key]}</option>\n                                })\n                        }\n                    </select>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n                <div>\n                </div>\n            </Fragment>\n        );\n    }\n\n    let d0, d1, d2;\n    if (config.msg_type === MSG_SW_NOTE) {\n        // d0 = `note ${Note.fromMidi(config.data[0], true)}`;\n        d0 = <MidiNote note={config.data[0]} onChange={(value) => updateCallback(\"data\", 0, value)} />;\n        d1 = <input type=\"text\" value={config.data[1]} onChange={(event) => updateCallback(\"data\", 1, event.target.value)} />;\n        d2 = '';\n    } else {\n        d0 = <input type=\"text\" value={config.data[0]} onChange={(event) => updateCallback(\"data\", 0, event.target.value)} />;\n        d1 = <input type=\"text\" value={config.data[1]} onChange={(event) => updateCallback(\"data\", 1, event.target.value)} />;\n        d2 = <input type=\"text\" value={config.data[2]} onChange={(event) => updateCallback(\"data\", 2, event.target.value)} />;\n    }\n\n    return (\n        <Fragment>\n            <div className=\"setting-row-header\">Setting {index}:</div>\n            <div>\n                <select onChange={(event) => updateCallback(\"msg_type\", null, event.target.value)} defaultValue={config.msg_type}>\n                {\n                    MSG_TYPES_FULLNAME_MIDI_SORTED.map(\n                        v => {\n                            return <option key={v.key} value={v.key}>{v.value}</option>\n                        })\n                }\n                </select>\n            </div>\n            <div>{d0}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][0]}</div></div>\n            <div>{d1}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][1]}</div></div>\n            <div>{d2}<div className=\"data-help\">{MSG_TYPES_DATA_HELP[config.msg_type][2]}</div></div>\n            <div>\n                <select onChange={(event) => updateCallback(\"channel\", null, event.target.value)} defaultValue={config.channel}>\n                    {\n                        Array.from(Array(16).keys()).map(i => <option key={i} value={i}>{i}</option>)\n                    }\n                </select>\n            </div>\n        </Fragment>\n    );\n};\n\nclass MidiSettingsEditor extends Component {\n\n    onSettingUpdate = (settingIndex, dataType, dataIndex, value) => {\n        // console.log(`MidiSettingsEditor.onSettingUpdate`, settingIndex, dataType, dataIndex, value);\n        this.props.onUpdate(settingIndex, dataType, dataIndex, value);\n    };\n\n    render() {\n\n        const settings = this.props.settings;\n\n        // console.log(\"MidiSettingsEditor.render\", settings);\n\n        return (\n            <div className=\"settings\">\n                <div></div>\n                <div className=\"setting-col-header\">Type</div>\n                <div className=\"setting-col-header\">Data 1</div>\n                <div className=\"setting-col-header\">Data 2</div>\n                <div className=\"setting-col-header\">Data 3</div>\n                <div className=\"setting-col-header\">MIDI Ch.</div>\n                {Object.keys(settings).map(i =>\n                    <Setting key={i} index={i} config={settings[i]} updateCallback={(dataType, dataIndex, value) => this.onSettingUpdate(i, dataType, dataIndex, value)} />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default MidiSettingsEditor;\n","import React, {Component, Fragment} from 'react';\nimport PresetSelector from \"../components/PresetSelector\";\nimport {\n    buildPresetNameSysex,\n    getMidiSettingUpdateSysexMessages,\n    isSysexData,\n    mergeDeep,\n    parseSysexDump, requestPreset\n} from \"../pacer/sysex\";\nimport Midi from \"../components/Midi\";\nimport MidiPort from \"../components/MidiPort\";\nimport Dropzone from \"react-dropzone\";\nimport \"./Preset.css\";\nimport Status from \"../components/Status\";\nimport {produce} from \"immer\";\nimport {\n    MSG_CTRL_OFF,\n    PACER_MIDI_PORT_NAME,\n    SYSEX_SIGNATURE,\n    TARGET_PRESET\n} from \"../pacer/constants\";\nimport {hs} from \"../utils/hexstring\";\nimport MidiSettingsEditor from \"../components/MidiSettingsEditor\";\nimport {inputName, outputById, outputName} from \"../utils/ports\";\nimport PresetNameEditor from \"../components/PresetNameEditor\";\n\nconst MAX_FILE_SIZE = 5 * 1024*1024;\n\nconst MAX_STATUS_MESSAGES = 40;\n\nfunction batchMessages(callback, wait) {\n\n    let messages = [];  // batch of received messages\n\n    let timeout;\n\n    return function() {\n\n        // first, reset the timeout\n        clearTimeout(timeout);\n\n        let event = arguments[0];\n\n        messages.push(event.data);\n\n        timeout = setTimeout(() => {\n            console.log(\"timeout elapsed\");\n            timeout = null;\n            callback(messages);\n            messages = [];\n        }, wait);\n    };\n\n}\n\nclass PresetMidi extends Component {\n\n    state = {\n        output: null,       // MIDI output port used for output\n        presetIndex: null,  //\n        changed: false,     // true when the control has been edited\n        data: null,\n        statusMessages: []\n    };\n\n    /**\n     * Ad-hoc method to show the busy flag and set a timeout to make sure the busy flag is hidden after a timeout.\n     */\n    showBusy = () =>  {\n        setTimeout(() => this.props.onBusy(false), 20000);\n        this.props.onBusy(true);\n    };\n\n    addStatusMessage = (type, message) => {\n        this.setState(\n            produce(draft => {\n                let m = { type, message };\n                let len = draft.statusMessages.push(m);\n                if (len > MAX_STATUS_MESSAGES) draft.statusMessages.shift();\n            })\n        );\n    };\n\n    addInfoMessage= message => {\n        this.addStatusMessage(\"info\", message);\n    };\n\n    addWarningMessage= message => {\n        this.addStatusMessage(\"warning\", message);\n    };\n\n    addErrorMessage= message => {\n        this.addStatusMessage(\"error\", message);\n    };\n\n    handleMidiInputEvent = batchMessages(\n        messages => {\n            this.setState(\n                produce(\n                    draft => {\n                        for (let m of messages) {\n                            if (isSysexData(m)) {\n                                draft.data = mergeDeep(draft.data || {}, parseSysexDump(m));\n                            } else {\n                                console.log(\"MIDI message is not a sysex message\")\n                            }\n                        }\n                        let pId = Object.keys(draft.data[TARGET_PRESET])[0];\n                        draft.presetIndex = parseInt(pId, 10);\n                    }\n                )\n            );\n            let bytes = messages.reduce((accumulator, element) => accumulator + element.length, 0);\n            this.addInfoMessage(`${messages.length} messages received (${bytes} bytes)`);\n            this.props.onBusy(false);\n        },\n        1000\n    );\n\n    /**\n     *\n     * @param files\n     * @returns {Promise<void>}\n     */\n    async readFiles(files) {\n        await Promise.all(files.map(\n            async file => {\n                if (file.size > MAX_FILE_SIZE) {\n                    console.warn(`readFiles: ${file.name}: file too big, ${file.size}`);\n                    this.addWarningMessage(\"file too big\");\n                } else {\n                    this.showBusy();\n                    const data = new Uint8Array(await new Response(file).arrayBuffer());\n                    if (isSysexData(data)) {\n                        this.setState(\n                            produce(draft => {\n                                // draft.data = mergeDeep(draft.data || {}, parseSysexDump(data));\n                                draft.data = parseSysexDump(data);\n                                let pId = Object.keys(draft.data[TARGET_PRESET])[0];\n                                draft.presetIndex = parseInt(pId, 10);\n                            })\n                        );\n                        this.addInfoMessage(\"sysfile decoded\");\n                    } else {\n                        this.addWarningMessage(\"not a sysfile\");\n                        console.log(\"readFiles: not a sysfile\", hs(data.slice(0, 5)));\n                    }\n                    this.props.onBusy(false);\n                    // non sysex files are ignored\n                }\n                // too big files are ignored\n            }\n        ));\n    }\n\n    /**\n     * Drop Zone handler\n     * @param files\n     */\n    onDrop = (files) => {\n        console.log('drop', files);\n        this.setState(\n            {\n                data: null,\n                changed: false\n            },\n            () => {this.readFiles(files)}   // returned promise from readFiles() is ignored, this is normal.\n        );\n    };\n\n    selectPreset = (id) => {\n        // if the user selects another preset or control, then clear the data in the state\n        this.setState(\n            produce(draft => {\n                draft.presetIndex = id;\n                if (id !== this.state.presetIndex) {\n                    draft.data = null;\n                    draft.data = null;\n                }\n            })\n        );\n        this.sendSysex(requestPreset(id));\n    };\n\n    /**\n     * dataIndex is only used when dataType == \"data\"\n     */\n    updateMidiSettings = (settingIndex, dataType, dataIndex, value) => {\n        // console.log(\"PresetMidi.updateMidiSettings\", settingIndex, dataIndex, value);\n        let v = parseInt(value, 10);\n        this.setState(\n            produce(draft => {\n                if (dataType === \"data\") {\n                    draft.data[TARGET_PRESET][draft.presetIndex][\"midi\"][settingIndex][\"data\"][dataIndex] = v;\n                } else {\n                    draft.data[TARGET_PRESET][draft.presetIndex][\"midi\"][settingIndex][dataType] = v;\n                }\n                if (dataType === \"msg_type\") {\n                    if (v === MSG_CTRL_OFF) {\n                        draft.data[TARGET_PRESET][draft.presetIndex][\"midi\"][settingIndex][\"active\"] = 0;\n                    } else {\n                        draft.data[TARGET_PRESET][draft.presetIndex][\"midi\"][settingIndex][\"active\"] = 1;\n                    }\n                }\n                draft.data[TARGET_PRESET][draft.presetIndex][\"midi\"][settingIndex][\"changed\"] = true;\n                draft.changed = true;\n            })\n        );\n    };\n\n    updatePresetName = (name) => {\n        // console.log(\"PresetMidi.updateName\", name);\n        if (name === undefined || name === null) return;\n        if (name.length > 5) {\n            console.warn(`PresetMidi.updateName: name too long: ${name}`);\n            return;\n        }\n        this.setState(\n            produce(draft => {\n                draft.data[TARGET_PRESET][draft.presetIndex][\"name\"] = name;    // TODO : buld update message\n                draft.data[TARGET_PRESET][draft.presetIndex][\"changed\"] = true;\n                draft.changed = true;\n            })\n        );\n    };\n\n    renderPort = (port, selected, clickHandler) => {\n        if (port === undefined || port === null) return null;\n        return (\n            <MidiPort key={port.id} port={port} selected={selected} clickHandler={clickHandler} />\n        )\n    };\n\n    onInputConnection = (port_id) => {\n        this.addInfoMessage(`input ${inputName(port_id)} connected`);\n    };\n\n    onInputDisconnection = (port_id) => {\n        this.addInfoMessage(`input ${inputName(port_id)} disconnected`);\n    };\n\n    onOutputConnection = (port_id) => {\n        this.setState(\n            produce(draft => {\n                draft.output = port_id;\n            })\n        );\n        this.addInfoMessage(`output ${outputName(port_id)} connected`);\n    };\n\n    onOutputDisconnection = (port_id) => {\n        this.addInfoMessage(`output ${outputName(port_id)} disconnected`);\n    };\n\n    sendSysex = msg => {\n        console.log(\"sendSysex\", msg);\n        if (!this.state.output) {\n            console.warn(\"no output enabled to send the message\");\n            return;\n        }\n        let out = outputById(this.state.output);\n        if (!out) {\n            console.warn(`send: output ${this.state.output} not found`);\n            return;\n        }\n        this.showBusy();\n        out.sendSysex(SYSEX_SIGNATURE, msg);\n    };\n\n    updatePacer = (messages) => {\n        console.log(\"PresetMidi.updatePacer\");\n        for (let m of messages) {\n            this.sendSysex(m);\n        }\n        this.addInfoMessage(`update${messages.length > 1 ? 's' : ''} sent to Pacer`);\n    };\n\n    render() {\n\n        const { presetIndex, data, changed } = this.state;\n\n        let showEditor = false;\n\n        if (data) {\n\n            showEditor = true;\n\n            if (!(TARGET_PRESET in data)) {\n                console.log(`PresetMidi: invalid data`, data);\n                showEditor = false;\n            }\n\n            if (showEditor && !(presetIndex in data[TARGET_PRESET])) {\n                // console.log(`PresetMid: preset ${presetIndex} not found in data`);\n                showEditor = false;\n            }\n\n            if (showEditor && !(\"midi\" in data[TARGET_PRESET][presetIndex])) {\n                // console.log(`PresetMidi: midi not found in data`);\n                showEditor = false;\n            }\n        }\n\n        showEditor = showEditor && (Object.keys(data[TARGET_PRESET][presetIndex][\"midi\"]).length === 16);\n\n        let updateMessages = [];\n        if (showEditor) {\n            updateMessages = getMidiSettingUpdateSysexMessages(presetIndex, data);\n            let n = buildPresetNameSysex(presetIndex, data);\n            if (n) {\n                updateMessages.push(n);\n            }\n        }\n\n        // console.log(\"PresetMidi.render\", showEditor, presetIndex);\n\n        return (\n            <div className=\"wrapper\">\n                <div className=\"content\">\n\n                    <div className=\"content-row step-1\">\n                        <div className=\"content-row-content row-middle-aligned\">\n                            <Midi only={PACER_MIDI_PORT_NAME} autoConnect={PACER_MIDI_PORT_NAME}\n                                  inputRenderer={this.renderPort} outputRenderer={this.renderPort}\n                                  onMidiInputEvent={this.handleMidiInputEvent}\n                                  onInputConnection={this.onInputConnection}\n                                  onInputDisconnection={this.onInputDisconnection}\n                                  onOutputConnection={this.onOutputConnection}\n                                  onOutputDisconnection={this.onOutputDisconnection}\n                                  className=\"sub-header\" >\n                                <div className=\"no-midi\">Please connect your Pacer to your computer.</div>\n                            </Midi>\n                        </div>\n                    </div>\n                    <div className=\"content-row step-2\">\n                        <div className=\"content-row-content\">\n\n                            <h2>Choose the preset to edit:</h2>\n\n                            <div className=\"selectors\">\n                                <PresetSelector currentPreset={presetIndex} onClick={this.selectPreset} />\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"content-row step-3\">\n                        <div className=\"content-row-content\">\n                            {showEditor &&\n                            <Fragment>\n                                <h2>Preset name:</h2>\n                                <PresetNameEditor name={data[TARGET_PRESET][presetIndex][\"name\"]}\n                                                    onUpdate={(name) => this.updatePresetName(name)} />\n                                <h2>Preset MIDI settings:</h2>\n                                <MidiSettingsEditor settings={data[TARGET_PRESET][presetIndex][\"midi\"]}\n                                                    onUpdate={(settingIndex, dataType, dataIndex, value) => this.updateMidiSettings(settingIndex, dataType, dataIndex, value)} />\n                            </Fragment>\n                            }\n                        </div>\n                    </div>\n\n                    <div className=\"content-row step-4\">\n                        <div className=\"content-row-content\">\n                            {changed &&\n                            <Fragment>\n                                <h2>Send the updated config to the Pacer:</h2>\n                                <div className=\"actions\">\n                                    <button className=\"update\" onClick={() => this.updatePacer(updateMessages)}>Update Pacer</button>\n                                </div>\n                            </Fragment>\n                            }\n                        </div>\n                    </div>\n\n                    <div>\n                        {showEditor && <div className=\"debug\">\n                            <h4>[Debug] update message to send to Pacer:</h4>\n                            <div className=\"message-to-send\">\n                                {updateMessages.map((m, i) => <div key={i} className=\"code\">{hs(m)}</div>)}\n                            </div>\n                        </div>}\n{/*\n                        {data && <div className=\"debug\">\n                            <h4>[Debug] sysex data:</h4>\n                            <pre>{JSON.stringify(data, null, 4)}</pre>\n                        </div>}\n*/}\n                    </div>\n                </div>\n\n                <div className=\"help\">\n\n                    <Dropzone onDrop={this.onDrop} className=\"drop-zone\">\n                        Drop a binary sysex file here<br />or click to open the file dialog\n                    </Dropzone>\n\n                    <h3>Log:</h3>\n                    <Status messages={this.state.statusMessages} />\n\n                </div>\n\n            </div>\n        );\n    }\n\n}\n\nexport default PresetMidi;\n","import React, {Component} from 'react';\nimport './App.css';\nimport { HashRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport TestSender from \"./pages/TestSender\";\nimport Preset from \"./pages/Preset\";\nimport Monitor from \"./pages/Monitor\";\nimport Footer from \"./components/Footer\";\nimport Global from \"./pages/Global\";\nimport DumpDecoder from \"./pages/DumpDecoder\";\n// import Chords from \"./pages/Chords\";\nimport PresetMidi from \"./pages/PresetMidi\";\n\n\nconst MenuLink = ({ label, to, activeOnlyWhenExact }) => (\n    <Route\n        path={to}\n        exact={activeOnlyWhenExact}\n        children={({ match }) => (\n            <span className={match ? \"header-link active\" : \"header-link\"}>\n                <Link to={to}>{label}</Link>\n            </span>\n        )}\n    />\n);\n\n\nclass App extends Component {\n\n    state = {\n        busy: false\n    };\n\n    /**\n     *\n     * @param busy boolean\n     */\n    onBusy = (busy) => {\n        if (busy !== this.state.busy) this.setState({ busy });\n    };\n\n    /**\n     * Main app render\n     * @returns {*}\n     */\n    render() {\n        const { busy } = this.state;\n\n        return (\n            <Router>\n                <div className=\"app\">\n\n                    <header className=\"header\">\n                        {/*<h1>Pacer Editor</h1>*/}\n                        <MenuLink activeOnlyWhenExact={true} to=\"/\" label=\"Home\" />\n                        <MenuLink to=\"/preset\" label=\"Preset Controls\" />\n                        <MenuLink to=\"/presetmidi\" label=\"Preset Name & MIDI\" />\n                        <MenuLink to=\"/global\" label=\"Global config\" />\n                        {/*<MenuLink to=\"/chords\" label=\"Chords\" />*/}\n                        <MenuLink to=\"/monitor\" label=\"MIDI monitor\" />\n                        <MenuLink to=\"/dumpdecoder\" label=\"Dump decoder\" />\n                        <MenuLink to=\"/testsender\" label=\"Debug\" />\n                        <div className=\"spacer\">\n                        </div>\n                        {busy && <div className=\"busy\">busy</div>}\n                    </header>\n\n                    {/*<div className=\"wrapper\">*/}\n                        {/*<div className=\"content\">*/}\n                            <Switch>\n                                <Route exact={true} path=\"/\" render={\n                                    props => (\n                                        <Home />\n                                    )\n                                }/>\n                                <Route path=\"/preset\" render={\n                                    props => (\n                                        <Preset onBusy={this.onBusy} />\n                                    )\n                                }/>\n                                <Route path=\"/presetmidi\" render={\n                                    props => (\n                                        <PresetMidi onBusy={this.onBusy} />\n                                    )\n                                }/>\n                                <Route path=\"/global\" render={\n                                    props => (\n                                        <Global onBusy={this.onBusy} />\n                                    )\n                                }/>\n{/*\n                                <Route path=\"/chords\" render={\n                                    props => (\n                                        <Chords onBusy={this.onBusy} />\n                                    )\n                                }/>\n*/}\n                                <Route path=\"/monitor\" render={\n                                    props => (\n                                        <Monitor onBusy={this.onBusy} />\n                                    )\n                                }/>\n                                <Route path=\"/dumpdecoder\" render={\n                                    props => (\n                                        <DumpDecoder onBusy={this.onBusy} />\n                                    )\n                                }/>\n                                <Route path=\"/testsender\" render={\n                                    props => (\n                                        <TestSender onBusy={this.onBusy} />\n                                    )\n                                }/>\n                            </Switch>\n                        {/*</div>*/}\n                    {/*</div>*/}\n\n                    <Footer />\n\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nfunction noop() {}\nif (process.env.NODE_ENV !== 'development') {\n    console.log = noop;\n    console.warn = noop;\n    console.error = noop;\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}