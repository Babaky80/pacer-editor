{"version":3,"sources":["components/Midi.js","pacer/index.js","components/PresetSelectors.js","utils/ports.js","components/MidiPorts.js","utils/hexstring.js","utils/sysex.js","components/Controls.js","components/DumpSysex.js","pages/Home.js","pages/DumpDecoder.js","pages/TestSender.js","App.js","serviceWorker.js","index.js"],"names":["Midi","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleMidiConnectEvent","e","console","log","concat","port","type","name","onInputChange","onOutputChange","midiOn","err","warn","WebMidi","Component","SYSEX_HEADER","SYSEX_SIGNATURE","checksum","bytes","undefined","length","Uint8Array","from","reduce","previousValue","currentValue","requestPresetObj","index","obj","msg","cs","push","presetIndexToXY","b","Math","floor","i","String","fromCharCode","toString","TARGETS","_TARGETS","defineProperty","CONTROLS","1","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","54","55","126","127","STOMPSWITCHES_TOP","STOMPSWITCHES_BOTTOM","FOOTSWITCHES","EXPPEDALS","MSG_TYPES","_MSG_TYPES","PresetSelector","_ref","id","selected","onClick","react_default","a","createElement","className","PresetSelectors","_ref2","currentPreset","map","key","Array","keys","xy","charCodeAt","parseInt","PresetSelectors_PresetSelector","inputFromId","inputs","find","item","outputFromId","outputs","MidiPorts","state","input","output","connectInput","addListener","onMidiEvent","disconnectInput","removeListener","togglePort","port_id","p","portFromId","prev","setState","onPortSelection","isPacer","manufacturer","toLowerCase","toUpperCase","_this2","pacerPorts","ports","filter","isSelected","react_switch_default","onChange","checked","height","width","padZero","str","len","char","s","c","n","h","v","hs","data","join","fromHexString","string","sep","replace","substr","SYSEX_START","SYSEX_END","CMD","TGT","IDX","OBJ","ELM","isObject","isArray","mergeDeep","target","_len","arguments","sources","_key","source","shift","assign","apply","isSysexData","byteLength","parseSysexMessage","obj_type","message","cmd","tgt","idx","steps","config","channel","msg_type","active","getControlStep","slice","error","midi","on_color","off_color","getControlLED","parseSysexDump","d","presets","indexOf","k","manufacturer_id","NEKTAR_TECHNOLOGY_INC","Control","Controls","currentControl","Controls_Control","Midis","_ref3","midis","ControlTable","_ref5","colSpan","Note","_ref6","controls","DumpSysex_ControlTable","Preset","_ref7","DumpSysex_Controls","DumpSysex_Midis","Presets","_ref8","DumpSysex_Preset","DumpSysex","_ref9","DumpSysex_Presets","Home","presetIndex","controlId","selectPreset","selectControl","sendSysex","handleMidiInputEvent","event","produce","draft","enablePort","_this$state","inputPorts","src_components_MidiPorts","outputPorts","src_components_PresetSelectors","src_components_Controls","src_components_DumpSysex","DumpDecoder","onDrop","files","onBusy","readFiles","Promise","all","asyncToGenerator","regenerator_default","mark","_callee","file","wrap","_context","next","size","t0","Response","arrayBuffer","t1","sent","stop","_x2","es","TestSender","messages","requestPreset","customMessage","sendMessage","updateCustomMessage","value","match","sendCustomMessage","disabled","placeholder","JSON","stringify","MenuLink","label","to","activeOnlyWhenExact","Route","path","exact","children","Link","App","busy","HashRouter","components_Midi","App_MenuLink","Switch","render","src_pages_Home","src_pages_DumpDecoder","src_pages_TestSender","Boolean","window","location","hostname","noop","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.470d692c.chunk.js","sourcesContent":["import {Component} from 'react';\nimport * as WebMidi from \"webmidi\";\n\n/**\n *\n * @param props\n * @constructor\n */\nclass Midi extends Component {\n\n    constructor(props) {\n        super(props);\n        this.onInputChange = props.onInputChange;\n        this.onOutputChange = props.onOutputChange;\n    }\n\n    handleMidiConnectEvent = e => {\n\n        console.log(`handleMidiConnectEvent: ${e.port.type} ${e.type}: ${e.port.name}`, e);\n\n        // is disconnect event, remove the existing input listeners\n        /*\n        if (e.type === \"disconnected\") {\n            // console.log(`must disconnect ${e.port} ${e.port.id}`);\n            this.disconnectInput(e.port.id);\n        }\n        */\n\n        if (e.port.type === 'input') {\n            // console.log(`ignore MIDI input connect event`);\n            console.log(\"call onInputChange\");\n            this.onInputChange();\n        }\n\n        if (e.port.type === 'output') {\n            console.log(\"call onOutputChange\");\n            this.onOutputChange();\n        }\n\n        // Note: if we don't display the events, than the UI will not be updated if we don't update the state.\n        //       In that case we should call forceUpdate().\n        //       More info in README.md.\n\n        // We store all the events in order to display them.\n        // In a real app, only store the last event per port and type.\n        // console.log('add event to state.events');\n        // this.setState({ events: [...this.state.events, e]})\n\n        // this.handleMidiState();\n    };\n/*\n    connectInput = id => {\n        // const i = inputById(id);\n        // if (i) {\n        //     i.addListener('noteon', 'all', this.handleMidiInputEvent);\n        //     console.log(`connectInput: input ${id} connected`);\n        // } else {\n        //     console.log(`connectInput: input ${id} not found`);\n        // }\n        console.log('add input to state.connectedInputs');\n        // this.setState({connectedInputs: [...this.state.connectedInputs, id]});\n    };\n*/\n/*\n    disconnectInput = id => {\n        // const i = inputById(id);\n        // if (i) {\n        //     i.removeListener();\n        //     console.log(`disconnectInput: input ${id} disconnected`);\n        // } else {\n        //     console.log(`disconnectInput: input ${id} not found`);\n        // }\n\n        // let current = this.state.connectedInputs;\n        // current.splice(current.indexOf(id), 1);     // remove id from array\n        // console.log('remove input from state.connectedInputs');\n        // this.setState({connectedInputs: current});\n    };\n*/\n    midiOn = err => {\n        if (err) {\n            console.warn(\"WebMidi could not be enabled.\", err);\n        } else {\n            console.log(\"WebMidi enabled!\");\n            WebMidi.addListener(\"connected\", this.handleMidiConnectEvent);\n            WebMidi.addListener(\"disconnected\", this.handleMidiConnectEvent);\n\n            /*\n            if (WebMidi.hasListener(\"connected\", this.handleMidiConnectEvent)) {\n                console.log(\"MidiPorts.componentDidMount: handleMidiConnectEvent already set on 'connected' event\");\n            } else {\n                WebMidi.addListener(\"connected\", this.handleMidiConnectEvent);\n            }\n            if (WebMidi.hasListener(\"disconnected\", this.handleMidiConnectEvent)) {\n                console.log(\"MidiPorts.componentDidMount: handleMidiConnectEvent already set on 'disconnected' event\");\n            } else {\n                WebMidi.addListener(\"disconnected\", this.handleMidiConnectEvent);\n            }\n            */\n        }\n    };\n\n    componentDidMount() {\n        WebMidi.enable(this.midiOn, true);  // true to enable sysex support\n        console.warn(\"Midi.componentDidUnmount\");\n    }\n\n    componentWillUnmount() {\n        console.warn(\"Midi.componentWillUnmount\");\n    }\n\n    render() {\n        return null;\n    }\n\n}\n\nexport default Midi;\n\n","\nexport const SYSEX_HEADER = [0x7F];\n\nexport const SYSEX_SIGNATURE = [0x00, 0x01, 0x77];\n\nexport function checksum(bytes) {\n    if (bytes === null || bytes === undefined || bytes.length === 0) return 128;\n    let sum = Uint8Array.from(bytes).reduce((previousValue, currentValue) => previousValue + currentValue);\n    return 128 - (sum % 128);\n}\n\n\n/**\n * return the sysex message to send to the Pacer to request some data\n */\nexport function requestPreset(index) {\n    let msg = [0x02, 0x01, index];\n    let cs = checksum(msg);\n    msg.push(cs);\n    return SYSEX_HEADER.concat(msg);\n}\n\n/**\n * return the sysex message to send to the Pacer to request some data\n */\nexport function requestPresetObj(index, obj) {\n    let msg = [0x02, 0x01, index, obj];\n    let cs = checksum(msg);\n    msg.push(cs);\n    return SYSEX_HEADER.concat(msg);\n}\n\n// ============================================================================\n\n/**\n * Example: 23 => \"D5\"\n * @param index\n * @returns {string}\n */\nexport const presetIndexToXY = index => {\n    if (index === 0) return \"CUR\";\n    //TODO: check valid range\n    let b = Math.floor((index - 1) / 6);\n    let i = (index - 1) % 6 + 1;\n    return String.fromCharCode(b + 65) + i.toString();\n};\n\n/**\n * Exampe: \"D5\" => 23\n * @param xy\n * @returns {number}\n */\nexport const presetXYToIndex = xy => {\n    if (xy === \"CUR\") return 0;\n    //TODO: check valid range\n    //TODO: convert to uppercase before parsing\n    let bank = xy.charCodeAt(0) - 65;\n    let num = parseInt(xy[1], 10);\n    return bank * 6 + num;\n};\n\n// ============================================================================\n\nexport const TARGET_PRESET = 0x01;\nexport const TARGET_GLOBAL = 0x05;\nexport const TARGET_BACKUP = 0x07;\n\nexport const TARGETS = {\n    [TARGET_PRESET]: \"preset\",\n    [TARGET_GLOBAL]: \"global\",\n    [TARGET_BACKUP]: \"full backup\"\n};\n\n// ============================================================================\n\n// objects:\nexport const CONTROLS = {\n    0x01: \"name\",\n    0x0D: \"1\",\n    0x0E: \"2\",\n    0x0F: \"3\",\n    0x10: \"4\",\n    0x11: \"5\",\n    0x12: \"6\",\n    0x13: \"RESERVED\",\n    0x14: \"A\",\n    0x15: \"B\",\n    0x16: \"C\",\n    0x17: \"D\",\n    0x18: \"FS 1\",\n    0x19: \"FS 2\",\n    0x1A: \"FS 3\",\n    0x1B: \"FS 4\",\n    0x36: \"EXP 1\",\n    0x37: \"EXP 2\",\n    0x7E: \"MIDI configuration\",\n    0x7F: \"ALL\"\n};\n\n// subsets of CONTROLS keys:\nexport const STOMPSWITCHES = [0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x14, 0x15, 0x16, 0x17];\nexport const STOMPSWITCHES_TOP = [0x14, 0x15, 0x16, 0x17];\nexport const STOMPSWITCHES_BOTTOM = [0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12];\nexport const FOOTSWITCHES = [0x18, 0x19, 0x1A, 0x1B];\nexport const EXPPEDALS = [0x36, 0x37];\n\n\n\n// ============================================================================\n// message types:\n\nexport const MSG_AD_MIDICC = 0x00;\nexport const MSG_AD_NRPNC = 0x03;\nexport const MSG_AD_NRPNF = 0x04;\nexport const MSG_AD_PITCH = 0x01;\nexport const MSG_AD_ATCHAN = 0x02;\nexport const MSG_DAWFUNC = 0x7E;\nexport const MSG_CTRL_OFF = 0x61;\n\nexport const MSG_SW_MIDICC_TGGLE = 0x47;\nexport const MSG_SW_MIDICC = 0x40;\nexport const MSG_SW_MIDICC_STEP = 0x48;\nexport const MSG_SW_NOTE = 0x43;\nexport const MSG_SW_NOTE_TGGLE = 0x44;\nexport const MSG_SW_PRGBANK = 0x45;\nexport const MSG_SW_PRG_STEP = 0x46;\nexport const MSG_SW_NRPNCOARSE = 0x57;\nexport const MSG_SW_NRPNFINE = 0x58;\nexport const MSG_SW_MMC = 0x55;\nexport const MSG_SW_RELAY = 0x59;\nexport const MSG_SW_PRESETSELECT = 0x62;\nexport const MSG_SW_PRESETINCDEC = 0x56;\nexport const MSG_SW_STEPSELECT = 0x63;\nexport const MSG_SW_STEPINCDEC = 0x64;\n\nexport const MSG_ENC_CC = 0x12;\nexport const MSG_ENC_MIDICC_REL = 0x11;\nexport const MSG_ENC_NRPNC = 0x15;\nexport const MSG_ENC_NRPNF = 0x16;\nexport const MSG_ENC_PITCH = 0x13;\nexport const MSG_ENC_ATCHAN = 0x14;\nexport const MSG_ENC_PROGRAM = 0x10;\nexport const MSG_ENC_PRESETSELECT = 0x17;\nexport const MSG_ENC_STEPSELECT = 0x18;\n\nexport const MSG_LOAD_CC = 0x65;\n\nexport const MSG_TYPES = {\n\n    [MSG_AD_MIDICC]: \"CC\",\n    [MSG_AD_NRPNC]: \"NRPN C\",\n    [MSG_AD_NRPNF]: \"NRPN F\",\n    [MSG_AD_PITCH]: \"PITCH\",\n    [MSG_AD_ATCHAN]: \"AT CHAN\",\n    [MSG_DAWFUNC]: \"DAW FUNC\",\n    [MSG_CTRL_OFF]: \"CTRL_OFF\",\n\n    [MSG_SW_MIDICC_TGGLE]: \"CC TOGGLE\",\n    [MSG_SW_MIDICC]: \"CC\",\n    [MSG_SW_MIDICC_STEP]: \"CC STEP\",\n    [MSG_SW_NOTE]: \"NOTE\",\n    [MSG_SW_NOTE_TGGLE]: \"NOTE TOGGLE\",\n    [MSG_SW_PRGBANK]: \"PRG BANK\",\n    [MSG_SW_PRG_STEP]: \"PRG STEP\",\n    [MSG_SW_NRPNCOARSE]: \"NRPN COARSE\",\n    [MSG_SW_NRPNFINE]: \"NRPN FINE\",\n    [MSG_SW_MMC]: \"MMC\",\n    [MSG_SW_RELAY]: \"RELAY\",\n    [MSG_SW_PRESETSELECT]: \"PRESET SELECT\",\n    [MSG_SW_PRESETINCDEC]: \"PRESET INC DEC\",\n    [MSG_SW_STEPSELECT]: \"STEP SELECT\",\n    [MSG_SW_STEPINCDEC]: \"STEP INC DEC\",\n\n    [MSG_ENC_CC]: \"CC\",\n    [MSG_ENC_MIDICC_REL]: \"CC REL\",\n    [MSG_ENC_NRPNC]: \"NRPN C\",\n    [MSG_ENC_NRPNF]: \"NRPN F\",\n    [MSG_ENC_PITCH]: \"PITCH\",\n    [MSG_ENC_ATCHAN]: \"AT CHAN\",\n    [MSG_ENC_PROGRAM]: \"PRG\",\n    [MSG_ENC_PRESETSELECT]: \"PRESET SEL\",\n    [MSG_ENC_STEPSELECT]: \"STEP SEL\",\n\n    [MSG_LOAD_CC]: \"CC\"\n\n};\n\n// ============================================================================\n\n\nexport const CONTROL_ELEMENT = {\n    // 0x00: \"\",\n\n    0x01: \"step 1: channel\",\n    0x02: \"step 1: message type\",\n    0x03: \"step 1: data 1\",\n    0x04: \"step 1: data 2\",\n    0x05: \"step 1: data 3\",\n    0x06: \"step 1: step active\",\n\n    0x07: \"step 2: channel\",\n    0x08: \"step 2: message type\",\n    0x09: \"step 2: data 1\",\n    0x0A: \"step 2: data 2\",\n    0x0B: \"step 2: data 3\",\n    0x0C: \"step 2: step active\",\n\n    0x0D: \"step 3: channel\",\n    0x0E: \"step 3: message type\",\n    0x0F: \"step 3: data 1\",\n    0x10: \"step 3: data 2\",\n    0x11: \"step 3: data 3\",\n    0x12: \"step 3: step active\",\n\n    0x13: \"step 4: channel\",\n    0x14: \"step 4: message type\",\n    0x15: \"step 4: data 1\",\n    0x16: \"step 4: data 2\",\n    0x17: \"step 4: data 3\",\n    0x18: \"step 4: step active\",\n\n    0x19: \"step 5: channel\",\n    0x1A: \"step 5: message type\",\n    0x1B: \"step 5: data 1\",\n    0x1C: \"step 5: data 2\",\n    0x1D: \"step 5: data 3\",\n    0x1E: \"step 5: step active\",\n\n    0x1F: \"step 6: channel\",\n    0x20: \"step 6: message type\",\n    0x21: \"step 6: data 1\",\n    0x22: \"step 6: data 2\",\n    0x23: \"step 6: data 3\",\n    0x24: \"step 6: step active\",\n\n    // 0x25: \"\",\n    // 0x26: \"\",\n    // 0x27: \"\",\n    // 0x28: \"\",\n    // 0x29: \"\",\n    // 0x2A: \"\",\n    // 0x2B: \"\",\n    // 0x2C: \"\",\n    // 0x2D: \"\",\n    // 0x2E: \"\",\n    // 0x2F: \"\",\n    // 0x30: \"\",\n    // 0x31: \"\",\n    // 0x32: \"\",\n    // 0x33: \"\",\n    // 0x34: \"\",\n    // 0x35: \"\",\n    // 0x36: \"\",\n    // 0x37: \"\",\n    // 0x38: \"\",\n    // 0x39: \"\",\n    // 0x3A: \"\",\n    // 0x3B: \"\",\n    // 0x3C: \"\",\n    // 0x3D: \"\",\n    // 0x3E: \"\",\n    // 0x3F: \"\",\n    // 0x40: \"\",\n    // 0x41: \"\",\n    // 0x42: \"\",\n    // 0x43: \"\",\n\n    0x40: \"control mode\",\n    0x41: \"LED MIDI Ctrl\",\n    0x42: \"LED On Color\",\n    0x43: \"LED Off Color\",\n\n    // 0x44: \"\",\n    // 0x45: \"\",\n    // 0x46: \"\",\n    // 0x47: \"\",\n    // 0x48: \"\",\n    // 0x49: \"\",\n    // 0x4A: \"\",\n    // 0x4B: \"\",\n    // 0x4C: \"\",\n    // 0x4D: \"\",\n    // 0x4E: \"\",\n    // 0x4F: \"\",\n    // 0x50: \"\",\n    // 0x51: \"\",\n    // 0x52: \"\",\n    // 0x53: \"\",\n    // 0x54: \"\",\n    // 0x55: \"\",\n    // 0x56: \"\",\n    // 0x57: \"\",\n    // 0x58: \"\",\n    // 0x59: \"\",\n    // 0x5A: \"\",\n    // 0x5B: \"\",\n    // 0x5C: \"\",\n    // 0x5D: \"\",\n    // 0x5E: \"\",\n    // 0x5F: \"\",\n\n    // 0x60: \"control mode\",\n    // 0x61: \"LED MIDI Ctrl\",\n    // 0x62: \"LED On Color\",\n    // 0x63: \"LED Off Color\",\n\n    // 0x64: \"\",\n    // 0x65: \"\",\n    // 0x66: \"\",\n    // 0x67: \"\",\n    // 0x68: \"\",\n    // 0x69: \"\",\n    // 0x6A: \"\",\n    // 0x6B: \"\",\n    // 0x6C: \"\",\n    // 0x6D: \"\",\n    // 0x6E: \"\",\n    // 0x6F: \"\",\n    // 0x70: \"\",\n    // 0x71: \"\",\n    // 0x72: \"\",\n    // 0x73: \"\",\n    // 0x74: \"\",\n    // 0x75: \"\",\n    // 0x76: \"\",\n    // 0x77: \"\",\n    // 0x78: \"\",\n    // 0x79: \"\",\n    // 0x7A: \"\",\n    // 0x7B: \"\",\n    // 0x7C: \"\",\n    // 0x7D: \"\",\n    // 0x7E: \"\",\n\n    0x7F: \"ALL\"\n};\n\nexport const MIDI_ELEMENT = {\n    // 0x00: \"\",\n    0x01: \"setting 1: channel\",\n    0x02: \"setting 1: message type\",\n    0x03: \"setting 1: data 1\",\n    0x04: \"setting 1: data 2\",\n    0x05: \"setting 1: data 3\",\n    // 0x06: \"\",\n\n    0x07: \"setting 2: channel\",\n    0x08: \"setting 2: message type\",\n    0x09: \"setting 2: data 1\",\n    0x0A: \"setting 2: data 2\",\n    0x0B: \"setting 2: data 3\",\n    // 0x0C: \"\",\n\n    0x0D: \"setting 3: channel\",\n    0x0E: \"setting 3: message type\",\n    0x0F: \"setting 3: data 1\",\n    0x10: \"setting 3: data 2\",\n    0x11: \"setting 3: data 3\",\n    // 0x12: \"\",\n\n    0x13: \"setting 4: channel\",\n    0x14: \"setting 4: message type\",\n    0x15: \"setting 4: data 1\",\n    0x16: \"setting 4: data 2\",\n    0x17: \"setting 4: data 3\",\n    // 0x18: \"\",\n\n    0x19: \"setting 5: channel\",\n    0x1A: \"setting 5: message type\",\n    0x1B: \"setting 5: data 1\",\n    0x1C: \"setting 5: data 2\",\n    0x1D: \"setting 5: data 3\",\n    // 0x1E: \"\",\n\n    0x1F: \"setting 6: channel\",\n    0x20: \"setting 6: message type\",\n    0x21: \"setting 6: data 1\",\n    0x22: \"setting 6: data 2\",\n    0x23: \"setting 6: data 3\",\n    // 0x24: \"\",\n\n    0x25: \"setting 7: channel\",\n    0x26: \"setting 7: message type\",\n    0x27: \"setting 7: data 1\",\n    0x28: \"setting 7: data 2\",\n    0x29: \"setting 7: data 3\",\n    // 0x2A: \"\",\n\n    0x2B: \"setting 8: channel\",\n    0x2C: \"setting 8: message type\",\n    0x2D: \"setting 8: data 1\",\n    0x2E: \"setting 8: data 2\",\n    0x2F: \"setting 8: data 3\",\n    0x30: \"\",\n\n    0x31: \"setting 9: channel\",\n    0x32: \"setting 9: message type\",\n    0x33: \"setting 9: data 1\",\n    0x34: \"setting 9: data 2\",\n    0x35: \"setting 9: data 3\",\n    // 0x36: \"\",\n\n    0x37: \"setting 10: channel\",\n    0x38: \"setting 10: message type\",\n    0x39: \"setting 10: data 1\",\n    0x3A: \"setting 10: data 2\",\n    0x3B: \"setting 10: data 3\",\n    // 0x3C: \"\",\n\n    0x3D: \"setting 11: channel\",\n    0x3E: \"setting 11: message type\",\n    0x3F: \"setting 11: data 1\",\n    0x40: \"setting 11: data 2\",\n    0x41: \"setting 11: data 3\",\n    // 0x42: \"\",\n\n    0x43: \"setting 12: channel\",\n    0x44: \"setting 12: message type\",\n    0x45: \"setting 12: data 1\",\n    0x46: \"setting 12: data 2\",\n    0x47: \"setting 12: data 3\",\n    // 0x48: \"\",\n\n    0x49: \"setting 13: channel\",\n    0x4A: \"setting 13: message type\",\n    0x4B: \"setting 13: data 1\",\n    0x4C: \"setting 13: data 2\",\n    0x4D: \"setting 13: data 3\",\n    // 0x4E: \"\",\n\n    0x4F: \"setting 14: channel\",\n    0x50: \"setting 14: message type\",\n    0x51: \"setting 14: data 1\",\n    0x52: \"setting 14: data 2\",\n    0x53: \"setting 14: data 3\",\n    // 0x54: \"\",\n\n    0x55: \"setting 15: channel\",\n    0x56: \"setting 15: message type\",\n    0x57: \"setting 15: data 1\",\n    0x58: \"setting 15: data 2\",\n    0x59: \"setting 15: data 3\",\n    // 0x5A: \"\",\n\n    0x5B: \"setting 16: channel\",\n    0x5C: \"setting 16: message type\",\n    0x5D: \"setting 16: data 1\",\n    0x5E: \"setting 16: data 2\",\n    0x5F: \"setting 16: data 3\",\n    // 0x60: \"\",\n\n    // 0x61: \"\",\n    // 0x62: \"\",\n    // 0x63: \"\",\n    // 0x64: \"\",\n    // 0x65: \"\",\n    // 0x66: \"\",\n    // 0x67: \"\",\n    // 0x68: \"\",\n    // 0x69: \"\",\n    // 0x6A: \"\",\n    // 0x6B: \"\",\n    // 0x6C: \"\",\n    // 0x6D: \"\",\n    // 0x6E: \"\",\n    // 0x6F: \"\",\n    // 0x70: \"\",\n    // 0x71: \"\",\n    // 0x72: \"\",\n    // 0x73: \"\",\n    // 0x74: \"\",\n    // 0x75: \"\",\n    // 0x76: \"\",\n    // 0x77: \"\",\n    // 0x78: \"\",\n    // 0x79: \"\",\n    // 0x7A: \"\",\n    // 0x7B: \"\",\n    // 0x7C: \"\",\n    // 0x7D: \"\",\n    // 0x7E: \"\",\n\n    0x7F: \"ALL\"\n};\n","import React from \"react\";\nimport \"./PresetSelectors.css\";\nimport {presetXYToIndex} from \"../pacer\";\n\nconst PresetSelector = ({ name, id, selected, onClick }) =>\n    <div className={selected ? \"selected\" : \"\"} onClick={() => onClick(id)}>{name}</div>;\n\nconst PresetSelectors = ({ currentPreset, onClick }) =>\n    <div className=\"selectors\">\n    {\n        ['A', 'B', 'C', 'D'].map(\n            e => {\n                return (\n                    <div key={e}>{\n                        Array.from(Array(6).keys()).map(\n                            i => {\n                                let name = e + (i + 1);\n                                let id = presetXYToIndex(name);\n                                return <PresetSelector name={name} id={id} selected={id === currentPreset} onClick={onClick} key={id} />\n                            })\n                    }</div>)\n            }\n        )\n    }\n    </div>;\n\n/*\n\n    with CSS grid\n\nconst PresetSelectors = ({ currentPreset }) =>\n    <div>\n        <h2>Preset:</h2>\n        <div className=\"selectors\">\n            {\n                ['A', 'B', 'C', 'D'].map(\n                    e => {\n                        return Array.from(Array(6).keys()).map(\n                            i => {\n                                let id = e + (i+1);\n                                console.log(id, currentPreset);\n                                return <PresetSelector name={id} selected={id === currentPreset} />\n                            }\n                        )\n                    }\n                )\n            }\n        </div>\n    </div>;\n*/\n\nexport default PresetSelectors;\n","import WebMidi from \"webmidi\";\n\nfunction portFromId(id) {\n    let p = WebMidi.inputs.find(item => item.id === id);\n    if (p) {\n        return p;\n    } else {\n        return WebMidi.outputs.find(item => item.id === id);\n    }\n}\n\nfunction inputFromId(id) {\n    return WebMidi.inputs.find(item => item.id === id);\n}\n\n/**\n * Return webmidi input name from input id\n * @param id\n */\nfunction inputName(id) {\n    let i = WebMidi.inputs.find(item => item.id === id);\n    return i ? i.name : null;\n}\n\nfunction outputFromId(id) {\n    return WebMidi.outputs.find(item => item.id === id);\n}\n\nexport {\n    portFromId,\n    inputFromId,\n    inputName,\n    outputFromId\n}\n","import React, {Component} from \"react\";\nimport \"./MidiPorts.css\";\nimport Switch from \"react-switch\";\nimport {inputFromId, outputFromId, portFromId} from \"../utils/ports\";\n\nclass MidiPorts extends Component {\n\n    state = {\n        input: null,        // MIDI input ID / we support only one connected Pacer at a time\n        output: null        // MIDI output ID\n    };\n\n/*\n    static conInput = (id, onMidiEvent) => {\n        const i = inputFromId(id);\n        if (i) {\n            i.addListener('sysex', 'all', onMidiEvent);\n            // i.addListener('noteon', 'all', onMidiEvent);\n        } else {\n            console.log(`connectInput: input ${id} not found`);\n        }\n    };\n*/\n\n    connectInput = id => {\n        const i = inputFromId(id);\n        if (i) {\n            i.addListener('sysex', 'all', this.props.onMidiEvent);\n            // console.log(`connectInput: input ${id} connected`, i);\n        } else {\n            console.log(`connectInput: input ${id} not found`);\n        }\n        // console.log('add input to state.connectedInputs');\n        // this.setState({connectedInputs: [...this.state.connectedInputs, id]});\n    };\n\n    disconnectInput = id => {\n        const i = inputFromId(id);\n        if (i) {\n            i.removeListener();\n            // console.log(`disconnectInput: input ${id} disconnected`);\n        } else {\n            console.log(`disconnectInput: input ${id} not found`);\n        }\n        // let current = this.state.connectedInputs;\n        // current.splice(current.indexOf(id), 1);     // remove id from array\n        // console.log('remove input from state.connectedInputs');\n        // this.setState({connectedInputs: current});\n    };\n\n/*\n    connectOutput = id => {\n        const i = outputFromId(id);\n        if (i) {\n            // i.addListener('sysex', 'all', this.handleMidiOutputEvent);\n            console.log(`connectOutput: output ${id} connected`, i);\n        } else {\n            console.log(`connectOutput: output ${id} not found`);\n        }\n        // console.log('add output to state.connectedOutputs');\n        // this.setState({connectedOutputs: [...this.state.connectedOutputs, id]});\n    };\n\n    disconnectOutput = id => {\n        const i = outputFromId(id);\n        if (i) {\n            // i.removeListener();\n            console.log(`disconnectOutput: output ${id} disconnected`);\n        } else {\n            console.log(`disconnectOutput: output ${id} not found`);\n        }\n        // let current = this.state.connectedOutputs;\n        // current.splice(current.indexOf(id), 1);     // remove id from array\n        // console.log('remove output from state.connectedOutputs');\n        // this.setState({connectedOutputs: current});\n    };\n*/\n\n    togglePort = (port_id) => {\n        let p = portFromId(port_id);\n        if (p.type === 'input') {\n            let prev = this.state.input;\n            if (this.state.input) {\n                this.disconnectInput(this.state.input);\n                this.setState({ input: null });\n            }\n            if (port_id !== prev) {\n                this.connectInput(port_id);\n                this.setState({ input: port_id });\n            }\n        } else {\n            // There is nothing to \"connect\" for an output port since this type of port does not generate any event.\n            // if (this.state.output) this.disconnectOutput(this.state.output);\n            let prev = this.state.output;\n            if (this.state.output) {\n                // this.disconnectInput(this.state.input);\n                this.props.onPortSelection(null);\n                this.setState({output: null});\n            }\n            if (port_id !== prev) {\n                // this.connectInput(port_id);\n                this.props.onPortSelection(port_id);\n                this.setState({ output: port_id });\n            }\n        }\n    };\n\n\n    isPacer = (port) => {\n        // return true;\n        return port.manufacturer.toLowerCase() === 'nektar' && port.name.toUpperCase() === \"PACER MIDI1\";\n    };\n\n    // isSelected = (port) => {\n    //     return this.state.enabledPort === port.id;\n    // };\n\n/*\n    handleMidiConnectEvent = e => {\n\n        console.log(`MidiPorts.handleMidiConnectEvent: ${e.port.type} ${e.type}: ${e.port.name}`, e);\n\n        if (e.port.type === 'input') {\n            console.log(`MidiPorts.handleMidiConnectEvent: ignore MIDI input connect event`);\n            return;\n        }\n\n        if (e.port.type === 'output') {\n            console.log(\"MidiPorts.handleMidiConnectEvent: call onOutputChange\");\n            this.onOutputChange();\n            this.setState({ output: null });\n        }\n    };\n*/\n\n/*\n    WebMidi must be enabled before checking event listeners\n\n    componentDidMount() {\n        if (this.props.type === \"output\") {\n            if (WebMidi.hasListener(\"connected\", this.handleMidiConnectEvent)) {\n                console.log(\"MidiPorts.componentDidMount: handleMidiConnectEvent already set on 'connected' event\");\n            } else {\n                WebMidi.addListener(\"connected\", this.handleMidiConnectEvent);\n            }\n            if (WebMidi.hasListener(\"disconnected\", this.handleMidiConnectEvent)) {\n                console.log(\"MidiPorts.componentDidMount: handleMidiConnectEvent already set on 'disconnected' event\");\n            } else {\n                WebMidi.addListener(\"disconnected\", this.handleMidiConnectEvent);\n            }\n        }\n    }\n*/\n\n    /**\n     * This is to provide the auto-connect feature\n     * @param props\n     * @param state\n     */\n/*\n    static getDerivedStateFromProps(props, state) {\n        // console.log(\"MidiPorts.getDerivedStateFromProps\", state, props.ports);\n        let s = {};\n        if (state.input === null) {\n            for (let p of props.ports) {\n                if (p.type === 'input' && p.manufacturer.toLowerCase() === 'nektar') {  // TODO: check name too\n                    console.log(`MidiPorts.getDerivedStateFromProps: auto-connect ${p.name}`);\n                    s.input = p.id;\n                    if (props.onMidiEvent) MidiPorts.conInput(p.id, props.onMidiEvent);\n                    break;\n                }\n            }\n        }\n        // if (state.output === null) {\n        //     for (let p of props.ports) {\n        //         if (p.type === 'output' && p.manufacturer.toLowerCase() === 'nektar') {\n        //             s.output = p.id;\n        //             break;\n        //         }\n        //     }\n        // }\n        return Object.keys(s).length ? s : null;\n    }\n*/\n\n/*\n    componentDidMount() {\n        console.log(\"MidiPorts.componentDidMount\", this.state, this.props.ports);\n    }\n*/\n\n    componentWillUnmount() {\n        console.log(\"MidiPorts.componentWillUnmount\", this.state);\n        if (this.state.input) {\n            this.disconnectInput(this.state.input);\n        }\n    }\n\n    /**\n     * Render a group of midi connections\n     * @param props\n     * @returns {*}\n     * @constructor\n     */\n    render() {\n        // console.log(\"MidiPorts render\", this.props.type, this.props.ports);\n        // let ports = this.props.type === \"input\" ? WebMidi.inputs : WebMidi.outputs;\n        // if (!ports) return <div id={\"ports\"}></div>;\n\n        let pacerPorts = this.props.ports && this.props.ports.filter(port => this.isPacer(port));\n\n        // console.log(\"MidiPorts render pacer ports\", pacerPorts);\n\n        return (\n            (pacerPorts && pacerPorts.length > 0) ?\n                <div id={\"ports\"}>\n                    {\n                        pacerPorts.map(\n                            port => {\n                                // console.log(\"MidiPorts render port\", port);\n                                let isSelected = port.type === 'input' ? this.state.input === port.id : this.state.output === port.id;\n                                return (\n                                    <div key={port.id} className={isSelected ? `port ${port.type} enabled` : `port ${port.type}`}>\n                                        <div className={\"port-description\"}>\n                                            <div className=\"type\">{port.type} {port.type === 'input' ? 'from' : 'to'}</div>\n                                            <div className=\"port-name\">{port.name}</div>\n                                            {/*<div className={port.manufacturer ? \"port-manufacturer\" : \"port-manufacturer unknown\"}>{port.manufacturer ? port.manufacturer : \"unknown manufacturer\"}</div>*/}\n                                        </div>\n                                        <div className={\"port-state\"}>\n                                            <Switch\n                                                onChange={() => this.togglePort(port.id)}\n                                                checked={isSelected}\n                                                className=\"react-switch\"\n                                                id=\"normal-switch\"\n                                                height={20} width={42}\n                                            />\n                                            <span className={isSelected ? \"port-usage selected\" : \"port-usage\"}\n                                                  onClick={() => this.togglePort(port.id)}>{isSelected ? \"enabled\" : \"disabled\"}</span>\n                                        </div>\n                                    </div>\n                                );\n                            }\n                        )\n                    }\n                </div>\n            :\n                <div className=\"warning\">No Pacer {this.props.type} port found.</div>\n        );\n    }\n\n}\n\nexport default MidiPorts;\n","\n/*\nString.prototype.padZero = function (len, c) {\n    var s = '', c = c || '0', len = (len || 2) - this.length;\n    while (s.length < len) s += c;\n    return s + this;\n};\n*/\n\nexport const padZero = (str, len, char) => {\n    let s = '';\n    let c = char || '0';\n    let n = (len || 2) - str.length;\n    while (s.length < n) s += c;\n    return s + str;\n};\n\nexport const b = v => {\n    return padZero(v.toString(2), 8);\n};\n\nexport const b7 = v => {\n    return padZero(v.toString(2), 7);    // 7 bits !!!\n};\n\nexport const h = v => {\n    return (v === null || v === undefined) ? \"\" : padZero(v.toString(16).toUpperCase(), 2);\n};\n\nexport const hs = data => (data === null || data === undefined) ? \"\" : (Array.from(data).map(n => h(n))).join(\" \");    // Array.from() is necessary to get a non-typed array\n\n\n/**\n *\n * @param string\n * @param sep\n * @returns {*}\n */\nexport const fromHexString = function(string, sep) {\n    let s = sep ? string.replace(sep, '') : string;\n    if ((s.length % 2) > 0) {\n        return null;\n    }\n    if (s.length === 0) return null;\n    let a = new Uint8Array(s.length / 2);\n    for (let i=0; i < (s.length / 2); i++) {\n        a[i] = parseInt(s.substr(i * 2, 2), 16);\n    }\n    return a;\n};\n","import midi_name, {NEKTAR_TECHNOLOGY_INC} from \"midi-manufacturers\";\nimport {h, hs} from \"./hexstring\";\nimport {TARGETS, CONTROLS} from \"../pacer\";\nexport const SYSEX_START = 0xF0;\nexport const SYSEX_END = 0xF7;\n\n// offsets from start of sysex data, right after SYSEX_START\nconst CMD = 4;\nconst TGT = 5;\nconst IDX = 6;\nconst OBJ = 7;\nconst ELM = 8;\n\n/**\n * https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge/34749873#34749873\n * Simple object check.\n * @param item\n * @returns {boolean}\n */\nfunction isObject(item) {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\n/**\n * https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge/34749873#34749873\n * Deep merge two objects.\n * @param target\n * @param ...sources\n */\nexport function mergeDeep(target, ...sources) {\n    if (!sources.length) return target;\n    const source = sources.shift();\n\n    if (isObject(target) && isObject(source)) {\n        for (const key in source) {\n            if (isObject(source[key])) {\n                if (!target[key]) Object.assign(target, { [key]: {} });\n                mergeDeep(target[key], source[key]);\n            } else {\n                Object.assign(target, { [key]: source[key] });\n            }\n        }\n    }\n\n    return mergeDeep(target, ...sources);\n}\n\n/**\n *\n * @param data Uint8Array\n */\nfunction isSysexData(data) {\n    // let view = new Uint8Array(data);\n    // if (view[0] !== SYSEX_START) return false;\n    // if (view[view.byteLength - 1] !== SYSEX_END) return false;\n    if (data[0] !== SYSEX_START) return false;\n    if (data[data.byteLength - 1] !== SYSEX_END) return false;\n    return true;\n}\n\nfunction getManufacturerName(id) {\n    return id in midi_name ? midi_name[id] : \"manufacturer unknown\";\n}\n\nfunction getControlStep(data) {\n\n    // console.log(\"getControlStep\", hs(data));\n\n    // 01 01 0F 00      midi channel\n    // 02 01 47 00      message type\n    // 03 01 44 00      data 1\n    // 04 01 55 00      data 2\n    // 05 01 66 00      data 3\n    // 06 01 01         active\n\n    // the second byte is the length of the data that follows\n\n    //FIXME: use length\n\n    return {\n        index: (data[0] - 1) / 6 + 1,\n        config: {\n            channel: data[2],\n            msg_type: data[6],\n            data: [data[10], data[14], data[18]],\n            active: data[22]\n        }\n    };\n}\n\n\nfunction getControlLED(data) {\n\n    // console.log(\"getControlLED\", hs(data));\n\n    // 01 01 0F 00      midi channel\n    // 02 01 47 00      message type\n    // 03 01 44 00      data 1\n    // 04 01 55 00      data 2\n    // 05 01 66 00      data 3\n    // 06 01 01         active\n\n    // we ignore the first byte, which seems to always be 0x01\n\n    return {\n        midi: data[2],\n        on_color: data[6],\n        off_color: data[10]\n    };\n}\n\n\n/**\n * Parse a single sysex message\n * @param data\n * @returns {*}\n */\nfunction parseSysexMessage(data) {\n\n    // console.log(\"parseSysex\", hs(data));\n\n    //TODO: verify checksum\n\n    const message = {};\n\n    let cmd = data[CMD];\n    let tgt = data[TGT];\n    let idx = data[IDX];\n    let obj = data[OBJ];\n\n    switch (cmd) {\n        case 0x01:\n            // console.log(`command is set_data (${h(cmd)})`);\n            break;\n        case 0x02:\n            // console.log(`command is get_data (${h(cmd)})`);\n            break;\n        default:\n            console.warn(`parseSysexMessage: invalid command (${h(cmd)})`);\n            return null;\n    }\n\n    if (!(tgt in TARGETS)) {\n        console.warn(\"parseSysexMessage: invalid target\", h(tgt), tgt, TARGETS);\n        return null;\n    }\n\n    message[tgt] = {};\n\n    if (idx >= 0x19 && idx <= 0x7E) {\n        console.warn(\"parseSysexMessage: invalid/ignored idx\", idx);\n    }\n\n    message[tgt][idx] = {};\n\n    if (!(obj in CONTROLS)) {\n        console.warn(\"parseSysexMessage: invalid/ignored object\", h(obj));\n        return null;\n    }\n\n    let obj_type;\n    if (obj === 0x01) {\n        obj_type = \"name\";\n    } else if ((obj >= 0x0D && obj <= 0x12) ||\n        (obj >= 0x14 && obj <= 0x1B) ||\n        (obj >= 0x36 && obj <= 0x37)) {\n        obj_type = \"control\";\n    } else if (obj === 0x7E) {\n        obj_type = \"midi\";\n    } else {\n        console.warn('parseSysexMessage: invalid obj', obj);\n        return null;\n    }\n\n    // console.log(`target=${TARGET[tgt]} (${h(tgt)}), idx=${h(idx)}, object=${OBJECT[obj]} (${h(obj)}), type=${obj_type}`);\n    console.log(`${TARGETS[tgt]} ${h(idx)} : ${CONTROLS[obj]} ${obj_type}`);\n\n    if (obj_type === \"name\") {\n        //TODO: parse name\n    }\n\n    if (obj_type === \"control\") {\n\n        message[tgt][idx][\"controls\"] = {\n            [obj]: {\n                steps: {}\n            }\n        };\n\n        // which element?\n        let e = data[ELM];\n        if (e >= 0x01 && e <= 0x24) {\n\n            // STEPS\n            if (data.length > ELM+22) {\n                let s = getControlStep(data.slice(ELM, ELM + 23));\n                message[tgt][idx][\"controls\"][obj][\"steps\"][s.index] = s.config;\n            } else {\n                console.warn(`parseSysexMessage: data does not contains steps. data.length=${data.length}`, hs(data));\n            }\n\n        } else if (e === 0x60) {\n\n            // CONTROL MODE\n            console.log('parseSysexMessage: CONTROL MODE');\n\n        } else if (e === 0x40) {\n\n            // CONTROL MODE\n            console.log('parseSysexMessage: LED MIDI CTRL');\n\n        // } else if (e >= 0x61 && e <= 0x63) {\n        } else if (e >= 0x41 && e <= 0x43) {\n\n            // LED\n            console.error('parseSysexMessage: LED');\n            message[tgt][idx][\"controls\"][obj][\"led\"] = getControlLED(data.slice(ELM, ELM + 3));\n\n        } else if (e === 0x7F) {\n\n            // ALL\n            console.log('parseSysexMessage: ALL');\n\n        } else {\n            console.warn(`parseSysexMessage: unknown element: ${h(e)}`);\n            return null;\n        }\n\n    }\n\n    if (obj_type === \"midi\") {\n        //TODO: parse midi\n    }\n\n    // console.log('MESSAGE', message);\n\n    return message;\n\n} // parseSysex()\n\n\n/**\n * Parse a sysex dump. A dump can contains multiple sysex messages.\n * Return a array of presets.\n * @param data ArrayBuffer\n */\nfunction parseSysexDump(data) {\n\n    console.log(\"parseSysexDump\", hs(data));\n\n    if (data === null) return null;\n\n    // let d = new Uint8Array(data);\n    let d = data;   //TODO: use data variable\n    let presets = {};   // Collection of presets. The key is the preset's index. The value is the preset.\n    let global = {};    // global conf\n\n    // let k = data[0] === SYSEX_START ? 1 : 0;\n\n    let i = 0;\n    let cont = true;\n    while (cont) {\n\n        i = d.indexOf(SYSEX_START, i);\n        if (i < 0) break;\n\n        i++;\n\n        let k = d.indexOf(SYSEX_END, i);\n\n        let manufacturer_id = (Array.from(d.slice(i, i+3)).map(n => h(n))).join(\" \");    // Array.from() is necessary to get a non-typed array\n        if (manufacturer_id !== NEKTAR_TECHNOLOGY_INC) {\n            console.log(\"parseSysexDump: file does not contain a Nektar Pacer patch\", i, k, manufacturer_id, \"-\", hs(d));\n            return null;\n        }\n\n        if (d[i+3] !== 0x7F) {\n            console.warn(`parseSysexDump: invalid byte after manufacturer id: ${d[i+1 +3]}`);\n            return null;\n        }\n\n        let config = parseSysexMessage(d.slice(i, k));  // d.slice(i, k) are the data between SYSEX_START and SYSEX_END\n\n        if (config) {\n            mergeDeep(presets, config);\n        }\n\n    }\n\n    // console.log(JSON.stringify(presets));\n\n    return presets;\n\n}\n\n\nexport {\n    isSysexData,\n    parseSysexDump\n};\n\n","import React from \"react\";\nimport \"./Controls.css\";\nimport {FOOTSWITCHES, STOMPSWITCHES_TOP, STOMPSWITCHES_BOTTOM, EXPPEDALS, CONTROLS} from \"../pacer\";\n\nconst Control = ({ name, id, selected, onClick }) =>\n    <div className={selected ? \"selected\" : \"\"} onClick={() => onClick(id)}>\n        <div className=\"name\">{name}</div>\n    </div>;\n\n\nconst Controls = ({ currentControl, onClick }) =>\n    <div className=\"controls\">\n        {\n            FOOTSWITCHES.map(\n                key => <Control key={key} name={CONTROLS[key]} id={key} selected={key === currentControl} onClick={onClick} />\n            )\n        }\n        {\n            EXPPEDALS.map(\n                key => <Control key={key} name={CONTROLS[key]} id={key} selected={key === currentControl} onClick={onClick} />\n            )\n        }\n        <div className=\"empty\">&nbsp;</div>\n        {\n            STOMPSWITCHES_TOP.map(\n                key => <Control key={key} name={CONTROLS[key]} id={key} selected={key === currentControl} onClick={onClick} />\n            )\n        }\n        <div className=\"empty\">&nbsp;</div>\n        {\n            STOMPSWITCHES_BOTTOM.map(\n                key => <Control key={key} name={CONTROLS[key]} id={key} selected={key === currentControl} onClick={onClick} />\n            )\n        }\n    </div>;\n\n\nexport default Controls;\n","import React from \"react\";\nimport \"./DumpSysex.css\";\nimport {\n    CONTROL_ELEMENT,\n    MIDI_ELEMENT,\n    MSG_SW_NOTE,\n    CONTROLS,\n    TARGETS,\n    TARGET_PRESET,\n    MSG_TYPES,\n    presetIndexToXY\n} from \"../pacer\";\nimport {h, hs} from \"../utils/hexstring\";\nimport \"./DumpSysex.css\";\nimport * as Note from \"tonal-note\";\n\n/*\nconst presetCoord = index => {\n    if (index === 0) return \"CUR\";\n    // 23 => D5\n    let b = Math.floor((index - 1) / 6);\n    let i = (index - 1) % 6 + 1;\n    return String.fromCharCode(b + 65) + i.toString();\n};\n*/\n\nconst ControlElement = ({ data }) => {\n    if (data.element === undefined) return null;\n    if (!(data.element in CONTROL_ELEMENT)) return null;\n    return <div>{CONTROL_ELEMENT[data.element]} = {h(data.element_data)}</div>;\n};\n\nconst MidiElement = ({ data }) => {\n    return <span>midi element</span>;\n};\n\nconst Midis = ({ midis }) => {\n    if (midis === null) return null;\n    return (\n        <div></div>\n    );\n};\n\nconst Control = ({ obj, config }) => {\n    if (config === null || config === undefined) return null;\n    return (\n        <div>\n            <h3>{CONTROLS[obj]}</h3>\n            <div>\n                <h4>steps</h4>\n                <div>\n                {Object.keys(config[\"steps\"]).map(i =>\n                    <div key={`${obj}.${i}`}>\n                        <div>step {i}</div>\n                        <ul>\n                            <li>MIDI channel: {h(config[\"steps\"][i][\"channel\"])}</li>\n                            <li>message type: {h(config[\"steps\"][i][\"msg_type\"])}</li>\n                            <li>data: {hs(config[\"steps\"][i][\"data\"])}</li>\n                            <li>active: {config[\"steps\"][i][\"active\"]}</li>\n                        </ul>\n                    </div>\n                )}\n                </div>\n                <h4>LED</h4>\n                <h4>control</h4>\n            </div>\n        </div>\n    );\n};\n\nconst ControlTable = ({ obj, config }) => {\n    if (config === null || config === undefined) return null;\n    return (\n        <div className=\"dump-control\">\n            <table>\n                <tbody>\n                    <tr>\n                        <td colSpan={7} className=\"name\">{CONTROLS[obj]}</td>\n                    </tr>\n                    {Object.keys(config[\"steps\"]).map(i =>\n                        <tr key={`${obj}.${i}`}>\n                            <td>step {i}</td>\n                            <td>ch. {h(config[\"steps\"][i][\"channel\"])}</td>\n                            <td>msg {h(config[\"steps\"][i][\"msg_type\"])}</td>\n                            <td>{MSG_TYPES[config[\"steps\"][i][\"msg_type\"]]}</td>\n                            <td>{hs(config[\"steps\"][i][\"data\"])}</td>\n                            <td>{config[\"steps\"][i][\"msg_type\"] === MSG_SW_NOTE ? Note.fromMidi(config[\"steps\"][i][\"data\"][0], true) : \"  \"}</td>\n                            <td>active {config[\"steps\"][i][\"active\"]}</td>\n                        </tr>\n                    )}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nconst Controls = ({ controls }) => {\n    if (controls === null || controls === undefined) return null;\n    return (\n        <div className=\"dump-controls\">\n            {Object.keys(controls).map(obj => <ControlTable key={obj} obj={obj} config={controls[obj]} />)}\n        </div>\n    );\n};\n\nconst Preset = ({ index, data }) => {\n    if (data === null || data === undefined) return null;\n    return (\n        <div>\n            <h2>Preset {presetIndexToXY(parseInt(index, 10))} (#{index})</h2>\n            <Controls controls={data[\"controls\"]} />\n            <Midis controls={data[\"controls\"]} />\n            {/*<pre>{JSON.stringify(data, null, 4)}</pre>*/}\n            {/*<pre>{JSON.stringify(data, null, 4)}</pre>*/}\n        </div>\n    );\n};\n\nconst Presets = ({ presets }) => {\n    if (presets === null || presets === undefined) return null;\n    return (\n        <div>\n            {Object.keys(presets).map(idx => <Preset key={idx} index={idx} data={presets[idx]} />)}\n        </div>\n    );\n};\n\nconst DumpSysex = ({ data }) => {\n    return (\n        <div className=\"dump code\">\n            {\n                // _.map(data, (value, key) => <Preset name={key} data={value} />)\n                data && <Presets presets={data[TARGET_PRESET]} />\n            }\n{/*\n            {\n                JSON.stringify(data, null, 4)\n            }\n*/}\n        </div>\n    );\n};\n\n\nexport default DumpSysex;\n","import React, {Component} from 'react';\nimport PresetSelectors from \"../components/PresetSelectors\";\nimport MidiPorts from \"../components/MidiPorts\";\nimport {isSysexData, mergeDeep, parseSysexDump} from \"../utils/sysex\";\nimport Controls from \"../components/Controls\";\nimport {CONTROLS, presetIndexToXY, requestPresetObj, SYSEX_SIGNATURE} from \"../pacer\";\nimport {hs} from \"../utils/hexstring\";\nimport \"./Home.css\";\nimport {produce} from \"immer\";\nimport DumpSysex from \"../components/DumpSysex\";\nimport {outputFromId} from \"../utils/ports\";\n\nclass Home extends Component {\n\n    state = {\n        output: null,           // MIDI output port enabled\n        presetIndex: \"\",      // preset name, like \"B2\"\n        controlId: \"\",     //\n        message: null,\n        data: null\n    };\n\n    selectPreset = (name) => {\n        this.setState({presetIndex: name});\n    };\n\n    selectControl = (id) => {\n        console.log(`selectControl ${id}`);\n        let msg = requestPresetObj(this.state.presetIndex, id);\n        this.sendSysex(msg);\n        this.setState({\n            controlId: id,\n            message: msg\n        });\n    };\n\n    handleMidiInputEvent = (event) => {\n        console.log(\"Home.handleMidiInputEvent\", event, event.data);\n        // if (event instanceof MIDIMessageEvent) {\n        if (isSysexData(event.data)) {\n            this.setState(\n                produce(draft => {\n                    draft.data = mergeDeep(draft.data || {}, parseSysexDump(event.data));\n                    // this.props.onBusy(false);\n                })\n            )\n        } else {\n            console.log(\"MIDI message is not a sysex message\")\n        }\n        // }\n    };\n\n    sendSysex = msg => {\n        console.log(\"sendSysex\", msg);\n        if (this.state.output) {\n            this.setState(\n                {data: null},\n                () => outputFromId(this.state.output).sendSysex(SYSEX_SIGNATURE, msg)\n            );\n        }\n    };\n\n    enablePort = (port_id) => {\n        console.warn(`SendTester.componentDidMount.enablePort ${port_id}`);\n        this.setState({output: port_id});\n    };\n\n    render() {\n        const { presetIndex, controlId, message, data } = this.state;\n\n        return (\n            <div>\n\n                <h2>1. Enable the input and output MIDI ports used with your Pacer:</h2>\n\n                <div className=\"sub-header\">\n                    {this.props.inputPorts && <MidiPorts ports={this.props.inputPorts} type=\"input\" onMidiEvent={this.handleMidiInputEvent} />}\n                    {this.props.outputPorts && <MidiPorts ports={this.props.outputPorts} type=\"output\" onPortSelection={this.enablePort} />}\n                </div>\n\n                <div className=\"main\">\n\n                    <div>\n                        <h2>2. Choose the preset and the control to view/edit:</h2>\n\n                        <PresetSelectors currentPreset={presetIndex} onClick={this.selectPreset} />\n\n                        {presetIndex && <Controls currentControl={controlId} onClick={this.selectControl} />}\n                    </div>\n\n                    {presetIndex && controlId &&\n                    <div>\n                        <div>\n                            <h3>preset {presetIndexToXY(presetIndex)}, control {CONTROLS[controlId]}</h3>\n                        </div>\n\n                        <div>\n                            sysex message to request config: <span className=\"code\">{hs(message)}</span>\n                        </div>\n                    </div>\n                    }\n\n                    <div>\n\n                        <h2>Response:</h2>\n                        <div className=\"message code\">\n                            <DumpSysex data={data} />\n                        </div>\n\n                    </div>\n\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default Home;\n","import React, {Component} from 'react';\nimport Dropzone from \"react-dropzone\";\nimport {produce} from \"immer\";\nimport {isSysexData, mergeDeep, parseSysexDump} from \"../utils/sysex\";\nimport DumpSysex from \"../components/DumpSysex\";\nimport MidiPorts from \"../components/MidiPorts\";\nimport './DumpDecoder.css';\nimport {hs} from \"../utils/hexstring\";\n// import * as WebMidi from \"webmidi\";\n\nconst MAX_FILE_SIZE = 5 * 1024*1024;\n\nclass DumpDecoder extends Component {\n\n    state = {\n        // inputs: [],         // array of MIDI inputs (copied from WebMidi object)\n        // outputs: [],        // array of MIDI outputs (copied from WebMidi object)\n        // currentPreset: \"\",  // preset name, like \"B2\",\n        data: null  //,\n        // busy: false\n    };\n\n    handleMidiInputEvent = (event) => {\n        console.log(\"DumpDecoder.handleMidiInputEvent\", event, event.data);\n        // if (event instanceof MIDIMessageEvent) {\n        if (isSysexData(event.data)) {\n            console.log(\"DumpDecoder.handleMidiInputEvent: data is SysEx\");\n            this.setState(\n                produce(draft => {\n                    draft.data = mergeDeep(draft.data || {}, parseSysexDump(event.data));\n                    // this.props.onBusy(false);\n                })\n            )\n        } else {\n            console.log(\"MIDI message is not a sysex message\")\n        }\n        // }\n    };\n\n    /**\n     *\n     * @param files\n     * @returns {Promise<void>}\n     */\n    async readFiles(files) {\n        await Promise.all(files.map(\n            async file => {\n                if (file.size > MAX_FILE_SIZE) {\n                    console.warn(`${file.name}: file too big, ${file.size}`);\n                } else {\n                    const data = new Uint8Array(await new Response(file).arrayBuffer());\n                    if (isSysexData(data)) {\n                        this.setState(\n                            produce(draft => {\n                                draft.data = mergeDeep(draft.data || {}, parseSysexDump(data));\n                                this.props.onBusy(false);\n                            })\n                        )\n                    } else {\n                        console.log(\"readFiles: not a sysfile\", hs(data.slice(0, 5)));\n                    }\n                    // non sysex files are ignored\n                }\n                // too big files are ignored\n            }\n        ));\n    }\n\n    /**\n     * Drop Zone handler\n     * @param files\n     */\n    onDrop = (files) => {\n        console.log('drop', files);\n        this.props.onBusy(true);\n        this.readFiles(files);  // returned promise is ignored, this is normal.\n    };\n\n/*\n    midiOn = err => {\n        if (err) {\n            console.warn(\"DumpDecoder: WebMidi could not be enabled.\", err);\n        } else {\n            console.log(\"DumpDecoder: WebMidi enabled!\");\n        }\n    };\n    componentDidMount() {\n        console.log(\"DumpDecoder.componentDidMount\", WebMidi.enabled);\n        WebMidi.enable(this.midiOn, true);  // true to enable sysex support\n    }\n*/\n\n\n\n    /**\n     * @returns {*}\n     */\n    render() {\n\n        const { data } = this.state;\n\n        console.log(\"DumpDecoder.render\", this.props);\n\n        return (\n            <div>\n\n                <h2>1. Enable the input MIDI port used with your Pacer:</h2>\n\n                <div className=\"sub-header\">\n                    {/*<h2>sysex<br />DumpDecoder</h2>*/}\n                    {this.props.inputPorts && <MidiPorts ports={this.props.inputPorts} type=\"input\" onMidiEvent={this.handleMidiInputEvent} />}\n                </div>\n\n                <div className=\"main\">\n\n                    <h2>2. Send a dump from the Pacer or drop a dump file:</h2>\n\n                    <Dropzone onDrop={this.onDrop} className=\"drop-zone\">\n                        Drop a binary sysex file here or click to open the file dialog\n                    </Dropzone>\n\n                    <DumpSysex data={data} />\n\n                </div>\n\n            </div>\n\n        );\n    }\n}\n\nexport default DumpDecoder;\n","import React, {Component} from 'react';\nimport {isSysexData, mergeDeep, parseSysexDump} from \"../utils/sysex\";\nimport MidiPorts from \"../components/MidiPorts\";\nimport {requestPreset, requestPresetObj, SYSEX_SIGNATURE} from \"../pacer/index\";\nimport {outputFromId} from \"../utils/ports\";\nimport {fromHexString, h, hs} from \"../utils/hexstring\";\nimport \"./TestSender.css\";\nimport {produce} from \"immer\";\nimport DumpSysex from \"../components/DumpSysex\";\nimport {checksum} from \"../pacer\";\n\nclass TestSender extends Component {\n\n    state = {\n        output: null,           // MIDI output port enabled\n        data: null,\n        messages: [\n            requestPreset(5),\n            requestPresetObj(5, 0x0D)\n        ],\n        customMessage: \"\",\n        checksum: null\n    };\n\n    handleMidiInputEvent = (event) => {\n        console.log(\"TestSender.handleMidiInputEvent\", event, event.data);\n        // if (event instanceof MIDIMessageEvent) {\n        if (isSysexData(event.data)) {\n            console.log(\"TestSender.handleMidiInputEvent: update state\");\n            this.setState(\n                produce(draft => {\n                    draft.data = mergeDeep(draft.data || {}, parseSysexDump(event.data));\n                    // this.props.onBusy(false);\n                })\n            )\n        } else {\n            console.log(\"MIDI message is not a sysex message\")\n        }\n        // }\n    };\n\n    enablePort = (port_id) => {\n        console.warn(`SendTester.componentDidMount.enablePort ${port_id}`);\n        this.setState({output: port_id});\n    };\n\n    sendSysex = msg => {\n        console.log(\"sendSysex\", msg);\n        if (this.state.output) {\n            this.setState(\n                {data: null},\n                () => outputFromId(this.state.output).sendSysex(SYSEX_SIGNATURE, msg)\n            );\n        }\n    };\n\n    sendMessage = (msg) => {\n        this.sendSysex(msg);\n    };\n\n    updateCustomMessage = (event) => {\n        let s = (event.target.value.match(/[0-9a-fA-F]+/g) || []).join('');\n        let h = '';\n        for (let i=0; i<s.length; i++) {\n            if ((i > 0) && (i % 2 === 0)) h += ' ';\n            h += s[i];\n        }\n        this.setState({\n            customMessage: h,\n            cs: checksum(fromHexString(h, / /g))\n        });\n    };\n\n    sendCustomMessage = () => {\n        let data = fromHexString(this.state.customMessage, / /g);\n        if (data && data.length > 0) this.sendSysex(data);\n    };\n\n    /**\n     * @returns {*}\n     */\n    render() {\n\n        console.log(\"SendTester.render\", this.props);\n\n        const { data, messages, customMessage, cs } = this.state;\n\n        console.log(\"SendTester.render\", messages, customMessage.length % 2);\n\n        return (\n            <div>\n\n                <h2>1. Enable the input and output MIDI ports used with your Pacer:</h2>\n\n                <div className=\"sub-header\">\n                    {this.props.inputPorts && <MidiPorts ports={this.props.inputPorts} type=\"input\" onMidiEvent={this.handleMidiInputEvent} />}\n                    {this.props.outputPorts && <MidiPorts ports={this.props.outputPorts} type=\"output\" onPortSelection={this.enablePort} />}\n                </div>\n\n                <div className=\"main\">\n\n\n                    <h2>Test messages:</h2>\n                    <div>\n                        {messages.map((msg, i) =>\n                            <div key={i} className=\"send-message\">\n                                <button onClick={() => this.sendMessage(msg)}>send</button>\n                                <span className=\"code light\">{hs(SYSEX_SIGNATURE)} </span>\n                                <span className=\"code\">{hs(msg)}</span>\n                                <span className=\"code light\"> {h(checksum(msg))}</span>\n                            </div>\n                        )}\n                    </div>\n\n                    <h2>Custom message:</h2>\n                    <div>\n                        <div className=\"send-message\">\n                            <button onClick={this.sendCustomMessage} disabled={customMessage.length === 0}>send</button>\n                            <span className=\"code light\">{hs(SYSEX_SIGNATURE)} </span>\n                            <input type=\"text\" className=\"code\" size=\"30\" value={customMessage} placeholder={\"hex digits only\"} onChange={this.updateCustomMessage} />\n                            <span className=\"code light\"> {h(cs)}</span>\n                        </div>\n                    </div>\n\n                    <h2>Response:</h2>\n                    <div className=\"message code\">\n                        {data && JSON.stringify(data)}\n                        <DumpSysex data={data} />\n                    </div>\n\n                </div>\n\n            </div>\n\n        );\n    }\n}\n\nexport default TestSender;\n","import React, {Component} from 'react';\nimport * as WebMidi from \"webmidi\";\nimport './App.css';\nimport Midi from \"./components/Midi\";\nimport { HashRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport DumpDecoder from \"./pages/DumpDecoder\";\nimport TestSender from \"./pages/TestSender\";\n\n\nconst MenuLink = ({ label, to, activeOnlyWhenExact }) => (\n    <Route\n        path={to}\n        exact={activeOnlyWhenExact}\n        children={({ match }) => (\n            <span className={match ? \"header-link active\" : \"header-link\"}>\n                <Link to={to}>{label}</Link>\n            </span>\n        )}\n    />\n);\n\n\nclass App extends Component {\n\n    state = {\n        inputs: [],         // array of MIDI inputs (copied from WebMidi object)\n        outputs: [],        // array of MIDI outputs (copied from WebMidi object)\n        // data: null,\n        busy: false\n    };\n\n    /**\n     * MIDI output port handler\n     */\n    onInputChange = () => {\n        this.setState({ inputs: WebMidi.inputs });\n    };\n\n    /**\n     * MIDI output port handler\n     */\n    onOutputChange = () => {\n        this.setState({ outputs: WebMidi.outputs });\n    };\n\n    /**\n     *\n     * @param busy boolean\n     */\n    onBusy = (busy) => {\n        this.setState({ busy });\n    };\n\n    /**\n     * Main app render\n     * @returns {*}\n     */\n    render() {\n        const { inputs, outputs, busy } = this.state;\n\n        return (\n            <Router>\n                <div className=\"app\">\n\n                    <Midi onInputChange={this.onInputChange} onOutputChange={this.onOutputChange} />\n\n                    <header className=\"header\">\n                        {/*<h1>Pacer Editor</h1>*/}\n                        <MenuLink activeOnlyWhenExact={true} to=\"/\" label=\"Home\" />\n                        <MenuLink to=\"/dumpdecoder\" label=\"Dump decoder\" />\n                        <MenuLink to=\"/testsender\" label=\"Debug message\" />\n                        <div className=\"spacer\">\n                        </div>\n                        {busy && <div className=\"busy\">busy</div>}\n                    </header>\n\n                    <div className=\"wrapper\">\n                        <div className=\"content\">\n                            <Switch>\n                                <Route exact={true} path=\"/\" render={\n                                    props => (\n                                        <Home inputPorts={inputs} outputPorts={outputs} onBusy={this.onBusy} />\n                                    )\n                                }/>\n                                <Route path=\"/dumpdecoder\" render={\n                                    props => (\n                                        <DumpDecoder inputPorts={inputs} onBusy={this.onBusy} />\n                                    )\n                                }/>\n                                <Route path=\"/testsender\" render={\n                                    props => (\n                                        <TestSender inputPorts={inputs} outputPorts={outputs} onBusy={this.onBusy} />\n                                    )\n                                }/>\n                            </Switch>\n                        </div>\n                        <div className=\"help\">\n                            <h2>Help</h2>\n                        </div>\n                    </div>\n\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nfunction noop() {}\nif (process.env.NODE_ENV !== 'development') {\n    console.log = noop;\n    console.warn = noop;\n    console.error = noop;\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}